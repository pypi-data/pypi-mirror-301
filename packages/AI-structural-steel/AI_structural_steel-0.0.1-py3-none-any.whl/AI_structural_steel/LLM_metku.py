# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_LLM_metku.ipynb.

# %% auto 0
__all__ = ['LLM_metku']

# %% ../nbs/00_LLM_metku.ipynb 3
from BW.LLM import LLM
from BW.code_interpreter import extract_python_code, run
import forallpeople as fp
import handcalcs.render as hc
from handcalcs.decorator import handcalc
from math import pi, sqrt, sin, cos, tan
from IPython.display import display, Math
import matplotlib.pyplot as plt
from BW.LLM_truss import *


import os
from dotenv import load_dotenv
from groq import Groq

# %% ../nbs/00_LLM_metku.ipynb 5
class LLM_metku:
    def __init__(self, model="mixtral-8x7b-32768", sprint=True):
        self.model = model
        self.sprint = sprint
        self.api_key = self.get_api_key()  # Get the API key
        self.examples = [
            # Include all the examples you listed before here...
            example_1, example_2, example_3, example_10, example_11,
            example_12, example_14, example_15, example_16,
            example_50
        ] 
    
    def get_api_key(self):
        # Load environment variables from the .env file
        load_dotenv()
        
        # Fetch API key from environment variables
        api_key = os.getenv("GROQ_API_KEY")
        
        # Check if the API key is missing and raise an error if it is
        if not api_key:
            raise ValueError("API key not found! Make sure the .env file is properly set up and the GROQ_API_KEY is set.")
        
        return api_key

    def LLM(self, mes, model=None, sprint=True):
        # If no model specified, use the default model
        if model is None:
            model = self.model
        
        client = Groq(api_key=self.api_key)
        chat_completion = client.chat.completions.create(
            messages=[{"role": "user", "content": mes}],
            model=model,
        )
        if sprint:
            print(chat_completion.choices[0].message.content)
        return chat_completion.choices[0].message.content


    def steel_truss(self, mes):
        """
        Generate the truss design code from the message input using pre-existing examples as templates.
        """
        res = self.LLM(f"""
        HERE IS examples please use this template!:
        {self.examples}
        
        INPUT: {mes}
        """, model=self.model, sprint=self.sprint)
        #if self.sprint:
        #    print(res)
        return res

    def steel_truss_run(self, mes):
        """
        Run the generated code by extracting Python code and running it using the provided code interpreter.
        """
        text = self.steel_truss(mes)
        c_text = extract_python_code(text)
        run(c_text)

    def steel_truss_run_example(self):
        """
        Example function to generate a steel truss and optimize it.
        """
        code = """
        from BW import LLM_truss as LT
        from BW.code_interpreter import *
        from BW import TERAS_RISTIKKO as TR
        
        text = LT.steel_truss("Can you design a steel truss in python? L = 30m and h_mid = 3m? N-type truss.", sprint=True)
        c_text = extract_python_code(text)
        tt = run(c_text, True)
        t = tt.get("f", tt.get("t", tt.get("frame")))
        
        TR.truss_optimization(t)
        TR.truss2pdf(t)
        name_d = TR.truss_to_dxf(t)
        TR.dxf2pdf(name_d)
        LT.truss_handclac_normalforce_midpoint(t)
        """
        if self.sprint:
            print(code)
        return code

    @handcalc()
    def truss_handclac_normalforce_midpoint(self, q, l, h):
        """
        Perform a simple hand calculation to find the normal force at the midpoint of a truss.
        """
        fp.environment('structural', top_level=True)
        
        q = q * fp.kN / fp.m
        l = l * fp.mm
        h = h * fp.mm
        M = 1 / 8 * q * l**2
        N_mid = M / h
        return M, N_mid

    def plot_truss_force(self, q, l, h):
        """
        Helper method to display the hand calculation result.
        """
        result = self.truss_handclac_normalforce_midpoint(q, l, h)
        display(Math(result[0]))  # Render LaTeX output directly

