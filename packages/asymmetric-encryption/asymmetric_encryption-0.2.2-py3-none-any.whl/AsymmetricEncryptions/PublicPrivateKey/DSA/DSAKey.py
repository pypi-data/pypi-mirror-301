from __future__ import annotations
import secrets
from AsymmetricEncryptions.General import PrimeNumberGen, XOR, Exportation
from AsymmetricEncryptions.Interfaces import IKey, IExport

import hashlib

class DSAKey(IKey, IExport):
    """The key object of DSA"""
    # H is Sha256 |H| is 256 bits or 32 bytes
    # L (Key length) is going to be 1024
    # N = 160
    # q (N bit prime)
    # p (L bit prime), p - 1 mod q == 0
    # h (2 <= h < p - 2), usually 2
    # g = pow(h, (p-1) / q, p), if g == 1 -> reselect h
    # shared parameters are (p, q, g)
    precalculated_av = {1024: {
        "p": 83508937277232536666199285024951931271259448347798246512243734661809367372382376947807344029552851940618064137726661918419079659044393839386783208994150121061175524415714520160890273372197675829513549205797440388836481129778480623824471063065150109173669720776739699518509569637192258043403707899553462896674971,
        "q": 103097453428682144032344796327101149717604257219504008039807079829394280706644909812107832135250434494590202639168718417801332912400486221465164455548333482791574721500882123655420090582960093616683394081231407887452445839232692128178359337117469270584777433057703332738900703255792911164695935678461065304537,
        "nBit": 1024},
        2048: {
        "p": 29220796832125661857385376882934463216181752955941498819344830003868219947374354030599712265912612975492552559609089346775150411696012077390207337969670690680222004816823621118328405405093836094363416586713734056287036589123251945016986191958642728219604993712118504386926361960483925198666208087021530635611214067225842267789563583071834110645181556591879251977898257395454730584741477478640769884906020458000286926109276202981418208638955437514218991331252477610743499357636349063422146778780687639004083657485677148039025035916549385793395231488798028244338347939715015291130776711650703563335001730488978272838144307,
        "q": 20264075473041374380988472179566201952969315503426836906619160890338571392076528453952643735029551300618968487939729089303155625309301024542446142836110049015410544255772275394125107770522771216618180712006750385774643959170077631773222047128046274770877249453618935081086242691042943965787939033995513616928719880184356635082915106152450839559765295833480757266226253394906193193301995477559479809227476045769963194250538282233993209874448985793494446138177862420765256142604957741624234936741114867547908222944297606129698360552392084461439134180858549406614665700218457206054630174515051014795424223640068150373193,
        "nBit": 2048},
        3072: {
        "p": 5739706076530113252168034873994527706727182580909962255320232858276432092800632157969181405726144567757648752762937064913039319550127865745601370770441644673887542072236602308919295759375383778485193379876065904306547548178634727303945153687480726554457585822526355501984985810122788558463595549365790608695629248695488497479330392228824194429364937367194820188422760812621340773049206663685978263496249897626343963313128337778179528254877693185380949302437916317135677996504715700250579708270163547169053977289438641128475048794112476443134673166689226696144971727569346814228147972769517560946201986196220893811789522879502360986261172635170373842057761724869798198985010643215744861227966636125299140471760196235064591299052462714043065185460319471358431069459728410564445245223850425186689928221158044333491553549540261682091897026104465418812284895256270190967660558176105702957286298834997560986915966093067303131034294363,
        "q": 3637329579550135140790896624838103743173119506280077474854393446309526041065039390348023704515934453585328740660923361795335436977267342044107332554145528944161940476702536317439350924825971976226358288894845313248762704802683604121638246950241271580771600647988818442322551210470715182803292490092389485865417774838712609302490742857303038294908071842328783389368036002928606320056531472551317023761882064401992372188294257147135315750873062855121007162508185245333129275351530862009239358853082095797879580031329937343773795180045929304901567279270739351169183604289826878471576662084611889066034211784677372504302612724652953730203531454480591788376274857331938022170475692785643131323172773209948758220380352493703796767460369273791549547186514240404582426780562997822842360724873526734277521052698380439475002249391800812479022196517405208372804116131983644466198072354946579820840493558300102019591866979130103378348729,
        "nBit": 3072}
    }

    def __init__(self, g: int, p: int, q: int, y: int, x: int or None = None):
        self.p = p
        self.q = q
        self.g = g
        self.y = y
        self.x = x
        self.has_private = False
        if x:
            self.has_private = True
            self.public = DSAKey(g=g, p=p, q=q, y=y, x=None)

    @staticmethod
    def new(nBit: int = 1024, use_precalculated: bool = True) -> DSAKey:
        """Generates a private key"""
        if use_precalculated and nBit in DSAKey.precalculated_av:
            p: int = DSAKey.precalculated_av[nBit]["p"]
            q: int = DSAKey.precalculated_av[nBit]["q"]
        else:
            # p and q generate code
            q: int = PrimeNumberGen.generate(nBit)
            loop: int = 2
            p: int = q * loop + 1
            while not PrimeNumberGen.isMillerRabinPassed(p):
                loop += 1
                p: int = q * loop + 1

        # DSA Params
        h: int = secrets.randbelow(p - 2)
        g: int = pow(h, int((p-1) // q), p)
        while g == 1:
            h: int = secrets.randbelow(p - 2)
            g: int = pow(h, int((p - 1) // q), p)
        x: int = secrets.randbelow(q - 1)
        y: int = pow(g, x, p)
        return DSAKey(g=g, p=p, q=q, y=y, x=x)

    def __str__(self) -> str:
        r: str = ""
        if self.has_private:
            r += f"""
Private Key:

p = {self.p}
q = {self.q}
g = {self.g}
y = {self.y}
x = {self.x}

"""
        r += f"""
Public Key:
p = {self.p}
q = {self.q}
g = {self.g}
y = {self.y}

"""
        return r

    def export(self, file_name: str, pwd: bytes = b"\x00", *, enc_func=XOR.repeated_key_xor) -> None:
        data_dict: dict = {"p": self.p, "q": self.q, "g": self.g, "x": self.x, "y": self.y}
        Exportation.export(file_name=file_name, pwd=pwd, data_dict=data_dict, exportation_func=enc_func)

    @staticmethod
    def load(file_name: str, pwd: bytes = b"\x00", *, dec_func=XOR.repeated_key_xor) -> DSAKey:
        return DSAKey(**Exportation.load(file_name=file_name, pwd=pwd, dec_func=dec_func))

    def __eq__(self, other: DSAKey) -> bool:
        if not isinstance(other, DSAKey): return False
        return hashlib.sha256(f"{self}".encode()).hexdigest() == hashlib.sha256(f"{other}".encode()).hexdigest()
