[project]
name = "nxp_codecheck"
description = "Simple set of checking tools for accepting code quality for NXP python projects"
dynamic = ["dependencies", "version"]

requires-python = ">=3.9"
keywords = ["spsdk_plugins", "codecheck", "nxp"]
authors = [{ name = "NXP" }]
maintainers = [{ name = "NXP", email = "michal.starecek@nxp.com" }]
readme = { file = "README.md", content-type = "text/markdown" }
license = { text = "BSD-3-Clause" }

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]


[project.entry-points."console_scripts"]
codecheck = "codecheck.main:main"
copyright = "codecheck.checker_copyright_year:main"
cyclic_import = "codecheck.checker_cyclic_import:main"
dependencies = "codecheck.checker_dependencies:main"
jupyter = "codecheck.checker_jupiter:main"
py_headers = "codecheck.checker_py_headers:main"
gitcov = "codecheck.gitcov:main"

[project.urls]
Homepage = "https://github.com/nxp-mcuxpresso/spsdk_plugins/tree/master/codecheck"
Issues = "https://github.com/nxp-mcuxpresso/spsdk_plugins/issues"


[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["codecheck"]

[tool.setuptools.dynamic]
version = { attr = "codecheck.__version__" }
dependencies = { file = ["requirements.txt"] }

[tool.bumpversion]
current_version = "0.1.16"

[[tool.bumpversion.files]]
filename = "codecheck/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "SW_Content_Register_codecheck.txt"
search = "{current_version}"
replace = "{new_version}"


[tool.pytest.ini_options]
testpaths = ["tests"]
junit_family = "xunit1"

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "safe_main()", "sys.exit(main())"]

[tool.coverage.run]
relative_files = true

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true

[tool.pydocstyle]
convention = "google"
add_ignore = "D105,D301"
match = '(?!test_|__version__).*\.py'

[tool.pylint]
format = { max-line-length = 120 }
"messages control" = { disable = ["logging-fstring-interpolation", "R0801"] }

[tool.bandit]
skips = ["B603"]

[tool.py_headers]
excluded_files = []

[tool.copyright]
excluded_files = [".pre-commit-config.yaml", ".readthedocs.yml"]

[tool.gitcov]
skip-files = ""
repo-path = "."
module = "codecheck"
coverage-report = "reports/coverage.xml"
coverage-cutoff = 0.8
parent-branch = "origin/master"
include-merges = 0
verbose = 0
debug = 0
full-file-test = 0

[tool.checker_dependencies.spdx]
"Apache-2.0" = [
    "Apache 2.0",
    "Apache-2.0 License",
    "Apache Software License 2.0",
    "Apache License, Version 2.0",
    "Apache License 2.0",
    "Apache Software License",
	"Apache-2.0 license",
]
"BSD-2-Clause" = ["BSD", "BSD 2-Clause License"]
"BSD-3-Clause" = [
    "BSD",
    "BSD License",
    "BSD 3-Clause",
    "BSD (3 clause)",
    "BSD 3-Clause License",
    "Modified BSD License",
]
"MIT" = ["MIT License", "MIT license"]
"MPL-2.0" = ["MPL 2.0", "Mozilla Public License 2.0 (MPL 2.0)"]
"NLPL" = ["Public domain", "Public Domain"]
"PSF-2.0" = ["PSF", "PSFL", "Python Software Foundation License"]
"GPL-2.0-or-later" = []
"LGPL-2.0-only" = ["LGPL-2.0"]
"LGPL-2.1-or-later" = []
"LGPL-3.0-only" = ["LGPL-3.0"]
"ISC" = ["ISC license"]

[tool.nxp_codecheck]
git_parent_branch = "origin/master"
output_directory = "reports"
default_check_paths = ["codecheck"]
checkers = [
    "pytest",
    { "gitcov" = { info_only = true } },
    "pylint",
    "mypy",
    "dependencies",
    "pydocstyle",
    { "radon_c" = { info_only = true } },
    "radon_d",
    "black",
    "isort",
    "copyright",
    "py_headers",
    # "cyclic",
    { "bandit" = { info_only = true } },
    "black_nb",
    "isort_nb",
    "jupyter",
]
