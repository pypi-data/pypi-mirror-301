# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictFloat, StrictInt, StrictStr, conlist

from typing import Any, Dict, List, Optional, Union

from scicat-sdk-pydantic.models.create_published_data_dto import CreatePublishedDataDto
from scicat-sdk-pydantic.models.partial_update_published_data_dto import PartialUpdatePublishedDataDto
from scicat-sdk-pydantic.models.published_data import PublishedData
from scicat-sdk-pydantic.models.update_published_data_dto import UpdatePublishedDataDto

from scicat-sdk-pydantic.api_client import ApiClient
from scicat-sdk-pydantic.api_response import ApiResponse
from scicat-sdk-pydantic.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PublishedDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def published_data_controller_count(self, filter : Annotated[Optional[Any], Field(description="Database filters to apply when retrieve published data count")] = None, **kwargs) -> object:  # noqa: E501
        """published_data_controller_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_count(filter, async_req=True)
        >>> result = thread.get()

        :param filter: Database filters to apply when retrieve published data count
        :type filter: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_count_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_count_with_http_info(filter, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_count_with_http_info(self, filter : Annotated[Optional[Any], Field(description="Database filters to apply when retrieve published data count")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_count_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param filter: Database filters to apply when retrieve published data count
        :type filter: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_count" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata/count', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_create(self, create_published_data_dto : CreatePublishedDataDto, **kwargs) -> PublishedData:  # noqa: E501
        """published_data_controller_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_create(create_published_data_dto, async_req=True)
        >>> result = thread.get()

        :param create_published_data_dto: (required)
        :type create_published_data_dto: CreatePublishedDataDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PublishedData
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_create_with_http_info(create_published_data_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_create_with_http_info(self, create_published_data_dto : CreatePublishedDataDto, **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_create_with_http_info(create_published_data_dto, async_req=True)
        >>> result = thread.get()

        :param create_published_data_dto: (required)
        :type create_published_data_dto: CreatePublishedDataDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PublishedData, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_published_data_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_published_data_dto'] is not None:
            _body_params = _params['create_published_data_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '201': "PublishedData",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_find_all(self, fields : StrictStr, filter : Annotated[Optional[StrictStr], Field(description="Database filters to apply when retrieve all published data")] = None, limits : Annotated[Optional[StrictStr], Field(description="Database limits to apply when retrieve all published data")] = None, **kwargs) -> List[PublishedData]:  # noqa: E501
        """published_data_controller_find_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_find_all(fields, filter, limits, async_req=True)
        >>> result = thread.get()

        :param fields: (required)
        :type fields: str
        :param filter: Database filters to apply when retrieve all published data
        :type filter: str
        :param limits: Database limits to apply when retrieve all published data
        :type limits: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PublishedData]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_find_all_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_find_all_with_http_info(fields, filter, limits, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_find_all_with_http_info(self, fields : StrictStr, filter : Annotated[Optional[StrictStr], Field(description="Database filters to apply when retrieve all published data")] = None, limits : Annotated[Optional[StrictStr], Field(description="Database limits to apply when retrieve all published data")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_find_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_find_all_with_http_info(fields, filter, limits, async_req=True)
        >>> result = thread.get()

        :param fields: (required)
        :type fields: str
        :param filter: Database filters to apply when retrieve all published data
        :type filter: str
        :param limits: Database limits to apply when retrieve all published data
        :type limits: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PublishedData], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'fields',
            'filter',
            'limits'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_find_all" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('limits') is not None:  # noqa: E501
            _query_params.append(('limits', _params['limits']))

        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[PublishedData]",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_find_one(self, id : Annotated[StrictStr, Field(..., description="Id of the published data to return")], **kwargs) -> PublishedData:  # noqa: E501
        """It returns the published data requested.  # noqa: E501

        It returns the published data requested through the id specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_find_one(id, async_req=True)
        >>> result = thread.get()

        :param id: Id of the published data to return (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PublishedData
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_find_one_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_find_one_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_find_one_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Id of the published data to return")], **kwargs) -> ApiResponse:  # noqa: E501
        """It returns the published data requested.  # noqa: E501

        It returns the published data requested through the id specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_find_one_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: Id of the published data to return (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PublishedData, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_find_one" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '200': "PublishedData",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_form_populate(self, pid : Annotated[StrictStr, Field(..., description="Dataset pid used to fetch form data.")], **kwargs) -> object:  # noqa: E501
        """published_data_controller_form_populate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_form_populate(pid, async_req=True)
        >>> result = thread.get()

        :param pid: Dataset pid used to fetch form data. (required)
        :type pid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_form_populate_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_form_populate_with_http_info(pid, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_form_populate_with_http_info(self, pid : Annotated[StrictStr, Field(..., description="Dataset pid used to fetch form data.")], **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_form_populate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_form_populate_with_http_info(pid, async_req=True)
        >>> result = thread.get()

        :param pid: Dataset pid used to fetch form data. (required)
        :type pid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_form_populate" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('pid') is not None:  # noqa: E501
            _query_params.append(('pid', _params['pid']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata/formpopulate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_register(self, id : StrictStr, **kwargs) -> object:  # noqa: E501
        """published_data_controller_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_register(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_register_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_register_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_register_with_http_info(self, id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_register_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_register" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '201': "object",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata/{id}/register', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_remove(self, id : StrictStr, **kwargs) -> object:  # noqa: E501
        """published_data_controller_remove  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_remove(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_remove_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_remove_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_remove_with_http_info(self, id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_remove  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_remove" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_resync(self, id : Annotated[StrictStr, Field(..., description="The DOI of the published data.")], creator : conlist(StrictStr), publisher : StrictStr, publication_year : Union[StrictFloat, StrictInt], title : StrictStr, abstract : StrictStr, data_description : StrictStr, resource_type : StrictStr, pid_array : conlist(StrictStr), update_published_data_dto : UpdatePublishedDataDto, doi : Optional[StrictStr] = None, affiliation : Optional[StrictStr] = None, url : Optional[StrictStr] = None, number_of_files : Optional[Union[StrictFloat, StrictInt]] = None, size_of_archive : Optional[Union[StrictFloat, StrictInt]] = None, authors : Optional[conlist(StrictStr)] = None, registered_time : Optional[datetime] = None, status : Optional[StrictStr] = None, scicat_user : Optional[StrictStr] = None, thumbnail : Optional[StrictStr] = None, related_publications : Optional[conlist(StrictStr)] = None, download_link : Optional[StrictStr] = None, **kwargs) -> None:  # noqa: E501
        """Edits published data.  # noqa: E501

        It edits published data and resyncs with OAI Provider if it is defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_resync(id, creator, publisher, publication_year, title, abstract, data_description, resource_type, pid_array, update_published_data_dto, doi, affiliation, url, number_of_files, size_of_archive, authors, registered_time, status, scicat_user, thumbnail, related_publications, download_link, async_req=True)
        >>> result = thread.get()

        :param id: The DOI of the published data. (required)
        :type id: str
        :param creator: (required)
        :type creator: List[str]
        :param publisher: (required)
        :type publisher: str
        :param publication_year: (required)
        :type publication_year: float
        :param title: (required)
        :type title: str
        :param abstract: (required)
        :type abstract: str
        :param data_description: (required)
        :type data_description: str
        :param resource_type: (required)
        :type resource_type: str
        :param pid_array: (required)
        :type pid_array: List[str]
        :param update_published_data_dto: (required)
        :type update_published_data_dto: UpdatePublishedDataDto
        :param doi:
        :type doi: str
        :param affiliation:
        :type affiliation: str
        :param url:
        :type url: str
        :param number_of_files:
        :type number_of_files: float
        :param size_of_archive:
        :type size_of_archive: float
        :param authors:
        :type authors: List[str]
        :param registered_time:
        :type registered_time: datetime
        :param status:
        :type status: str
        :param scicat_user:
        :type scicat_user: str
        :param thumbnail:
        :type thumbnail: str
        :param related_publications:
        :type related_publications: List[str]
        :param download_link:
        :type download_link: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_resync_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_resync_with_http_info(id, creator, publisher, publication_year, title, abstract, data_description, resource_type, pid_array, update_published_data_dto, doi, affiliation, url, number_of_files, size_of_archive, authors, registered_time, status, scicat_user, thumbnail, related_publications, download_link, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_resync_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The DOI of the published data.")], creator : conlist(StrictStr), publisher : StrictStr, publication_year : Union[StrictFloat, StrictInt], title : StrictStr, abstract : StrictStr, data_description : StrictStr, resource_type : StrictStr, pid_array : conlist(StrictStr), update_published_data_dto : UpdatePublishedDataDto, doi : Optional[StrictStr] = None, affiliation : Optional[StrictStr] = None, url : Optional[StrictStr] = None, number_of_files : Optional[Union[StrictFloat, StrictInt]] = None, size_of_archive : Optional[Union[StrictFloat, StrictInt]] = None, authors : Optional[conlist(StrictStr)] = None, registered_time : Optional[datetime] = None, status : Optional[StrictStr] = None, scicat_user : Optional[StrictStr] = None, thumbnail : Optional[StrictStr] = None, related_publications : Optional[conlist(StrictStr)] = None, download_link : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Edits published data.  # noqa: E501

        It edits published data and resyncs with OAI Provider if it is defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_resync_with_http_info(id, creator, publisher, publication_year, title, abstract, data_description, resource_type, pid_array, update_published_data_dto, doi, affiliation, url, number_of_files, size_of_archive, authors, registered_time, status, scicat_user, thumbnail, related_publications, download_link, async_req=True)
        >>> result = thread.get()

        :param id: The DOI of the published data. (required)
        :type id: str
        :param creator: (required)
        :type creator: List[str]
        :param publisher: (required)
        :type publisher: str
        :param publication_year: (required)
        :type publication_year: float
        :param title: (required)
        :type title: str
        :param abstract: (required)
        :type abstract: str
        :param data_description: (required)
        :type data_description: str
        :param resource_type: (required)
        :type resource_type: str
        :param pid_array: (required)
        :type pid_array: List[str]
        :param update_published_data_dto: (required)
        :type update_published_data_dto: UpdatePublishedDataDto
        :param doi:
        :type doi: str
        :param affiliation:
        :type affiliation: str
        :param url:
        :type url: str
        :param number_of_files:
        :type number_of_files: float
        :param size_of_archive:
        :type size_of_archive: float
        :param authors:
        :type authors: List[str]
        :param registered_time:
        :type registered_time: datetime
        :param status:
        :type status: str
        :param scicat_user:
        :type scicat_user: str
        :param thumbnail:
        :type thumbnail: str
        :param related_publications:
        :type related_publications: List[str]
        :param download_link:
        :type download_link: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'creator',
            'publisher',
            'publication_year',
            'title',
            'abstract',
            'data_description',
            'resource_type',
            'pid_array',
            'update_published_data_dto',
            'doi',
            'affiliation',
            'url',
            'number_of_files',
            'size_of_archive',
            'authors',
            'registered_time',
            'status',
            'scicat_user',
            'thumbnail',
            'related_publications',
            'download_link'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_resync" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('doi') is not None:  # noqa: E501
            _query_params.append(('doi', _params['doi']))

        if _params.get('affiliation') is not None:  # noqa: E501
            _query_params.append(('affiliation', _params['affiliation']))

        if _params.get('creator') is not None:  # noqa: E501
            _query_params.append(('creator', _params['creator']))
            _collection_formats['creator'] = 'multi'

        if _params.get('publisher') is not None:  # noqa: E501
            _query_params.append(('publisher', _params['publisher']))

        if _params.get('publication_year') is not None:  # noqa: E501
            _query_params.append(('publicationYear', _params['publication_year']))

        if _params.get('title') is not None:  # noqa: E501
            _query_params.append(('title', _params['title']))

        if _params.get('url') is not None:  # noqa: E501
            _query_params.append(('url', _params['url']))

        if _params.get('abstract') is not None:  # noqa: E501
            _query_params.append(('abstract', _params['abstract']))

        if _params.get('data_description') is not None:  # noqa: E501
            _query_params.append(('dataDescription', _params['data_description']))

        if _params.get('resource_type') is not None:  # noqa: E501
            _query_params.append(('resourceType', _params['resource_type']))

        if _params.get('number_of_files') is not None:  # noqa: E501
            _query_params.append(('numberOfFiles', _params['number_of_files']))

        if _params.get('size_of_archive') is not None:  # noqa: E501
            _query_params.append(('sizeOfArchive', _params['size_of_archive']))

        if _params.get('pid_array') is not None:  # noqa: E501
            _query_params.append(('pidArray', _params['pid_array']))
            _collection_formats['pidArray'] = 'multi'

        if _params.get('authors') is not None:  # noqa: E501
            _query_params.append(('authors', _params['authors']))
            _collection_formats['authors'] = 'multi'

        if _params.get('registered_time') is not None:  # noqa: E501
            if isinstance(_params['registered_time'], datetime):
                _query_params.append(('registeredTime', _params['registered_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('registeredTime', _params['registered_time']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('scicat_user') is not None:  # noqa: E501
            _query_params.append(('scicatUser', _params['scicat_user']))

        if _params.get('thumbnail') is not None:  # noqa: E501
            _query_params.append(('thumbnail', _params['thumbnail']))

        if _params.get('related_publications') is not None:  # noqa: E501
            _query_params.append(('relatedPublications', _params['related_publications']))
            _collection_formats['relatedPublications'] = 'multi'

        if _params.get('download_link') is not None:  # noqa: E501
            _query_params.append(('downloadLink', _params['download_link']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_published_data_dto'] is not None:
            _body_params = _params['update_published_data_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/v3/publisheddata/{id}/resync', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def published_data_controller_update(self, id : StrictStr, partial_update_published_data_dto : PartialUpdatePublishedDataDto, **kwargs) -> object:  # noqa: E501
        """published_data_controller_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_update(id, partial_update_published_data_dto, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param partial_update_published_data_dto: (required)
        :type partial_update_published_data_dto: PartialUpdatePublishedDataDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the published_data_controller_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.published_data_controller_update_with_http_info(id, partial_update_published_data_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def published_data_controller_update_with_http_info(self, id : StrictStr, partial_update_published_data_dto : PartialUpdatePublishedDataDto, **kwargs) -> ApiResponse:  # noqa: E501
        """published_data_controller_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.published_data_controller_update_with_http_info(id, partial_update_published_data_dto, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param partial_update_published_data_dto: (required)
        :type partial_update_published_data_dto: PartialUpdatePublishedDataDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'partial_update_published_data_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method published_data_controller_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['partial_update_published_data_dto'] is not None:
            _body_params = _params['partial_update_published_data_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/v3/publisheddata/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
