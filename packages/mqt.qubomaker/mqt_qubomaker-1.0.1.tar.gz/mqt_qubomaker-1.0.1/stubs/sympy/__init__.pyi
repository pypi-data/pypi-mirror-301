from typing import Any

import typing_extensions

from . import core  # noqa: F401

AnyExpression: typing_extensions.TypeAlias = Basic | float | object

class Basic:
    def __mul__(self, other: AnyExpression) -> Expr: ...
    def __add__(self, other: AnyExpression) -> Expr: ...
    def __radd__(self, other: AnyExpression) -> Expr: ...
    def __rmul__(self, other: AnyExpression) -> Expr: ...
    def __sub__(self, other: AnyExpression) -> Expr: ...
    def __rsub__(self, other: AnyExpression) -> Expr: ...
    def __truediv__(self, other: AnyExpression) -> Expr: ...
    def __rtruediv__(self, other: AnyExpression) -> Expr: ...
    def __pow__(self, other: AnyExpression) -> Expr: ...
    def __rpow__(self, other: AnyExpression) -> Expr: ...
    def subs(self, substitution: dict[Expr, Any] | Expr, replacement: AnyExpression = None) -> Expr: ...
    def __int__(self) -> int: ...
    def _latex(self, printer: StrPrinter, *args: Any, **kwargs: Any) -> str: ...  # noqa: ANN401

class Expr(Basic):
    args: tuple[Expr, ...] | Any
    def expand(self) -> Expr: ...
    def as_coefficients_dict(self) -> dict[Any, int]: ...
    def doit(self, **hints: AnyExpression) -> Expr: ...
    def evalf(self) -> float: ...
    def __init__(self, *args: AnyExpression) -> None: ...

class Mul(Expr): ...
class Sum(Expr): ...
class Pow(Expr): ...
class Product(Expr): ...

class Integer(Expr):
    def __init__(self, value: int) -> None: ...

class Symbol(Expr):
    def __init__(self, name: str) -> None: ...

class Function(Expr): ...

class StrPrinter:
    def doprint(self, expr: Expr) -> str: ...
