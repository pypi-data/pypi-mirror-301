[project]
name = "nudebomb"
requires-python = ">=3.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "nudebomb"
version = "0.3.8"
description = "Strip unused languages from mkv files en mass"
authors = ["AJ Slater <aj@slater.net>"]
license = "GPL-3.0-only"
readme = "README.md"
homepage = "https://github.com/ajslater/nudebomb"
documentation = "https://github.com/ajslater/nudebomb"
keywords = ["mkv", "movie", "video", "srt", "audio", "subtitles"]
classifiers = [
  "Environment :: Console",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Multimedia :: Video :: Conversion",
]
packages = [{ include = "nudebomb" }, { include = "tests", format = "sdist" }]
include = ["NEWS.md"]

[tool.poetry.dependencies]
python = "^3.10"
confuse = "^2.0.0"
pycountry = "^24.6.1"
python-dateutil = "^2.8.2"
"ruamel.yaml" = "^0.18.4"
treestamps = "^1.0.1"
termcolor = "^2.3.0"

[tool.poetry.group.dev.dependencies]
codespell = "^2.1.0"
coverage = { extras = ["toml"], version = "^7.0" }
neovim = "^0.3.1"
pyright = "^1.1.237"
pytest-cov = "^5.0.0"
pytest-gitignore = "^1.3"
radon = { version = "^6.0.1", extras = ["toml"] }
ruff = "^0.6.9"
types-python-dateutil = "^2.8.0"
vulture = "^2.1"

[tool.poetry.scripts]
nudebomb = "nudebomb.cli:main"

[tool.poetry.urls]
"Source" = "https://github.com/ajslater/nudebomb"
"Issues" = "https://github.com/ajslater/nudebomb/issues"

[tool.codespell]
skip = ".git,.mypy_cache,.pytest_cache,.ruff_cache,.venv,*~,./dist,./node_modules,./package-lock.json,./poetry.lock,./test-results"
builtin = "clear,rare,code"
check-hidden = true
ignore-words-list = "thead"

[tool.coverage.run]
source = ["nudebomb"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".ruff_cache/*",
  ".venv/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.pytest.ini_options]
addopts = """
  --junitxml=test-results/pytest/junit.xml
  -ra
  --strict-markers
  --cov
  --cov-append
  --cov-report=html
  --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
  "vulture_whitelist.py",
]
pythonVersion = "3.10"
pythonPlatform = "All"
reportImportCycles = true
reportMisingImports = true
useLibraryCodeForTypes = true

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.ruff_cache/*,.venv/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["cache", "typings"]
target-version = "py310"
[tool.ruff.lint]
extend-ignore = [
  "S101",
  "D203",
  "D213",
  # Format ignores
  "W191",
  "E501",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "N",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
  # "ANN", "ERA", "COM"
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "*__pycache__*",
  "node_modules",
]
min_confidence = 61
sort_by_size = true
