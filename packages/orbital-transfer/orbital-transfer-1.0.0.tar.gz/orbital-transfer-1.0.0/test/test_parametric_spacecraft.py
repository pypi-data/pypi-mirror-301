# coding: utf-8

"""
    Orbital transfer API

    Orbital transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from orbital_transfer.models.parametric_spacecraft import ParametricSpacecraft

class TestParametricSpacecraft(unittest.TestCase):
    """ParametricSpacecraft unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ParametricSpacecraft:
        """Test ParametricSpacecraft
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ParametricSpacecraft`
        """
        model = ParametricSpacecraft()
        if include_optional:
            return ParametricSpacecraft(
                platform_mass = 1.337,
                orbital_average_power = 1.337,
                custom_orbital_duty_cycle = True,
                orbital_duty_cycle = 1.337,
                drag_area = 1.337,
                drag_coefficient = 1.337,
                solar_radiation_pressure_center_in_spacecraft_frame_x = 1.337,
                solar_radiation_pressure_center_in_spacecraft_frame_y = 1.337,
                solar_radiation_pressure_center_in_spacecraft_frame_z = 1.337,
                inertia_xx = 1.337,
                inertia_xy = 1.337,
                inertia_xz = 1.337,
                inertia_yy = 1.337,
                inertia_yz = 1.337,
                inertia_zz = 1.337,
                inertia_zx = 1.337,
                inertia_zy = 1.337,
                inertia_yx = 1.337,
                max_angular_rate = 1.337,
                min_angular_rate = 1.337,
                thruster = orbital_transfer.models.parametric_propulsion_system.ParametricPropulsionSystem(
                    total_impulse = 1.337, 
                    position_in_spacecraft_frame_x = 1.337, 
                    position_in_spacecraft_frame_y = 1.337, 
                    position_in_spacecraft_frame_z = 1.337, 
                    direction_in_spacecraft_frame_x = 1.337, 
                    direction_in_spacecraft_frame_y = 1.337, 
                    direction_in_spacecraft_frame_z = 1.337, 
                    thrust = 1.337, 
                    isp = 1.337, 
                    power = 1.337, 
                    propellant_mass = 1.337, 
                    total_mass = 1.337, 
                    standby_power = 1.337, 
                    warm_up_power = 1.337, 
                    warm_up_duration = 1.337, 
                    propellant_capacity_choice = 'PROPELLANT', )
            )
        else:
            return ParametricSpacecraft(
        )
        """

    def testParametricSpacecraft(self):
        """Test ParametricSpacecraft"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
