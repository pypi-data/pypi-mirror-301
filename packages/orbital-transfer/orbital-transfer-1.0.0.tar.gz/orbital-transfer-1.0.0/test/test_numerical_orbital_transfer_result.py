# coding: utf-8

"""
    Orbital transfer API

    Orbital transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from orbital_transfer.models.numerical_orbital_transfer_result import NumericalOrbitalTransferResult

class TestNumericalOrbitalTransferResult(unittest.TestCase):
    """NumericalOrbitalTransferResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalOrbitalTransferResult:
        """Test NumericalOrbitalTransferResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalOrbitalTransferResult`
        """
        model = NumericalOrbitalTransferResult()
        if include_optional:
            return NumericalOrbitalTransferResult(
                delta_inclination = 1.337,
                delta_eccentricity = 1.337,
                delta_semi_major_axis = 1.337,
                total_number_of_burns = 56,
                total_burn_duration = 1.337,
                total_consumption = 1.337,
                total_delta_v = 1.337,
                thruster_duty_cycle = 1.337,
                total_warmup_duty_cycle = 1.337,
                average_thrust_duration = 1.337,
                simulation_duration = 1.337,
                number_of_periods = 1.337,
                total_impulse = 1.337,
                final_duty_cycle = 1.337,
                ephemerides = [
                    [
                        1.337
                        ]
                    ],
                field_indexes = [
                    orbital_transfer.models.numerical_orbital_transfer_result_field_indexes_inner.NumericalOrbitalTransferResult_fieldIndexes_inner(
                        key = '', 
                        index = 56, )
                    ],
                threed_ephemerides = [
                    [
                        1.337
                        ]
                    ],
                threed_field_indexes = [
                    orbital_transfer.models.numerical_orbital_transfer_result_field_indexes_inner.NumericalOrbitalTransferResult_fieldIndexes_inner(
                        key = '', 
                        index = 56, )
                    ],
                osc_bounded_ephemerides = [
                    orbital_transfer.models.bounded_ephemeris.BoundedEphemeris(
                        phase = 'COASTING', 
                        ephemeris = [
                            orbital_transfer.models.spacecraft_state.SpacecraftState(
                                orbit_orekit_parameters = orbital_transfer.models.orbit_orekit_parameters.OrbitOrekitParameters(
                                    type = 'CARTESIAN', 
                                    frame = orbital_transfer.models.frame.Frame(
                                        name = '', 
                                        parent = orbital_transfer.models.frame.Frame(
                                            name = '', 
                                            depth = 56, 
                                            pseudo_inertial = True, ), 
                                        depth = 56, 
                                        pseudo_inertial = True, ), 
                                    date = '', 
                                    mu = 1.337, 
                                    pv_coordinates = orbital_transfer.models.time_stamped_pv_coordinates.TimeStampedPVCoordinates(
                                        date = '', 
                                        position = orbital_transfer.models.vector3_d.Vector3D(
                                            x = 1.337, 
                                            y = 1.337, 
                                            z = 1.337, ), 
                                        velocity = orbital_transfer.models.vector3_d.Vector3D(
                                            x = 1.337, 
                                            y = 1.337, 
                                            z = 1.337, ), 
                                        acceleration = , ), ), 
                                orientation = orbital_transfer.models.angular_coordinates.AngularCoordinates(
                                    date = '', 
                                    rotation = orbital_transfer.models.rotation.Rotation(
                                        q0 = 1.337, 
                                        q1 = 1.337, 
                                        q2 = 1.337, 
                                        q3 = 1.337, ), 
                                    rotation_rate = , 
                                    rotation_acceleration = , ), 
                                additional = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(
                                    data = [
                                        orbital_transfer.models.double_array_dictionary_data_inner.DoubleArrayDictionary_data_inner(
                                            key = '', 
                                            value = [
                                                1.337
                                                ], )
                                        ], ), 
                                additional_dot = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(), 
                                mass = 1.337, )
                            ], 
                        orbital_elements_type = 'MEAN', )
                    ],
                mean_bounded_ephemerides = [
                    orbital_transfer.models.bounded_ephemeris.BoundedEphemeris(
                        phase = 'COASTING', 
                        ephemeris = [
                            orbital_transfer.models.spacecraft_state.SpacecraftState(
                                orbit_orekit_parameters = orbital_transfer.models.orbit_orekit_parameters.OrbitOrekitParameters(
                                    type = 'CARTESIAN', 
                                    frame = orbital_transfer.models.frame.Frame(
                                        name = '', 
                                        parent = orbital_transfer.models.frame.Frame(
                                            name = '', 
                                            depth = 56, 
                                            pseudo_inertial = True, ), 
                                        depth = 56, 
                                        pseudo_inertial = True, ), 
                                    date = '', 
                                    mu = 1.337, 
                                    pv_coordinates = orbital_transfer.models.time_stamped_pv_coordinates.TimeStampedPVCoordinates(
                                        date = '', 
                                        position = orbital_transfer.models.vector3_d.Vector3D(
                                            x = 1.337, 
                                            y = 1.337, 
                                            z = 1.337, ), 
                                        velocity = orbital_transfer.models.vector3_d.Vector3D(
                                            x = 1.337, 
                                            y = 1.337, 
                                            z = 1.337, ), 
                                        acceleration = , ), ), 
                                orientation = orbital_transfer.models.angular_coordinates.AngularCoordinates(
                                    date = '', 
                                    rotation = orbital_transfer.models.rotation.Rotation(
                                        q0 = 1.337, 
                                        q1 = 1.337, 
                                        q2 = 1.337, 
                                        q3 = 1.337, ), 
                                    rotation_rate = , 
                                    rotation_acceleration = , ), 
                                additional = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(
                                    data = [
                                        orbital_transfer.models.double_array_dictionary_data_inner.DoubleArrayDictionary_data_inner(
                                            key = '', 
                                            value = [
                                                1.337
                                                ], )
                                        ], ), 
                                additional_dot = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(), 
                                mass = 1.337, )
                            ], 
                        orbital_elements_type = 'MEAN', )
                    ],
                osc_ephemerides_for_thrust = [
                    orbital_transfer.models.spacecraft_state.SpacecraftState(
                        orbit_orekit_parameters = orbital_transfer.models.orbit_orekit_parameters.OrbitOrekitParameters(
                            type = 'CARTESIAN', 
                            frame = orbital_transfer.models.frame.Frame(
                                name = '', 
                                parent = orbital_transfer.models.frame.Frame(
                                    name = '', 
                                    depth = 56, 
                                    pseudo_inertial = True, ), 
                                depth = 56, 
                                pseudo_inertial = True, ), 
                            date = '', 
                            mu = 1.337, 
                            pv_coordinates = orbital_transfer.models.time_stamped_pv_coordinates.TimeStampedPVCoordinates(
                                date = '', 
                                position = orbital_transfer.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), 
                                velocity = orbital_transfer.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), 
                                acceleration = , ), ), 
                        orientation = orbital_transfer.models.angular_coordinates.AngularCoordinates(
                            date = '', 
                            rotation = orbital_transfer.models.rotation.Rotation(
                                q0 = 1.337, 
                                q1 = 1.337, 
                                q2 = 1.337, 
                                q3 = 1.337, ), 
                            rotation_rate = , 
                            rotation_acceleration = , ), 
                        additional = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(
                            data = [
                                orbital_transfer.models.double_array_dictionary_data_inner.DoubleArrayDictionary_data_inner(
                                    key = '', 
                                    value = [
                                        1.337
                                        ], )
                                ], ), 
                        additional_dot = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(), 
                        mass = 1.337, )
                    ],
                ephemerides_frame = '',
                maneuver_model = '',
                final_orbit = orbital_transfer.models.orbit.Orbit(
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = orbital_transfer.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = orbital_transfer.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                errors = [
                    ''
                    ],
                warnings = [
                    ''
                    ],
                computation_date = ''
            )
        else:
            return NumericalOrbitalTransferResult(
        )
        """

    def testNumericalOrbitalTransferResult(self):
        """Test NumericalOrbitalTransferResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
