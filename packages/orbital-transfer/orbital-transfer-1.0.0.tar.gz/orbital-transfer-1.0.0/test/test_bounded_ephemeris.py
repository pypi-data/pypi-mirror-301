# coding: utf-8

"""
    Orbital transfer API

    Orbital transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from orbital_transfer.models.bounded_ephemeris import BoundedEphemeris

class TestBoundedEphemeris(unittest.TestCase):
    """BoundedEphemeris unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BoundedEphemeris:
        """Test BoundedEphemeris
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BoundedEphemeris`
        """
        model = BoundedEphemeris()
        if include_optional:
            return BoundedEphemeris(
                phase = 'COASTING',
                ephemeris = [
                    orbital_transfer.models.spacecraft_state.SpacecraftState(
                        orbit_orekit_parameters = orbital_transfer.models.orbit_orekit_parameters.OrbitOrekitParameters(
                            type = 'CARTESIAN', 
                            frame = orbital_transfer.models.frame.Frame(
                                name = '', 
                                parent = orbital_transfer.models.frame.Frame(
                                    name = '', 
                                    depth = 56, 
                                    pseudo_inertial = True, ), 
                                depth = 56, 
                                pseudo_inertial = True, ), 
                            date = '', 
                            mu = 1.337, 
                            pv_coordinates = orbital_transfer.models.time_stamped_pv_coordinates.TimeStampedPVCoordinates(
                                date = '', 
                                position = orbital_transfer.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), 
                                velocity = orbital_transfer.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), 
                                acceleration = , ), ), 
                        orientation = orbital_transfer.models.angular_coordinates.AngularCoordinates(
                            date = '', 
                            rotation = orbital_transfer.models.rotation.Rotation(
                                q0 = 1.337, 
                                q1 = 1.337, 
                                q2 = 1.337, 
                                q3 = 1.337, ), 
                            rotation_rate = , 
                            rotation_acceleration = , ), 
                        additional = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(
                            data = [
                                orbital_transfer.models.double_array_dictionary_data_inner.DoubleArrayDictionary_data_inner(
                                    key = '', 
                                    value = [
                                        1.337
                                        ], )
                                ], ), 
                        additional_dot = orbital_transfer.models.double_array_dictionary.DoubleArrayDictionary(), 
                        mass = 1.337, )
                    ],
                orbital_elements_type = 'MEAN'
            )
        else:
            return BoundedEphemeris(
        )
        """

    def testBoundedEphemeris(self):
        """Test BoundedEphemeris"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
