# coding: utf-8

"""
    Orbital transfer API

    Orbital transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from orbital_transfer.models.spacecraft_geometry import SpacecraftGeometry

class TestSpacecraftGeometry(unittest.TestCase):
    """SpacecraftGeometry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpacecraftGeometry:
        """Test SpacecraftGeometry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpacecraftGeometry`
        """
        model = SpacecraftGeometry()
        if include_optional:
            return SpacecraftGeometry(
                x = 1.337,
                y = 1.337,
                z = 1.337,
                inertial_center_in_spacecraft_frame_x = 1.337,
                inertial_center_in_spacecraft_frame_y = 1.337,
                inertial_center_in_spacecraft_frame_z = 1.337,
                inertia_xx = 1.337,
                inertia_xy = 1.337,
                inertia_xz = 1.337,
                inertia_yy = 1.337,
                inertia_yz = 1.337,
                inertia_zz = 1.337,
                inertia_zy = 1.337,
                inertia_zx = 1.337,
                inertia_yx = 1.337,
                thruster_axis_in_satellite_frame_x = 1.337,
                thruster_axis_in_satellite_frame_y = 1.337,
                thruster_axis_in_satellite_frame_z = 1.337,
                body_solar_array_faces = [
                    'PLUS_X'
                    ],
                solar_array_efficiency = 1.337,
                solar_array_maximum_power = 1.337,
                solar_array_surface = 1.337,
                solar_array_axis_in_satellite_frame_x = 1.337,
                solar_array_axis_in_satellite_frame_y = 1.337,
                solar_array_axis_in_satellite_frame_z = 1.337,
                solar_array_normal_in_satellite_frame_x = 1.337,
                solar_array_normal_in_satellite_frame_y = 1.337,
                solar_array_normal_in_satellite_frame_z = 1.337,
                payload_pointing_axis_in_satellite_frame_x = 1.337,
                payload_pointing_axis_in_satellite_frame_y = 1.337,
                payload_pointing_axis_in_satellite_frame_z = 1.337,
                antenna_pointing_axis_in_satellite_frame_x = 1.337,
                antenna_pointing_axis_in_satellite_frame_y = 1.337,
                antenna_pointing_axis_in_satellite_frame_z = 1.337,
                spherical_cross_section = 1.337,
                solar_array_definition_type = 'MAXIMUM_POWER',
                solar_array_type = 'BODY',
                type = 'SPHERE'
            )
        else:
            return SpacecraftGeometry(
        )
        """

    def testSpacecraftGeometry(self):
        """Test SpacecraftGeometry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
