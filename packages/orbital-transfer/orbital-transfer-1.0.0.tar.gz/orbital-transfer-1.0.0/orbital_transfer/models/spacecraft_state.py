# coding: utf-8

"""
    Orbital transfer API

    Orbital transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from orbital_transfer.models.angular_coordinates import AngularCoordinates
from orbital_transfer.models.double_array_dictionary import DoubleArrayDictionary
from orbital_transfer.models.orbit_orekit_parameters import OrbitOrekitParameters
from typing import Optional, Set
from typing_extensions import Self

class SpacecraftState(BaseModel):
    """
    SpacecraftState
    """ # noqa: E501
    orbit_orekit_parameters: Optional[OrbitOrekitParameters] = Field(default=None, alias="orbitOrekitParameters")
    orientation: Optional[AngularCoordinates] = None
    additional: Optional[DoubleArrayDictionary] = None
    additional_dot: Optional[DoubleArrayDictionary] = Field(default=None, alias="additionalDot")
    mass: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["orbitOrekitParameters", "orientation", "additional", "additionalDot", "mass"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpacecraftState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of orbit_orekit_parameters
        if self.orbit_orekit_parameters:
            _dict['orbitOrekitParameters'] = self.orbit_orekit_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orientation
        if self.orientation:
            _dict['orientation'] = self.orientation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional
        if self.additional:
            _dict['additional'] = self.additional.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_dot
        if self.additional_dot:
            _dict['additionalDot'] = self.additional_dot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpacecraftState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orbitOrekitParameters": OrbitOrekitParameters.from_dict(obj["orbitOrekitParameters"]) if obj.get("orbitOrekitParameters") is not None else None,
            "orientation": AngularCoordinates.from_dict(obj["orientation"]) if obj.get("orientation") is not None else None,
            "additional": DoubleArrayDictionary.from_dict(obj["additional"]) if obj.get("additional") is not None else None,
            "additionalDot": DoubleArrayDictionary.from_dict(obj["additionalDot"]) if obj.get("additionalDot") is not None else None,
            "mass": obj.get("mass")
        })
        return _obj


