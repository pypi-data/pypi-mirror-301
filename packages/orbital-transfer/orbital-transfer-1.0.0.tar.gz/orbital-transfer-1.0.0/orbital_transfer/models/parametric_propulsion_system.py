# coding: utf-8

"""
    Orbital transfer API

    Orbital transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ParametricPropulsionSystem(BaseModel):
    """
    ParametricPropulsionSystem
    """ # noqa: E501
    total_impulse: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalImpulse")
    position_in_spacecraft_frame_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="positionInSpacecraftFrameX")
    position_in_spacecraft_frame_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="positionInSpacecraftFrameY")
    position_in_spacecraft_frame_z: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="positionInSpacecraftFrameZ")
    direction_in_spacecraft_frame_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directionInSpacecraftFrameX")
    direction_in_spacecraft_frame_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directionInSpacecraftFrameY")
    direction_in_spacecraft_frame_z: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directionInSpacecraftFrameZ")
    thrust: Optional[Union[StrictFloat, StrictInt]] = None
    isp: Optional[Union[StrictFloat, StrictInt]] = None
    power: Optional[Union[StrictFloat, StrictInt]] = None
    propellant_mass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="propellantMass")
    total_mass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalMass")
    standby_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="standbyPower")
    warm_up_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="warmUpPower")
    warm_up_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="warmUpDuration")
    propellant_capacity_choice: Optional[StrictStr] = Field(default=None, alias="propellantCapacityChoice")
    __properties: ClassVar[List[str]] = ["totalImpulse", "positionInSpacecraftFrameX", "positionInSpacecraftFrameY", "positionInSpacecraftFrameZ", "directionInSpacecraftFrameX", "directionInSpacecraftFrameY", "directionInSpacecraftFrameZ", "thrust", "isp", "power", "propellantMass", "totalMass", "standbyPower", "warmUpPower", "warmUpDuration", "propellantCapacityChoice"]

    @field_validator('propellant_capacity_choice')
    def propellant_capacity_choice_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROPELLANT', 'TOTAL_IMPULSE', 'UNLIMITED']):
            raise ValueError("must be one of enum values ('PROPELLANT', 'TOTAL_IMPULSE', 'UNLIMITED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParametricPropulsionSystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParametricPropulsionSystem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalImpulse": obj.get("totalImpulse"),
            "positionInSpacecraftFrameX": obj.get("positionInSpacecraftFrameX"),
            "positionInSpacecraftFrameY": obj.get("positionInSpacecraftFrameY"),
            "positionInSpacecraftFrameZ": obj.get("positionInSpacecraftFrameZ"),
            "directionInSpacecraftFrameX": obj.get("directionInSpacecraftFrameX"),
            "directionInSpacecraftFrameY": obj.get("directionInSpacecraftFrameY"),
            "directionInSpacecraftFrameZ": obj.get("directionInSpacecraftFrameZ"),
            "thrust": obj.get("thrust"),
            "isp": obj.get("isp"),
            "power": obj.get("power"),
            "propellantMass": obj.get("propellantMass"),
            "totalMass": obj.get("totalMass"),
            "standbyPower": obj.get("standbyPower"),
            "warmUpPower": obj.get("warmUpPower"),
            "warmUpDuration": obj.get("warmUpDuration"),
            "propellantCapacityChoice": obj.get("propellantCapacityChoice")
        })
        return _obj


