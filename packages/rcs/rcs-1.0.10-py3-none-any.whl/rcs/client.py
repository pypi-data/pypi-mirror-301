# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import PinnacleEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .types.phone_number import PhoneNumber
from .core.request_options import RequestOptions
from .types.check_rcs_capability_response import CheckRcsCapabilityResponse
from .core.pydantic_utilities import parse_obj_as
from .errors.bad_request_error import BadRequestError
from .errors.unauthorized_error import UnauthorizedError
from .errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from .core.api_error import ApiError
from .types.update_settings_response import UpdateSettingsResponse
from .types.get_account_number_response import GetAccountNumberResponse
from .types.send_message_request import SendMessageRequest
from .types.send_message_response import SendMessageResponse
from .core.serialization import convert_and_respect_annotation_metadata
from .types.company import Company
from .errors.not_found_error import NotFoundError
from .types.not_found_error_body import NotFoundErrorBody
from .types.company_details import CompanyDetails
from .types.company_contact import CompanyContact
from .types.point_of_contact import PointOfContact
from .types.optionals import Optionals
from .types.register_company_response import RegisterCompanyResponse
from .types.update_company_response import UpdateCompanyResponse
from .core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Pinnacle:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : PinnacleEnvironment
        The environment to use for requests from the client. from .environment import PinnacleEnvironment



        Defaults to PinnacleEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from rcs import Pinnacle

    client = Pinnacle(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PinnacleEnvironment = PinnacleEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def check_rcs_capability(
        self, *, phone_number: PhoneNumber, request_options: typing.Optional[RequestOptions] = None
    ) -> CheckRcsCapabilityResponse:
        """
        Checks if a phone number is able to receive RCS

        Parameters
        ----------
        phone_number : PhoneNumber
            Phone number (E.164 format: [+][country code][subscriber number including area code]) to check for RCS capability. Example: +1234567890

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CheckRcsCapabilityResponse
            RCS capability check successful

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.check_rcs_capability(
            phone_number="phone_number",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "check_rcs",
            method="GET",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CheckRcsCapabilityResponse,
                    parse_obj_as(
                        type_=CheckRcsCapabilityResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_settings(
        self, *, webhook_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateSettingsResponse:
        """
        Initializes settings related to RCS messaging, including webhook registration.

        Parameters
        ----------
        webhook_url : str
            Webhook URL to receive inbound messages

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSettingsResponse
            Settings updated successfully

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.update_settings(
            webhook_url="webhook_url",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "update_settings",
            method="POST",
            json={
                "webhook_url": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateSettingsResponse,
                    parse_obj_as(
                        type_=UpdateSettingsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_account_number(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAccountNumberResponse:
        """
        Retrieve the phone number associated with the account.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAccountNumberResponse
            Successfully retrieved supported numbers

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.get_account_number()
        """
        _response = self._client_wrapper.httpx_client.request(
            "get_account_number",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAccountNumberResponse,
                    parse_obj_as(
                        type_=GetAccountNumberResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_message(
        self, *, request: SendMessageRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> SendMessageResponse:
        """
        Send a SMS or RCS message to a phone number

        Parameters
        ----------
        request : SendMessageRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageResponse
            Message sent successfully

        Examples
        --------
        from rcs import Card, CardRcs, CardRcsMessage, Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.send_message(
            request=CardRcs(
                phone_number="phone_number",
                message=CardRcsMessage(
                    cards=[
                        Card(
                            title="title",
                        )
                    ],
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "send",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=SendMessageRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageResponse,
                    parse_obj_as(
                        type_=SendMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_company(
        self,
        *,
        company_id: typing.Optional[int] = None,
        company_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Company]:
        """
        Retrieve the company's information (i.e. approval status, company name, etc.). Search by company ID or company name.

        Parameters
        ----------
        company_id : typing.Optional[int]
            The unique identifier for the company

        company_name : typing.Optional[str]
            The name of the company

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Company]
            Successfully retrieved company information

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.get_company()
        """
        _response = self._client_wrapper.httpx_client.request(
            "company",
            method="GET",
            params={
                "companyId": company_id,
                "companyName": company_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Company],
                    parse_obj_as(
                        type_=typing.List[Company],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        parse_obj_as(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def register_company(
        self,
        *,
        company: CompanyDetails,
        company_contact: CompanyContact,
        point_of_contact: PointOfContact,
        optionals: typing.Optional[Optionals] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RegisterCompanyResponse:
        """
        Register a company for RCS with the Pinnacle platform

        Parameters
        ----------
        company : CompanyDetails

        company_contact : CompanyContact

        point_of_contact : PointOfContact

        optionals : typing.Optional[Optionals]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegisterCompanyResponse
            Successfully registered company

        Examples
        --------
        from rcs import CompanyContact, CompanyDetails, Pinnacle, PointOfContact

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.register_company(
            company=CompanyDetails(
                name="name",
                address="address",
                ein="ein",
                description="description",
                brand_color="brandColor",
                logo_url="logoUrl",
                hero_url="heroUrl",
            ),
            company_contact=CompanyContact(
                primary_website_url="primaryWebsiteUrl",
                primary_website_label="primaryWebsiteLabel",
                primary_phone="primaryPhone",
                primary_phone_label="primaryPhoneLabel",
                primary_email="primaryEmail",
                primary_email_label="primaryEmailLabel",
                privacy_policy_url="privacyPolicyUrl",
                tos_url="tosUrl",
            ),
            point_of_contact=PointOfContact(
                poc_name="pocName",
                poc_title="pocTitle",
                poc_email="pocEmail",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "company/register",
            method="POST",
            json={
                "company": convert_and_respect_annotation_metadata(
                    object_=company, annotation=CompanyDetails, direction="write"
                ),
                "companyContact": convert_and_respect_annotation_metadata(
                    object_=company_contact, annotation=CompanyContact, direction="write"
                ),
                "pointOfContact": convert_and_respect_annotation_metadata(
                    object_=point_of_contact, annotation=PointOfContact, direction="write"
                ),
                "optionals": convert_and_respect_annotation_metadata(
                    object_=optionals, annotation=Optionals, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RegisterCompanyResponse,
                    parse_obj_as(
                        type_=RegisterCompanyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_company(
        self,
        *,
        company_id: str,
        company: typing.Optional[Company] = OMIT,
        company_contact: typing.Optional[CompanyContact] = OMIT,
        point_of_contact: typing.Optional[PointOfContact] = OMIT,
        optionals: typing.Optional[Optionals] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateCompanyResponse:
        """
        Update a company on the Pinnacle platform

        Parameters
        ----------
        company_id : str

        company : typing.Optional[Company]

        company_contact : typing.Optional[CompanyContact]

        point_of_contact : typing.Optional[PointOfContact]

        optionals : typing.Optional[Optionals]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateCompanyResponse
            Successfully updated company

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.update_company(
            company_id="companyId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "company/update",
            method="POST",
            json={
                "companyId": company_id,
                "company": convert_and_respect_annotation_metadata(
                    object_=company, annotation=Company, direction="write"
                ),
                "companyContact": convert_and_respect_annotation_metadata(
                    object_=company_contact, annotation=CompanyContact, direction="write"
                ),
                "pointOfContact": convert_and_respect_annotation_metadata(
                    object_=point_of_contact, annotation=PointOfContact, direction="write"
                ),
                "optionals": convert_and_respect_annotation_metadata(
                    object_=optionals, annotation=Optionals, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateCompanyResponse,
                    parse_obj_as(
                        type_=UpdateCompanyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPinnacle:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : PinnacleEnvironment
        The environment to use for requests from the client. from .environment import PinnacleEnvironment



        Defaults to PinnacleEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from rcs import AsyncPinnacle

    client = AsyncPinnacle(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PinnacleEnvironment = PinnacleEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def check_rcs_capability(
        self, *, phone_number: PhoneNumber, request_options: typing.Optional[RequestOptions] = None
    ) -> CheckRcsCapabilityResponse:
        """
        Checks if a phone number is able to receive RCS

        Parameters
        ----------
        phone_number : PhoneNumber
            Phone number (E.164 format: [+][country code][subscriber number including area code]) to check for RCS capability. Example: +1234567890

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CheckRcsCapabilityResponse
            RCS capability check successful

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.check_rcs_capability(
                phone_number="phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "check_rcs",
            method="GET",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CheckRcsCapabilityResponse,
                    parse_obj_as(
                        type_=CheckRcsCapabilityResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_settings(
        self, *, webhook_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateSettingsResponse:
        """
        Initializes settings related to RCS messaging, including webhook registration.

        Parameters
        ----------
        webhook_url : str
            Webhook URL to receive inbound messages

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSettingsResponse
            Settings updated successfully

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_settings(
                webhook_url="webhook_url",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "update_settings",
            method="POST",
            json={
                "webhook_url": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateSettingsResponse,
                    parse_obj_as(
                        type_=UpdateSettingsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_account_number(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAccountNumberResponse:
        """
        Retrieve the phone number associated with the account.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAccountNumberResponse
            Successfully retrieved supported numbers

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_account_number()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "get_account_number",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAccountNumberResponse,
                    parse_obj_as(
                        type_=GetAccountNumberResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_message(
        self, *, request: SendMessageRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> SendMessageResponse:
        """
        Send a SMS or RCS message to a phone number

        Parameters
        ----------
        request : SendMessageRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageResponse
            Message sent successfully

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle, Card, CardRcs, CardRcsMessage

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.send_message(
                request=CardRcs(
                    phone_number="phone_number",
                    message=CardRcsMessage(
                        cards=[
                            Card(
                                title="title",
                            )
                        ],
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "send",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=SendMessageRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageResponse,
                    parse_obj_as(
                        type_=SendMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_company(
        self,
        *,
        company_id: typing.Optional[int] = None,
        company_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Company]:
        """
        Retrieve the company's information (i.e. approval status, company name, etc.). Search by company ID or company name.

        Parameters
        ----------
        company_id : typing.Optional[int]
            The unique identifier for the company

        company_name : typing.Optional[str]
            The name of the company

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Company]
            Successfully retrieved company information

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_company()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "company",
            method="GET",
            params={
                "companyId": company_id,
                "companyName": company_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Company],
                    parse_obj_as(
                        type_=typing.List[Company],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        parse_obj_as(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def register_company(
        self,
        *,
        company: CompanyDetails,
        company_contact: CompanyContact,
        point_of_contact: PointOfContact,
        optionals: typing.Optional[Optionals] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RegisterCompanyResponse:
        """
        Register a company for RCS with the Pinnacle platform

        Parameters
        ----------
        company : CompanyDetails

        company_contact : CompanyContact

        point_of_contact : PointOfContact

        optionals : typing.Optional[Optionals]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegisterCompanyResponse
            Successfully registered company

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle, CompanyContact, CompanyDetails, PointOfContact

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.register_company(
                company=CompanyDetails(
                    name="name",
                    address="address",
                    ein="ein",
                    description="description",
                    brand_color="brandColor",
                    logo_url="logoUrl",
                    hero_url="heroUrl",
                ),
                company_contact=CompanyContact(
                    primary_website_url="primaryWebsiteUrl",
                    primary_website_label="primaryWebsiteLabel",
                    primary_phone="primaryPhone",
                    primary_phone_label="primaryPhoneLabel",
                    primary_email="primaryEmail",
                    primary_email_label="primaryEmailLabel",
                    privacy_policy_url="privacyPolicyUrl",
                    tos_url="tosUrl",
                ),
                point_of_contact=PointOfContact(
                    poc_name="pocName",
                    poc_title="pocTitle",
                    poc_email="pocEmail",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "company/register",
            method="POST",
            json={
                "company": convert_and_respect_annotation_metadata(
                    object_=company, annotation=CompanyDetails, direction="write"
                ),
                "companyContact": convert_and_respect_annotation_metadata(
                    object_=company_contact, annotation=CompanyContact, direction="write"
                ),
                "pointOfContact": convert_and_respect_annotation_metadata(
                    object_=point_of_contact, annotation=PointOfContact, direction="write"
                ),
                "optionals": convert_and_respect_annotation_metadata(
                    object_=optionals, annotation=Optionals, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RegisterCompanyResponse,
                    parse_obj_as(
                        type_=RegisterCompanyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_company(
        self,
        *,
        company_id: str,
        company: typing.Optional[Company] = OMIT,
        company_contact: typing.Optional[CompanyContact] = OMIT,
        point_of_contact: typing.Optional[PointOfContact] = OMIT,
        optionals: typing.Optional[Optionals] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateCompanyResponse:
        """
        Update a company on the Pinnacle platform

        Parameters
        ----------
        company_id : str

        company : typing.Optional[Company]

        company_contact : typing.Optional[CompanyContact]

        point_of_contact : typing.Optional[PointOfContact]

        optionals : typing.Optional[Optionals]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateCompanyResponse
            Successfully updated company

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_company(
                company_id="companyId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "company/update",
            method="POST",
            json={
                "companyId": company_id,
                "company": convert_and_respect_annotation_metadata(
                    object_=company, annotation=Company, direction="write"
                ),
                "companyContact": convert_and_respect_annotation_metadata(
                    object_=company_contact, annotation=CompanyContact, direction="write"
                ),
                "pointOfContact": convert_and_respect_annotation_metadata(
                    object_=point_of_contact, annotation=PointOfContact, direction="write"
                ),
                "optionals": convert_and_respect_annotation_metadata(
                    object_=optionals, annotation=Optionals, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateCompanyResponse,
                    parse_obj_as(
                        type_=UpdateCompanyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: PinnacleEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
