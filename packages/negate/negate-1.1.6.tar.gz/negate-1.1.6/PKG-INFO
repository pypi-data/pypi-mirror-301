Metadata-Version: 2.3
Name: negate
Version: 1.1.6
Summary: A Python module that negates sentences.
Project-URL: Homepage, https://github.com/dmlls/negate
Project-URL: GitHub Issues, https://github.com/dmlls/negate/issues
Project-URL: GitHub Repo, https://github.com/dmlls/negate
Author-email: Diego Miguel Lozano <hello@diegomiguel.me>
Maintainer-email: Diego Miguel Lozano <hello@diegomiguel.me>
License: 
                                         Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright 2022-2023 Diego Miguel Lozano <hello@diegomiguel.me>
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
License-File: LICENSE
Keywords: NLP,negate,negation,negator,sentence-negation,sentence-negator
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.7
Requires-Dist: lemminflect<0.3.0,>=0.2.3
Requires-Dist: spacy<3.9.0,>=3.8.0
Provides-Extra: transformers
Requires-Dist: spacy-transformers<1.5.0,>=1.3.5; extra == 'transformers'
Description-Content-Type: text/markdown

<p align="center"><img width="400" src="https://github.com/dmlls/negate/assets/22967053/d0a2886e-8a17-4006-bf23-d36dd880cffa" alt="Negate Logo"></p>
<h2 align="center">Negate: A Python module to negate sentences</h2>
<p align="center" display="inline-block">
  <a href="https://pypi.org/project/negate/">
    <img src="https://img.shields.io/pypi/v/negate">
  </a>
  <a href="https://deepsource.io/gh/dmlls/negate/?ref=repository-badge" target="_blank">
      <img alt="Active Issues" title="DeepSource" src="https://deepsource.io/gh/dmlls/negate.svg/?label=active+issues&token=D9QCfE028iloctbSdOhywtZy"/>
  </a>
</p>

<br><br>

## Introduction

Negate is a Python module that implements rule-based, syntactic sentence
negation in English<sup>1</sup>.


<sub><sup>1</sup> More languages might be supported in the future.</small></sub>

<br>

## Installation

Negate is available on [PyPI](https://pypi.org/project/negate/) and can be
installed using pip:
```shell
pip install -U negate
```

<br>

## Usage

### 1. Initializing the Negator

First the Negator must be initialized:

```Python
from negate import Negator

# Use default model (en_core_web_md):
negator = Negator()

```

<br>

By default, negate uses the spaCy model
[`en_core_web_md`](https://spacy.io/models/en#en_core_web_md) for POS tagging
and dependency parsing. This model works well for most cases. However, if
maximum accuracy is needed, negate also allows to use a Transformer model,
namely the spaCy model
[`en_core_web_trf`](https://spacy.io/models/en#en_core_web_trf). To use this
model, first install the additional dependencies and then initialize the Negator
passing `use_transformers=True`:

```shell
pip install -U "negate[transformers]"
```

```Python
# Use a Transformer model (en_core_web_trf):
negator = Negator(use_transformers=True)

# GPU can also be used (if available):
negator = Negator(use_transformers=True, use_gpu=True)
```

<br>

### 2. Negating sentences

Then, to negate a sentence:

```Python
sentence = "An apple a day, keeps the doctor away."

negated_sentence = negator.negate_sentence(sentence)

print(negated_sentence)  # "An apple a day, doesn't keep the doctor away."
```

<br>

When the parameter `prefer_contractions` is set to `True` (default),
modifications to auxiliary verbs will use their contracted form<sup>2</sup>. For
example:

```Python
sentence = "Speaking of doctors, I went to the doctor the other day."

negated_sentence = negator.negate_sentence(sentence, prefer_contractions=True)
print(negated_sentence)  # "Speaking of doctors, I didn't go to the doctor the other day."

negated_sentence = negator.negate_sentence(sentence, prefer_contractions=False)
print(negated_sentence)  # "Speaking of doctors, I did not go to the doctor the other day."
```

<sub><sup>2</sup> Note that this does not affect other existent verbs in the
sentence that haven't been modified.</small></sub>

<br>

### Behavior upon unsupported sentences

Currently, negate will not be able to negate certain types of sentences (see
[Current Limitations](#current-limitations) and [Irremediable
Caveats](#irremediable-caveats)).

In some cases, negate will detect that a sentence is not supported. By default,
a warning will be issued:

```console
Negator - WARNING: Sentence not supported. Output might be arbitrary.
```

<br>

If you want the negator to fail instead of printing a warning, simply initialize
it with `fail_on_unsupported` set to `True`, i.e.:

```Python
negator = Negator(fail_on_unsupported=True)
```

<br>

This can be useful to skip unsupported sentences when running negate on a batch
of sentences, e.g.:

```Python
negator = Negator(fail_on_unsupported=True)
sentences = [...]
negated_sentences = []

for sent in sentences:
    try:
        negated_sentences.append(negator.negate_sentence(sent))
    except RuntimeError:
        pass  # skip unsupported sentence
```

<br>

## Current Limitations

**Negate should work fine for most cases.** However, it is currently in beta
phase. Some features have not yet been implemented. Pull Requests are always
welcome!


- [ ] **"Some", "any", "yet" are not properly supported.** E.g.: Negating the
  sentence "There are some features to be implemented." will currently output
  "There aren't some features to be implemented." Although this could still make
  sense depending on the context (e.g., "There aren't some features to be
  implemented. No, not just *some*, there are a lot!"), I assume most users
  would expect "some" being replaced with "any" and vice versa. When it comes to
  "yet", when negating a negation, it makes sense to remove it or replace it
  with "already", e.g., "I haven't been to Paris yet." → "I have been to Paris."

- [x] ~**[Inversions](https://dictionary.cambridge.org/es-LA/grammar/british-grammar/inversion)
  are not supported.** This mainly affects to questions, e.g., "*Did* you go to
  the concert?" vs. "You *did* go to the concert." Notice how in the first
  example (interrogative) we have AUX + PRON + VERB and in the second
  (affirmative) PRON + AUX + VERB.~ **Update:** Inversions are now supported!

- [ ] **Non-verbal negations are not supported.** This type of negations, such
  as "A bottle with no cap." will produce the warning: `Negator - WARNING:
  Sentence not supported. Output might be arbitrary`.

- [ ] **The auxiliary "ought" is not supported.** "Ought" is the only auxiliary
  followed by a "to." This complicates things slightly. But yeah, it ought to be
  implemented at some point.

- [ ] **Certain verb conjunctions are not supported.** E.g.: "She hates and
  loves winter." → "She doesn't *hate* and *love* winter." Currently, only the
  first verb will be correctly conjugated. In this cases, it would also make
  sense to attend to boolean algebra (De Morgan's law) and replace the "and"
  with "or"/ "neither"/"nor", i.e., "She doesn't *hate* nor *love* winter."

- [ ] **Multiple verb negation is not supported.** In many sentences with
  subordinate clauses, it would make sense to negate several verbs. E.g.: "I am
  hungry because I didn't eat." → "I am *not* hungry because I *ate*."

<br>

## Irremediable Caveats

Language took very seriously Bruce Lee's famous words "be water, my friend." It
is extremely flexible, and therefore, no number of rules, however large this
number may be, will cover the whole realm of possibilities. Just when you think
your rules cover most of the cases, a new one comes in that breaks things. Early
NLP researchers and developers know very well about this.

Negate has no notion of meaning neither will ever do. Its scope its limited to
syntax. Because of this, in some cases, the produced negated sentences might
sound rather off.

Negate depends 100 % on POS tagging and dependency parsing. If any of them
fails, negate will also fail. The spaCy models we use are not infallible, which
adds another layer of "things that could go wrong" to negate.

This module was in fact developed to generate negation data in order to
fine-tune NLP Deep Learning models (yes, Transformers – can't believe I made it
this long without mentioning the word). They are, of course, the way to go for a
fully-fledged negation that also attends to semantics.

<br>

## Acknowledgements

Negate has two core direct dependencies. Without them, negate wouldn't be able
to exist:

- [spaCy 💫](https://github.com/explosion/spaCy): As already mentioned, we rely
  on POS tagging and dependency parsing to negate sentences. spaCy makes this
  process very easy for us.

- [LemmInflect 🍋](https://github.com/bjascob/LemmInflect): Negations go far
  beyond adding or removing a negation particle. In some cases, verbs have to be
  properly conjugated (e.g., when negating verbs in third-person or in past
  simple). LemmInflect provides us with this functionality.

<br>

## Academic Publications

Negate has been used in the following academic papers:

- Anschütz, M., Miguel Lozano, D., & Groh, G. (2023). This is not correct!
  Negation-aware Evaluation of Language Generation Systems. _Proceedings of the
  16th International Natural Language Generation Conference_, 163–175.
  https://doi.org/10.18653/v1/2023.inlg-main.12

- Liu, X., Feng, Y., & Chang, K.-W. (2024). Casa: Causality-driven Argument
  Sufficiency Assessment. _Proceedings of the 2024 Conference of the North American
  Chapter of the Association for Computational Linguistics: Human Language
  Technologies (Volume 1: Long Papers)_, 5282–5302.
  https://doi.org/10.18653/v1/2024.naacl-long.296
