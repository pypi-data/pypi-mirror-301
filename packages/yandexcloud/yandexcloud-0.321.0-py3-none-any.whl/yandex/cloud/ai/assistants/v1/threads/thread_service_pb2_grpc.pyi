"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.ai.assistants.v1.threads.thread_pb2
import yandex.cloud.ai.assistants.v1.threads.thread_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ThreadServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.CreateThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread,
    ]

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.GetThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread,
    ]

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.UpdateThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadResponse,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsResponse,
    ]

class ThreadServiceAsyncStub:
    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.CreateThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread,
    ]

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.GetThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread,
    ]

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.UpdateThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadResponse,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsRequest,
        yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsResponse,
    ]

class ThreadServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.CreateThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread]]: ...

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.GetThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread]]: ...

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.UpdateThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.threads.thread_pb2.Thread]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadResponse, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.DeleteThreadResponse]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsResponse, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.threads.thread_service_pb2.ListThreadsResponse]]: ...

def add_ThreadServiceServicer_to_server(servicer: ThreadServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
