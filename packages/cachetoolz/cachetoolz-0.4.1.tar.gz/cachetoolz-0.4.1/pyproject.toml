[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cachetoolz"
version = "0.4.1"
description = "This library provides a decorator for caching functions"
license = "GPL-3.0-or-later"
authors = [{ name = "taconi", email = "igor.taconi@protonmail.com" }]
maintainers = [{ name = "taconi", email = "igor.taconi@protonmail.com" }]
readme = "README.md"
keywords = ["python", "cache", "async", "redis", "mongo"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Topic :: Utilities",
]

requires-python = ">=3.9"

dependencies = [
  "funcy>=2.0",
  "nest-asyncio>=1.5.6",
  "charset-normalizer>=3.2.0",
  "typing-extensions>=4.7.1 ; python_version < '3.10'",
  "get-annotations>=0.1.2 ; python_version < '3.10'",
]

[project.optional-dependencies]
redis = ["redis>=5.0.1"]
mongo = ["motor>=3.3.2", "pymongo>=4.6.2"]

[project.urls]
Homepage = "https://codeberg.org/taconi/cachetoolz/#cache-toolz"
Changelog = "https://cachetoolz.readthedocs.io/changelog"
Contributing = "https://cachetoolz.readthedocs.io/contributing"
Documentation = "https://cachetoolz.readthedocs.io"
"Issue Tracker" = "https://codeberg.org/taconi/cachetoolz/issues"
Repository = "https://codeberg.org/taconi/cachetoolz/"

[tool.hatch.envs.hatch-test]
dependencies = [
  "pytest>=8.2.2",
  "pytest-asyncio>=0.23.7",
  "pytest-cov>=5.0.0",
  "faker>=23.2.1",
  "redis>=5.0.1",
  "motor>=3.3.2",
  "pymongo>=4.6.2",
  "ipdb>=0.13.13",
]

[[tool.hatch.envs.hatch-test.matrix]]
platforms = ["linux", "windows", "macos"]
python = ["3.9", "3.10", "3.11", "3.12", "3.13", "pypy3.9", "pypy3.10"]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest --cov-report=xml --cov-report=html --cov-report=term --cov=cachetoolz"


[tool.hatch.envs.hatch-static-analysis]
dependencies = [
  "isort>=5.13.2",
  "mccabe>=0.7.0",
  "flake8-html>=0.4.3",
  "flake8-docstrings>=1.7.0",
  "flake8-bugbear>=24.2.6",
  "flake8-pyproject>=1.2.3",
  "black>=24.2.0",
  "autoflake>=2.3.0",
  "pre-commit>=3.6.2",
  "gitlint>=0.19.1",
  "mypy>=1.10.0",
  "types-redis>=4.6.0.20240425",
  "pymongo-stubs>=0.2.0",
  "motor-stubs>=1.7.1",
  "bandit[toml]>=1.7.8",
  "numpydoc>=1.7.0",
  "pre-commit>=3.6.2",
]

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = [
  "autoflake --recursive {args:cachetoolz}",
  "isort --check-only --diff {args:cachetoolz}",
  "black --check --diff {args:cachetoolz}",
]
format-fix = [
  "autoflake --in-place --recursive {args:cachetoolz}",
  "isort {args:cachetoolz}",
  "black {args:cachetoolz}",
]
lint-check = [
  "gitlint --ignore-stdin",
  "flake8 {args:cachetoolz}",
  "mypy {args:cachetoolz}",
  "pre-commit run --all-files",
]
lint-fix = "lint-check"

[tool.hatch.envs.dev]
dependencies = ["pre-commit>=3.6.2", "gitlint>=0.19.1"]

[tool.hatch.envs.dev.scripts]
init = ["pre-commit install", "gitlint install-hook"]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocstrings-python>=1.8.0",
  "mkdocs-static-i18n[material]>=1.2.2",
]

[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve"
build = "mkdocs build"
deploy = "mkdocs gh-deploy --force -b pages"

[tool.hatch.build.targets.sdist]
packages = ["/cachetoolz"]

[tool.hatch.build.targets.wheel]
packages = ["/cachetoolz"]

[tool.mypy]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["get_annotations", "funcy", "nest_asyncio"]
ignore_missing_imports = true

[tool.isort]
multi_line_output = 3
line_length = 79
include_trailing_comma = true
profile = "black"

[tool.black]
line_length = 79
skip-string-normalization = true

[tool.flake8]
ignore = [
  "E121",
  "E123",
  "E126",
  "E231",
  "E226",
  "E24",
  "E704",
  "W503",
  "W504",
  "D401",
  "D412",
]
max-line-length = 79
max-complexity = 8
docstring-convention = "pep257"
format = "html"
htmltitle = "Flake8 Report"
htmldir = ".reports/flake8"

[tool.autoflake]
remove_all_unused_imports = true
ignore_init_module_imports = true
remove_duplicate_keys = true
remove_unused_variables = true

[tool.numpydoc_validation]
checks = [
  "all",  # report on all checks, except the below
  "EX01",
  "SA01",
  "ES01",
]
exclude = [ # don't report on objects that match any of these regex
  '__(init|repr)__$',
  'MongoBackend\._get_database_or_collection',
  'decoder\.Decoder\._object_hook$',
  'decoder\.register\.wrapper$',
  'encoder\.register\.wrapper$',
  'encoder\._$',
  'decorator\.Cache\._cache$',
  'decorator\.Cache\._clear$',
  'types\.Encoded$',
  'utils\.manipulate\.',
]

[tool.coverage.run]
source = ["cachetoolz"]
concurrency = ["thread"]

[tool.coverage.report]
fail_under = 98
skip_empty = true
sort = "-Cover"
exclude_lines = [
  "no cov",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "@(abc.)?abstractmethod",
]

[tool.coverage.xml]
output = ".reports/coverage.xml"

[tool.coverage.json]
output = ".reports/coverage.json"

[tool.coverage.html]
directory = ".reports/coverage"

[tool.pytest.ini_options]
pythonpath = "."
addopts = "-p no:warnings --pdbcls=IPython.terminal.debugger:TerminalPdb"
markers = [
  "unit",
  "backend",
  "redis",
  "mongo",
  "inmemory",
  "get",
  "set",
  "clear",
  "cache",
  "decorator",
  "exception",
  "coder",
  "encode",
  "decode",
  "encoder",
  "decoder",
  "decoder_name",
  "register",
  "manipulate",
  "default_keygen",
  "ensure_async",
  "make_key",
]
