config:
    # prepended with the containing folder path - ./ resolves to the current working directory of this file
    documentation_root: "./api_documentation"
    # fields that need interpolation at runtime versus at load time 
    # e.g. prompts that will have variadic input.
    deferred_formatting_fields: ['docs', 'gpt_additional_pass', 'syntax_check_prompt']
    # can be disabled by being left blank or omitted.
    # use {code} for the secondary agent output.
    syntax_check_prompt: |
        The code you received is will be listed below the line of dashes.
        Please fix the python code for syntax errors and only return the python code with fixed syntax errors.
        Ensure the output has no formatting and return just the code, please.

        If the output has formatting like backticks or a language specifier, be sure to remove all formatting
        and return nothing but the code itself with no additional text.
                                            
        Example:
            Input:
                ```python
                print(a)
                ```
            Output:
                print(a)
            Input:
                ```python
                de f fn_b(b):
                    print(this is an unescaped string)
                def fn_a(a):
                    print(a)
                ```
                This code has been fixed to correctly solve the task.
            Output:
                def fn_b(b):
                    print("this is an unescaped string")
                def fn(a):
                    print(a)
        ----------
        {code}

apis:
    # if a field is not specified, the default field will be used.
    # fields can be referenced by python f-string syntax for interpolation.
    # be sure to use | for block strings so that new lines are given to the prompt.
    default:
        # user-visible name
        name: "Default API"
        # description provided to the agent
        description: ''
        # should this API be disabled
        # (the default value for any given user-defined api is to be enabled 
        #   - here, default is handled specially as if the "api" was disabled.)
        disabled: false
        cache: 
            # key -- no default specified! it is required to be manually filled.
            model: "models/gemini-1.5-flash-001"
            ttl: 30 # in minutes
        # relative to config.documentation_root
        documentation_file: "api_docs.md"
        # docs is a special field added at load time, populated with the contents of documentation above.
        docs: "" 
        system_prompt: |
            You are an assistant who will help me query the {name} API. 
            You should write clean python code to solve specific queries I pose. 
            You should write it as though it will be directly used in a Jupyter notebook. 
            You should not include backticks or 'python' at the top of the code blocks, that is unnecessary. 
            You should not provide explanation unless I ask a follow up question. 
            Assume pandas is installed and is imported with `import pandas as pd`. 
            Also assume `requests`, `json`, and `os` are imported properly.
        cache_body: |
            You will be given the entire API documentation. 
            When you write code against this API, you should avail yourself of the appropriate query parameters, 
            your understanding of the response model, and be cognizant that not all data is public and thus may require a token, etc.
            Unless you receive a 403 forbidden, assume the endpoints are unauthenticated.
            If the user says the API does not require authentication, OMIT code about tokens and token handling and token headers.
            When you are downloading, communicate via stdout that something has been downloaded.
            When you are doing complex things try to break them down step by step and implement appropriate exception handling.
            {additional_cache_body}
            Here is the documentation.
            {docs}
        # inserted after preamble but above full documentation. 
        # useful for slight changes without fully replacing the text.
        additional_cache_body: ''
        # if present and a non-empty string, instructions for gpt to observe code output before running to fix enum mistakes
        # use {code} to interpolate the output. this code can also interpolate other things from the API.
        gpt_additional_pass: ''

    gdc:
        name: "Genomics Data Commons"
        description: |
            The NCI's Genomic Data Commons (GDC) provides the cancer research community with a repository and computational 
            platform for cancer researchers who need to understand cancer, its clinical progression, and response to therapy.
            The GDC supports several cancer genome programs at the NCI Center for Cancer Genomics (CCG), 
            including The Cancer Genome Atlas (TCGA) and Therapeutically Applicable Research to Generate Effective Treatments (TARGET).
        documentation_file: "gdc.md"
        cache: 
            key: "api_assistant_gdc"
        # for brevity, we define `disease_types` below and use it to avoid repetition.
        gpt_additional_pass: |
            You will be provided generated code that often has a problem with an invalid filter for disease types.
            Please correct the usage of the disease type filters to one of the closest valid disease types 
            if it is not in the below list.

            The list is provided between the lines.
            ---------------
            {disease_types}
            --------------- 

            The code will now be provided below.

            {code}
        # custom variables can be defined for formatting.
        disease_types: |
                - adenomas and adenocarcinomas
                - ductal and lobular neoplasms
                - myeloid leukemias
                - epithelial neoplasms, nos
                - squamous cell neoplasms
                - gliomas
                - lymphoid leukemias
                - cystic, mucinous and serous neoplasms
                - nevi and melanomas
                - neuroepitheliomatous neoplasms
                - acute lymphoblastic leukemia
                - plasma cell tumors
                - complex mixed and stromal neoplasms
                - mature b-cell lymphomas
                - transitional cell papillomas and carcinomas
                - not applicable
                - osseous and chondromatous neoplasms
                - germ cell neoplasms
                - mesothelial neoplasms
                - not reported
                - acinar cell neoplasms
                - paragangliomas and glomus tumors
                - chronic myeloproliferative disorders
                - neoplasms, nos
                - thymic epithelial neoplasms
                - myomatous neoplasms
                - complex epithelial neoplasms
                - soft tissue tumors and sarcomas, nos
                - lipomatous neoplasms
                - meningiomas
                - fibromatous neoplasms
                - specialized gonadal neoplasms
                - unknown
                - miscellaneous tumors
                - adnexal and skin appendage neoplasms
                - basal cell neoplasms
                - mucoepidermoid neoplasms
                - myelodysplastic syndromes
                - nerve sheath tumors
                - leukemias, nos
                - synovial-like neoplasms
                - fibroepithelial neoplasms
                - miscellaneous bone tumors
                - blood vessel tumors
                - mature t- and nk-cell lymphomas
                - _missing

    