type: tool
info:
  label: Something tools
  doc: Tool that does something
  author:
    name: Nanohmics, Inc.
    email: software.support@nanohmics.com
resources:
  python:
    dependencies:
    - numpy
inputs:
  out_file_name:
    type: wfile
    label: Output file
    default_val: out.txt
  a:
    type: union
    label: A union of several types
    cases:
      its_not_set:
        type: bool
        label: "'b' not specified"
        doc: This makes this input optional
      my_int_type:
        type: int
        label: Optional integer
        doc: More info about integer
  enable_it:
    type: bool
    label: Do it?
    doc: Enable doing the something
    default_val: true
  this_is_it:
    type: struct
    label: A mapped input
    enabled: $expr:py _.data.inputs.enable_it
    struct:
      x:
        type: int
        label: Some integer
        doc: This is inputs.this_is_it.x
        min: 0
        max: 10
      y:
        type: float
        label: Fractional part
        doc: This is the fractional part of the number
        enabled: $expr:py _.parent.value.x < 1
        default_val: 0.1
        selection:
        - label: 1/10
          doc: One tenth
          value: 0.1
        - label: 1/100
          doc: One-hundredth
          value: 0.01
  coord_sys:
    type: string
    label: Coords
    doc: Coordinate system to use
    default_val: xyz
    selection:
    - label: Cylindrical (R, Theta, Z)
      doc: Cylindrical (R, Theta, Z) - polar in x-y, cartesian in z
      value: rzt
    - label: Cartesian (X, Y, Z)
      doc: Cartesian (X, Y, Z) - cartesian in x, y, z
      value: xyz
  arr_input:
    type: list
    label: List of integers
    item:
      type: int
      label: Value
    min_len: 3
    default_val:
    - 1.0
    - 2.0
    - 3.0
  list_input:
    type: list
    label: A List Input
    doc: Add multiple entries
    item:
      type: union
      cases:
        first_option:
          type: string
          label: First Option
        second_option:
          type: struct
          label: Second Option
          struct:
            repeat_count:
              type: int
              label: Repeat something
              doc: Does the something this many times
              default_val: 1
              min: 0
            nested_list:
              type: list
              label: Nested Array
              doc: Add multiple entries
              item:
                type: struct
                label: First Option
                struct:
                  a:
                    type: bool
                    label: Use it?
                    doc: Enable using x
                    default_val: true
                  x:
                    type: float
                    label: Value to use
                    enabled: $expr:py _.parent.value.a
outputs:
  stdout_output:
    type: file
    label: Standard output
    doc: The standard output printed by the tool
    content_types:
    - {}
    value: |-
      $func:py
      import os
      x = os.path.abspath( _.data.commands.run_program.stdout.path )
      print(x)
      return x
  rendered:
    type: file
    label: Rendered template
    doc: Rendered content of Cheetah template
    content_types:
    - {}
    value: $expr:py _.data.inputs.out_file_name.path
  parsed_output:
    type: int
    label: Get a number from file
    doc: Sums values from the generated Numpy file
    value: |-
      $func:py
      import numpy as np

      arr = np.load( "arr.npy" )

      return np.sum(arr)
  some_flag:
    type: bool
    label: My boolean
    value: true
  a_list_output:
    type: list
    label: A list output
    item:
      type: union
      label: A union of several types
      cases:
        first_opt:
          type: bool
          label: First option
        second_opt:
          type: float
          label: Second option
        third_opt:
          type: string
          label: Third option
      default_case: third_opt
    value: $expr:py [ "list with different item cases", True, 12.34, None ]
  a_structured_output:
    type: struct
    label: A structured output
    struct:
      a:
        type: bool
        label: Item A
      b:
        type: bool
        label: Item B
      c:
        type: bool
        label: Item C
        default_val: true
    value: |-
      $func:py

      return {
        'b' : _.data.inputs.a == 0,
        # expressions returning None for `value` will then use `default_val`
        'c' : None }
commands:
  make_tmpl:
    type: file
    path: $expr:py _.data.inputs.out_file_name.path
    contents: |-
      $tmpl:cheetah
      This was made by the template...


      #if $_.data.inputs.enable_it:
      It's going to do the thing.
      #else
      Not doing it.
      #end if

      $_.data.inputs.this_is_it.x#if $_.data.inputs.this_is_it.x < 1# + $_.data.inputs.this_is_it.y #end if
  make_script:
    type: file
    path: run.py
    contents: |-
      import numpy as np
      import sys

      from partis.nwl import (
        load_results )

      # loads current results file
      # object may be treated as in any other Python expression
      _ = load_results()

      arr = np.array( _.data.inputs.arr_input )

      np.save( sys.argv[1], arr )
  run_script:
    type: process
    label: Runs the python script file created by the previous command
    doc: More info about what this command does
    args:
    - python3
    - run.py
    - arr
  evaluate_script:
    type: script
    source: |-
      $func:py

      print(__name__)
      print(__file__)

      import numpy as np

      arr = np.array([5,6,7,8])

      np.save( "arr2", arr )
  run_program:
    type: process
    label: Built command to run script
    doc: This builds command from bindings
    enabled: $expr:py _.data.inputs.enable_it
    prolog:
    - level: WARNING
      msg: '$expr:py f"A custom warning about x: {_.data.inputs.this_is_it.x}"'
      enabled: $expr:py _.data.inputs.this_is_it.x >= 1
    args: |-
      $func:py

      args = [ "echo", "'hello world'" ]

      return args
