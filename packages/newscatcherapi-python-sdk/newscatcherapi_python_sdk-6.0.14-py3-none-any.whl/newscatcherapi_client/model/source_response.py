# coding: utf-8

"""
    NewsCatcher-V3 Production API

    <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

    The version of the OpenAPI document: 3.2.16
    Contact: maksym@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from newscatcherapi_client import schemas  # noqa: F401


class SourceResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    SourceResponse DTO class.
    """


    class MetaOapg:
        required = {
            "sources",
            "user_input",
            "message",
        }
        
        class properties:
            message = schemas.StrSchema
        
            @staticmethod
            def sources() -> typing.Type['SourceResponseSources']:
                return SourceResponseSources
            user_input = schemas.DictSchema
            __annotations__ = {
                "message": message,
                "sources": sources,
                "user_input": user_input,
            }
    
    sources: 'SourceResponseSources'
    user_input: MetaOapg.properties.user_input
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sources"]) -> 'SourceResponseSources': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_input"]) -> MetaOapg.properties.user_input: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "sources", "user_input", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sources"]) -> 'SourceResponseSources': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_input"]) -> MetaOapg.properties.user_input: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "sources", "user_input", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sources: 'SourceResponseSources',
        user_input: typing.Union[MetaOapg.properties.user_input, dict, frozendict.frozendict, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceResponse':
        return super().__new__(
            cls,
            *args,
            sources=sources,
            user_input=user_input,
            message=message,
            _configuration=_configuration,
            **kwargs,
        )

from newscatcherapi_client.model.source_response_sources import SourceResponseSources
