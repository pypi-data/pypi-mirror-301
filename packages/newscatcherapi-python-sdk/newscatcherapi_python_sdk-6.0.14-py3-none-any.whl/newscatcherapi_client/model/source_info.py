# coding: utf-8

"""
    NewsCatcher-V3 Production API

    <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

    The version of the OpenAPI document: 3.2.16
    Contact: maksym@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from newscatcherapi_client import schemas  # noqa: F401


class SourceInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    "SourceInfo DTO class.
    """


    class MetaOapg:
        required = {
            "domain_url",
        }
        
        class properties:
            domain_url = schemas.StrSchema
            name_source = schemas.StrSchema
            logo = schemas.StrSchema
        
            @staticmethod
            def additional_info() -> typing.Type['AdditionalSourceInfo']:
                return AdditionalSourceInfo
            __annotations__ = {
                "domain_url": domain_url,
                "name_source": name_source,
                "logo": logo,
                "additional_info": additional_info,
            }
    
    domain_url: MetaOapg.properties.domain_url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_url"]) -> MetaOapg.properties.domain_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_source"]) -> MetaOapg.properties.name_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_info"]) -> 'AdditionalSourceInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain_url", "name_source", "logo", "additional_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_url"]) -> MetaOapg.properties.domain_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_source"]) -> typing.Union[MetaOapg.properties.name_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_info"]) -> typing.Union['AdditionalSourceInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain_url", "name_source", "logo", "additional_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        domain_url: typing.Union[MetaOapg.properties.domain_url, str, ],
        name_source: typing.Union[MetaOapg.properties.name_source, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        additional_info: typing.Union['AdditionalSourceInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceInfo':
        return super().__new__(
            cls,
            *args,
            domain_url=domain_url,
            name_source=name_source,
            logo=logo,
            additional_info=additional_info,
            _configuration=_configuration,
            **kwargs,
        )

from newscatcherapi_client.model.additional_source_info import AdditionalSourceInfo
