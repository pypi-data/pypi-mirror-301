# coding: utf-8

"""
    NewsCatcher-V3 Production API

    <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

    The version of the OpenAPI document: 3.2.16
    Contact: maksym@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from newscatcherapi_client import schemas  # noqa: F401


class ClusteringSearchResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    ClusteringSearchResponse DTO class.
    """


    class MetaOapg:
        required = {
            "total_hits",
            "user_input",
            "page",
            "total_pages",
            "clusters_count",
            "clusters",
            "page_size",
        }
        
        class properties:
            total_hits = schemas.IntSchema
            page = schemas.IntSchema
            total_pages = schemas.IntSchema
            page_size = schemas.IntSchema
            clusters_count = schemas.IntSchema
            
            
            class clusters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Cluster']:
                        return Cluster
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Cluster'], typing.List['Cluster']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clusters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Cluster':
                    return super().__getitem__(i)
            user_input = schemas.DictSchema
            status = schemas.StrSchema
            __annotations__ = {
                "total_hits": total_hits,
                "page": page,
                "total_pages": total_pages,
                "page_size": page_size,
                "clusters_count": clusters_count,
                "clusters": clusters,
                "user_input": user_input,
                "status": status,
            }
    
    total_hits: MetaOapg.properties.total_hits
    user_input: MetaOapg.properties.user_input
    page: MetaOapg.properties.page
    total_pages: MetaOapg.properties.total_pages
    clusters_count: MetaOapg.properties.clusters_count
    clusters: MetaOapg.properties.clusters
    page_size: MetaOapg.properties.page_size
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_hits"]) -> MetaOapg.properties.total_hits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_pages"]) -> MetaOapg.properties.total_pages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page_size"]) -> MetaOapg.properties.page_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusters_count"]) -> MetaOapg.properties.clusters_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusters"]) -> MetaOapg.properties.clusters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_input"]) -> MetaOapg.properties.user_input: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_hits", "page", "total_pages", "page_size", "clusters_count", "clusters", "user_input", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_hits"]) -> MetaOapg.properties.total_hits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_pages"]) -> MetaOapg.properties.total_pages: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page_size"]) -> MetaOapg.properties.page_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusters_count"]) -> MetaOapg.properties.clusters_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusters"]) -> MetaOapg.properties.clusters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_input"]) -> MetaOapg.properties.user_input: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_hits", "page", "total_pages", "page_size", "clusters_count", "clusters", "user_input", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_hits: typing.Union[MetaOapg.properties.total_hits, decimal.Decimal, int, ],
        user_input: typing.Union[MetaOapg.properties.user_input, dict, frozendict.frozendict, ],
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, ],
        total_pages: typing.Union[MetaOapg.properties.total_pages, decimal.Decimal, int, ],
        clusters_count: typing.Union[MetaOapg.properties.clusters_count, decimal.Decimal, int, ],
        clusters: typing.Union[MetaOapg.properties.clusters, list, tuple, ],
        page_size: typing.Union[MetaOapg.properties.page_size, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClusteringSearchResponse':
        return super().__new__(
            cls,
            *args,
            total_hits=total_hits,
            user_input=user_input,
            page=page,
            total_pages=total_pages,
            clusters_count=clusters_count,
            clusters=clusters,
            page_size=page_size,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from newscatcherapi_client.model.cluster import Cluster
