# coding: utf-8

"""
    NewsCatcher-V3 Production API

    <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

    The version of the OpenAPI document: 3.2.16
    Contact: maksym@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from newscatcherapi_client.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from newscatcherapi_client.api_response import AsyncGeneratorResponse
from newscatcherapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from newscatcherapi_client import schemas  # noqa: F401

from newscatcherapi_client.model.source_response import SourceResponse as SourceResponseSchema
from newscatcherapi_client.model.http_validation_error import HTTPValidationError as HTTPValidationErrorSchema
from newscatcherapi_client.model.sources_request import SourcesRequest as SourcesRequestSchema

from newscatcherapi_client.type.source_response import SourceResponse
from newscatcherapi_client.type.sources_request import SourcesRequest
from newscatcherapi_client.type.http_validation_error import HTTPValidationError

from ...api_client import Dictionary
from newscatcherapi_client.pydantic.source_response import SourceResponse as SourceResponsePydantic
from newscatcherapi_client.pydantic.sources_request import SourcesRequest as SourcesRequestPydantic
from newscatcherapi_client.pydantic.http_validation_error import HTTPValidationError as HTTPValidationErrorPydantic

# body param
SchemaForRequestBodyApplicationJson = SourcesRequestSchema


request_body_sources_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = SourceResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: SourceResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: SourceResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationErrorSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: HTTPValidationError


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: HTTPValidationError


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _post_mapped_args(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if lang is not None:
            _body["lang"] = lang
        if countries is not None:
            _body["countries"] = countries
        if predefined_sources is not None:
            _body["predefined_sources"] = predefined_sources
        if include_additional_info is not None:
            _body["include_additional_info"] = include_additional_info
        if from_rank is not None:
            _body["from_rank"] = from_rank
        if to_rank is not None:
            _body["to_rank"] = to_rank
        if source_name is not None:
            _body["source_name"] = source_name
        if source_url is not None:
            _body["source_url"] = source_url
        if is_news_domain is not None:
            _body["is_news_domain"] = is_news_domain
        if news_domain_type is not None:
            _body["news_domain_type"] = news_domain_type
        if news_type is not None:
            _body["news_type"] = news_type
        args.body = _body
        return args

    async def _apost_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        [Post] Search For Sources Request
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/sources',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_sources_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _post_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        [Post] Search For Sources Request
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/sources',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_sources_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class PostRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def apost(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._post_mapped_args(
            lang=lang,
            countries=countries,
            predefined_sources=predefined_sources,
            include_additional_info=include_additional_info,
            from_rank=from_rank,
            to_rank=to_rank,
            source_name=source_name,
            source_url=source_url,
            is_news_domain=is_news_domain,
            news_domain_type=news_domain_type,
            news_type=news_type,
        )
        return await self._apost_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """ This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing """
        args = self._post_mapped_args(
            lang=lang,
            countries=countries,
            predefined_sources=predefined_sources,
            include_additional_info=include_additional_info,
            from_rank=from_rank,
            to_rank=to_rank,
            source_name=source_name,
            source_url=source_url,
            is_news_domain=is_news_domain,
            news_domain_type=news_domain_type,
            news_type=news_type,
        )
        return self._post_oapg(
            body=args.body,
        )

class Post(BaseApi):

    async def apost(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        validate: bool = False,
        **kwargs,
    ) -> SourceResponsePydantic:
        raw_response = await self.raw.apost(
            lang=lang,
            countries=countries,
            predefined_sources=predefined_sources,
            include_additional_info=include_additional_info,
            from_rank=from_rank,
            to_rank=to_rank,
            source_name=source_name,
            source_url=source_url,
            is_news_domain=is_news_domain,
            news_domain_type=news_domain_type,
            news_type=news_type,
            **kwargs,
        )
        if validate:
            return SourceResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SourceResponsePydantic, raw_response.body)
    
    
    def post(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        validate: bool = False,
    ) -> SourceResponsePydantic:
        raw_response = self.raw.post(
            lang=lang,
            countries=countries,
            predefined_sources=predefined_sources,
            include_additional_info=include_additional_info,
            from_rank=from_rank,
            to_rank=to_rank,
            source_name=source_name,
            source_url=source_url,
            is_news_domain=is_news_domain,
            news_domain_type=news_domain_type,
            news_type=news_type,
        )
        if validate:
            return SourceResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SourceResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._post_mapped_args(
            lang=lang,
            countries=countries,
            predefined_sources=predefined_sources,
            include_additional_info=include_additional_info,
            from_rank=from_rank,
            to_rank=to_rank,
            source_name=source_name,
            source_url=source_url,
            is_news_domain=is_news_domain,
            news_domain_type=news_domain_type,
            news_type=news_type,
        )
        return await self._apost_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        lang: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        countries: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        predefined_sources: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        include_additional_info: typing.Optional[bool] = None,
        from_rank: typing.Optional[int] = None,
        to_rank: typing.Optional[int] = None,
        source_name: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        source_url: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        is_news_domain: typing.Optional[bool] = None,
        news_domain_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
        news_type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """ This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing """
        args = self._post_mapped_args(
            lang=lang,
            countries=countries,
            predefined_sources=predefined_sources,
            include_additional_info=include_additional_info,
            from_rank=from_rank,
            to_rank=to_rank,
            source_name=source_name,
            source_url=source_url,
            is_news_domain=is_news_domain,
            news_domain_type=news_domain_type,
            news_type=news_type,
        )
        return self._post_oapg(
            body=args.body,
        )

