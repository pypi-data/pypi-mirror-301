# coding: utf-8

"""
    MetaCopier API

    Explore the power of the MetaCopier API! Our RESTful API offers scalable and secure access to accounts, projects, and more. Get started quickly with authentication, explore endpoints, and access code samples in various languages.<br/><br/>All dates are in ISO 8601<br/><br/>This API is not designed for real-time communication purposes. For instance, continuously polling account information such as open positions every second is not recommended.<br/><br/>Our frontend uses this API, so you can look at the requests on our frontend for examples.

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SymbolMappingDTO(BaseModel):
    """
    SymbolMappingDTO
    """ # noqa: E501
    broker_from: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="This symbol mapping is only applied if the trade comes from a specific broker, for example, 'ICMarkets.*'. For all brokers, you can enter '.*' (this is a regex)", alias="brokerFrom")
    broker_to: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="This symbol mapping is only applied if the trade is copied to a specific broker, for example, 'ICMarkets.*'. For all brokers, you can enter '.*' (this is a regex)", alias="brokerTo")
    broker_to_suggestion: Optional[List[StrictStr]] = Field(default=None, description="This is read-only. The system attempts to automatically map symbols, but if there are multiple findings, they will be listed here. (This member is used only for the endpoint symbolMappings/current)", alias="brokerToSuggestion")
    var_from: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="Enter a symbol e.g. GBPUSD (is not a regex)", alias="from")
    id: Optional[StrictInt] = None
    priority: StrictInt = Field(description="The priority is ascending, which means that 0 has a higher priority than 1. Priority is always positive")
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId")
    to: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="Enter a symbol e.g. GBPEUR (is not a regex)")
    __properties: ClassVar[List[str]] = ["brokerFrom", "brokerTo", "brokerToSuggestion", "from", "id", "priority", "projectId", "to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolMappingDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "broker_to_suggestion",
            "id",
            "project_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolMappingDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brokerFrom": obj.get("brokerFrom"),
            "brokerTo": obj.get("brokerTo"),
            "brokerToSuggestion": obj.get("brokerToSuggestion"),
            "from": obj.get("from"),
            "id": obj.get("id"),
            "priority": obj.get("priority"),
            "projectId": obj.get("projectId"),
            "to": obj.get("to")
        })
        return _obj


