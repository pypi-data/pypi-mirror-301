# coding: utf-8

"""
    MetaCopier API

    Explore the power of the MetaCopier API! Our RESTful API offers scalable and secure access to accounts, projects, and more. Get started quickly with authentication, explore endpoints, and access code samples in various languages.<br/><br/>All dates are in ISO 8601<br/><br/>This API is not designed for real-time communication purposes. For instance, continuously polling account information such as open positions every second is not recommended.<br/><br/>Our frontend uses this API, so you can look at the requests on our frontend for examples.

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from metacopier_api.models.scale_type_dto import ScaleTypeDTO
from typing import Optional, Set
from typing_extensions import Self

class CopierDTO(BaseModel):
    """
    If you add a copier to a strategy, only the properties 'active', 'multiplier', and the feature 'FeatureCopierFilterDTO' are available. Copying is only allowed from an account; copying from one strategy to another strategy is not allowed.
    """ # noqa: E501
    active: Optional[StrictBool] = True
    copy_stop_loss: Optional[StrictBool] = Field(default=True, description="If the copier belongs to a strategy, this setting will be ignored. For DXtrade/TradeLocker is not supported.", alias="copyStopLoss")
    copy_take_profit: Optional[StrictBool] = Field(default=True, description="If the copier belongs to a strategy, this setting will be ignored. For DXtrade/TradeLocker is not supported.", alias="copyTakeProfit")
    fix_master_balance_and_equity: Optional[StrictInt] = Field(default=0, description="Set the master balance and equity to the specified value. A value of 0 means deactivated. If set to 1000, the lot size calculation for the slave account will use 1000 as the master balance/equity.  If the copier belongs to a strategy, this setting will be ignored.", alias="fixMasterBalanceAndEquity")
    fixed_lot_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.01, description="Set the lot size to a specific value, only applicable when the scaleType is set to '3' (Fixed lot size).  If the copier belongs to a strategy, this setting will be ignored.", alias="fixedLotSize")
    force_min_trade: Optional[StrictBool] = Field(default=True, description="If set to true, when the calculated lot size is for example 0.005, it will be adjusted to the minimum size of the symbol. If set to false, the trade will not be executed. If the copier belongs to a strategy, this setting will be ignored.", alias="forceMinTrade")
    from_account_alias: Optional[StrictStr] = Field(default=None, alias="fromAccountAlias")
    from_account_id: Optional[StrictStr] = Field(default=None, description="You have to set it during resource creation, after that, it is only read-only", alias="fromAccountId")
    from_strategy_id: Optional[StrictStr] = Field(default=None, description="You have to set it during resource creation, after that, it is only read-only", alias="fromStrategyId")
    from_strategy_name: Optional[StrictStr] = Field(default=None, alias="fromStrategyName")
    id: Optional[StrictStr] = None
    martingale_strategy: Optional[StrictBool] = Field(default=False, description="Adjust the lot size based on the Martingale multiplier. If there is a significant difference in balance/equity between the master and slave accounts, the lot size on the slave account may be rounded down. For example, if trades of 0.02 and 0.04 lots are placed on the master account (balance 4000 USD), a standard copier would open 0.01 and 0.01 lots on the slave account (balance 1000 USD - which is incorrect). However, if this option is activated, it will open 0.1 and 0.2 lots. Default is false.  If the copier belongs to a strategy, this setting will be ignored.", alias="martingaleStrategy")
    max_lot_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Sets the maximum lot size for each position. If a position exceeds this size, it will be adjusted to this maximum limit. A value of 0 means deactivated.", alias="maxLotSize")
    max_open_positions: Optional[StrictInt] = Field(default=0, description="Limits the maximum number of open positions the copier can maintain at any given time. If the limit is reached, new positions will be skipped until existing positions are closed. A value of 0 means the feature is deactivated.", alias="maxOpenPositions")
    max_slippage: Optional[StrictInt] = Field(default=0, description="Set the slippage (deviation) in points. A value of 0 means deactivated. For scalping strategies with a close take profit, it's recommended to set the value low, for example, 1-3 points (10 points = 1 pip). A common value is 20. A value of 0 means deactivated (Trade is always executed at actual price - recommended if you use martingale/hedging/grid). If the copier belongs to a strategy, this setting will be ignored.", alias="maxSlippage")
    maximum_lot: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="When enabled, the total lot size of all open positions (related to this copier) will not exceed this value, new positions will be skipped until existing positions are closed. A value of 0 means deactivated.", alias="maximumLot")
    multiplier: Optional[Union[Annotated[float, Field(le=999.999, strict=True, ge=0.001)], Annotated[int, Field(le=999, strict=True, ge=1)]]] = Field(default=1.0, description="Set the multiplier. Default is 1.000")
    open_retry: Optional[StrictBool] = Field(default=False, description="If enabled, the retry mechanism activates when a broker rejects the request or fails to respond. If set to false, the request is only sent once.", alias="openRetry")
    reverse: Optional[StrictBool] = Field(default=False, description="If enabled, the order direction is reversed. Useful for trading strategies that require inverse operations.")
    scale_type: Optional[ScaleTypeDTO] = Field(default=None, alias="scaleType")
    skip_pending_orders: Optional[StrictBool] = Field(default=True, description="This setting allows traders to choose whether or not to replicate pending orders (orders that have not yet been executed). Skipping pending orders is highly recommended. By default, this option is blocked. If you are an expert trader, please contact us to unlock this option. If the copier belongs to a strategy, this setting will be ignored. For DXtrade/TradeLocker is not supported.", alias="skipPendingOrders")
    to_account_id: Optional[StrictStr] = Field(default=None, description="You have to set it during resource creation, after that, it is only read-only", alias="toAccountId")
    to_strategy_id: Optional[StrictStr] = Field(default=None, description="You have to set it during resource creation, after that, it is only read-only", alias="toStrategyId")
    __properties: ClassVar[List[str]] = ["active", "copyStopLoss", "copyTakeProfit", "fixMasterBalanceAndEquity", "fixedLotSize", "forceMinTrade", "fromAccountAlias", "fromAccountId", "fromStrategyId", "fromStrategyName", "id", "martingaleStrategy", "maxLotSize", "maxOpenPositions", "maxSlippage", "maximumLot", "multiplier", "openRetry", "reverse", "scaleType", "skipPendingOrders", "toAccountId", "toStrategyId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopierDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "from_account_alias",
            "from_strategy_name",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scale_type
        if self.scale_type:
            _dict['scaleType'] = self.scale_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopierDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active") if obj.get("active") is not None else True,
            "copyStopLoss": obj.get("copyStopLoss") if obj.get("copyStopLoss") is not None else True,
            "copyTakeProfit": obj.get("copyTakeProfit") if obj.get("copyTakeProfit") is not None else True,
            "fixMasterBalanceAndEquity": obj.get("fixMasterBalanceAndEquity") if obj.get("fixMasterBalanceAndEquity") is not None else 0,
            "fixedLotSize": obj.get("fixedLotSize") if obj.get("fixedLotSize") is not None else 0.01,
            "forceMinTrade": obj.get("forceMinTrade") if obj.get("forceMinTrade") is not None else True,
            "fromAccountAlias": obj.get("fromAccountAlias"),
            "fromAccountId": obj.get("fromAccountId"),
            "fromStrategyId": obj.get("fromStrategyId"),
            "fromStrategyName": obj.get("fromStrategyName"),
            "id": obj.get("id"),
            "martingaleStrategy": obj.get("martingaleStrategy") if obj.get("martingaleStrategy") is not None else False,
            "maxLotSize": obj.get("maxLotSize") if obj.get("maxLotSize") is not None else 0.0,
            "maxOpenPositions": obj.get("maxOpenPositions") if obj.get("maxOpenPositions") is not None else 0,
            "maxSlippage": obj.get("maxSlippage") if obj.get("maxSlippage") is not None else 0,
            "maximumLot": obj.get("maximumLot") if obj.get("maximumLot") is not None else 0.0,
            "multiplier": obj.get("multiplier") if obj.get("multiplier") is not None else 1.0,
            "openRetry": obj.get("openRetry") if obj.get("openRetry") is not None else False,
            "reverse": obj.get("reverse") if obj.get("reverse") is not None else False,
            "scaleType": ScaleTypeDTO.from_dict(obj["scaleType"]) if obj.get("scaleType") is not None else None,
            "skipPendingOrders": obj.get("skipPendingOrders") if obj.get("skipPendingOrders") is not None else True,
            "toAccountId": obj.get("toAccountId"),
            "toStrategyId": obj.get("toStrategyId")
        })
        return _obj


