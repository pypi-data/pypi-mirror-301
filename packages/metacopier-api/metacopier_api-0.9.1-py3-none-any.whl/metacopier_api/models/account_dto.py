# coding: utf-8

"""
    MetaCopier API

    Explore the power of the MetaCopier API! Our RESTful API offers scalable and secure access to accounts, projects, and more. Get started quickly with authentication, explore endpoints, and access code samples in various languages.<br/><br/>All dates are in ISO 8601<br/><br/>This API is not designed for real-time communication purposes. For instance, continuously polling account information such as open positions every second is not recommended.<br/><br/>Our frontend uses this API, so you can look at the requests on our frontend for examples.

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from metacopier_api.models.account_information_dto import AccountInformationDTO
from metacopier_api.models.account_status_dto import AccountStatusDTO
from metacopier_api.models.account_type_dto import AccountTypeDTO
from metacopier_api.models.region_dto import RegionDTO
from typing import Optional, Set
from typing_extensions import Self

class AccountDTO(BaseModel):
    """
    AccountDTO
    """ # noqa: E501
    account_information: Optional[AccountInformationDTO] = Field(default=None, alias="accountInformation")
    alias: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = None
    compatibility_mode: Optional[StrictBool] = Field(default=None, alias="compatibilityMode")
    created: Optional[datetime] = Field(default=None, description="ISO 8601")
    deleted: Optional[datetime] = Field(default=None, description="ISO 8601")
    id: Optional[StrictStr] = None
    login_account_number: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(alias="loginAccountNumber")
    login_account_password: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(alias="loginAccountPassword")
    login_server: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="Enter the server address, for example, ICMarketsSC-MT5-4 for MetaTrader, or the URL such as https://dxtrade.instantfunding.io for DXtrade. For CTrader, live.ctraderapi.com:5035 or demo.ctraderapi.com:5035. For TradeLocker, live.tradelocker.com or demo.tradelocker.com.", alias="loginServer")
    region: RegionDTO
    status: Optional[AccountStatusDTO] = None
    status_message: Optional[StrictStr] = Field(default=None, alias="statusMessage")
    type: AccountTypeDTO
    __properties: ClassVar[List[str]] = ["accountInformation", "alias", "compatibilityMode", "created", "deleted", "id", "loginAccountNumber", "loginAccountPassword", "loginServer", "region", "status", "statusMessage", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "compatibility_mode",
            "created",
            "deleted",
            "id",
            "status_message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_information
        if self.account_information:
            _dict['accountInformation'] = self.account_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountInformation": AccountInformationDTO.from_dict(obj["accountInformation"]) if obj.get("accountInformation") is not None else None,
            "alias": obj.get("alias"),
            "compatibilityMode": obj.get("compatibilityMode"),
            "created": obj.get("created"),
            "deleted": obj.get("deleted"),
            "id": obj.get("id"),
            "loginAccountNumber": obj.get("loginAccountNumber"),
            "loginAccountPassword": obj.get("loginAccountPassword"),
            "loginServer": obj.get("loginServer"),
            "region": RegionDTO.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "status": AccountStatusDTO.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "statusMessage": obj.get("statusMessage"),
            "type": AccountTypeDTO.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj


