# coding: utf-8

"""
    MetaCopier API

    Explore the power of the MetaCopier API! Our RESTful API offers scalable and secure access to accounts, projects, and more. Get started quickly with authentication, explore endpoints, and access code samples in various languages.<br/><br/>All dates are in ISO 8601<br/><br/>This API is not designed for real-time communication purposes. For instance, continuously polling account information such as open positions every second is not recommended.<br/><br/>Our frontend uses this API, so you can look at the requests on our frontend for examples.

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metacopier_api.models.risk_limit_status_dto import RiskLimitStatusDTO
from typing import Optional, Set
from typing_extensions import Self

class AccountInformationDTO(BaseModel):
    """
    Is synced every minute)
    """ # noqa: E501
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    broke_time_offset_to_utc: Optional[StrictInt] = Field(default=None, alias="brokeTimeOffsetToUtc")
    compatibility_mode: Optional[StrictBool] = Field(default=None, description="The compatibility mode is active", alias="compatibilityMode")
    connected: Optional[StrictBool] = None
    currency: Optional[StrictStr] = None
    drawdown: Optional[Union[StrictFloat, StrictInt]] = None
    equity: Optional[Union[StrictFloat, StrictInt]] = None
    fallback_mode: Optional[StrictBool] = Field(default=None, description="The fallback mode is active (This means something is not working properly, and the system switches to the fallback mode)", alias="fallbackMode")
    is_investor_password: Optional[StrictBool] = Field(default=None, alias="isInvestorPassword")
    latency_in_ms: Optional[StrictInt] = Field(default=None, description="Latency to the broker's access server", alias="latencyInMs")
    risk_limits_status: Optional[List[RiskLimitStatusDTO]] = Field(default=None, alias="riskLimitsStatus")
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["balance", "brokeTimeOffsetToUtc", "compatibilityMode", "connected", "currency", "drawdown", "equity", "fallbackMode", "isInvestorPassword", "latencyInMs", "riskLimitsStatus", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountInformationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "balance",
            "broke_time_offset_to_utc",
            "compatibility_mode",
            "connected",
            "currency",
            "drawdown",
            "equity",
            "fallback_mode",
            "is_investor_password",
            "latency_in_ms",
            "risk_limits_status",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in risk_limits_status (list)
        _items = []
        if self.risk_limits_status:
            for _item_risk_limits_status in self.risk_limits_status:
                if _item_risk_limits_status:
                    _items.append(_item_risk_limits_status.to_dict())
            _dict['riskLimitsStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountInformationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balance": obj.get("balance"),
            "brokeTimeOffsetToUtc": obj.get("brokeTimeOffsetToUtc"),
            "compatibilityMode": obj.get("compatibilityMode"),
            "connected": obj.get("connected"),
            "currency": obj.get("currency"),
            "drawdown": obj.get("drawdown"),
            "equity": obj.get("equity"),
            "fallbackMode": obj.get("fallbackMode"),
            "isInvestorPassword": obj.get("isInvestorPassword"),
            "latencyInMs": obj.get("latencyInMs"),
            "riskLimitsStatus": [RiskLimitStatusDTO.from_dict(_item) for _item in obj["riskLimitsStatus"]] if obj.get("riskLimitsStatus") is not None else None,
            "status": obj.get("status")
        })
        return _obj


