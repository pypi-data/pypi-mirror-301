# coding: utf-8

"""
    MetaCopier API

    Explore the power of the MetaCopier API! Our RESTful API offers scalable and secure access to accounts, projects, and more. Get started quickly with authentication, explore endpoints, and access code samples in various languages.<br/><br/>All dates are in ISO 8601<br/><br/>This API is not designed for real-time communication purposes. For instance, continuously polling account information such as open positions every second is not recommended.<br/><br/>Our frontend uses this API, so you can look at the requests on our frontend for examples.

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PositionDTO(BaseModel):
    """
    PositionDTO
    """ # noqa: E501
    broker_time_close: Optional[StrictStr] = Field(default=None, description="Original time string from the broker", alias="brokerTimeClose")
    broker_time_open: Optional[StrictStr] = Field(default=None, description="Original time string from the broker", alias="brokerTimeOpen")
    close_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="closePrice")
    close_time: Optional[datetime] = Field(default=None, description="ISO 8601", alias="closeTime")
    comment: Optional[StrictStr] = None
    commission: Optional[Union[StrictFloat, StrictInt]] = None
    deal_type: Optional[StrictStr] = Field(default=None, alias="dealType")
    id: Optional[StrictStr] = None
    magic_number: Optional[StrictStr] = Field(default=None, alias="magicNumber")
    open_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="openPrice")
    open_time: Optional[datetime] = Field(default=None, description="ISO 8601", alias="openTime")
    order_type: Optional[StrictStr] = Field(default=None, alias="orderType")
    placed_type: Optional[StrictStr] = Field(default=None, alias="placedType")
    profit: Optional[Union[StrictFloat, StrictInt]] = None
    request_id: Optional[StrictStr] = Field(default=None, alias="requestId")
    state: Optional[StrictStr] = None
    stop_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="stopLoss")
    swap: Optional[Union[StrictFloat, StrictInt]] = None
    symbol: Optional[StrictStr] = None
    take_profit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="takeProfit")
    volume: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["brokerTimeClose", "brokerTimeOpen", "closePrice", "closeTime", "comment", "commission", "dealType", "id", "magicNumber", "openPrice", "openTime", "orderType", "placedType", "profit", "requestId", "state", "stopLoss", "swap", "symbol", "takeProfit", "volume"]

    @field_validator('deal_type')
    def deal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DealBuy', 'DealSell', 'Balance', 'Credit', 'Charge', 'Correction', 'Bonus', 'Commission', 'DailyCommission', 'MonthlyCommission', 'DailyAgentCommission', 'MonthlyAgentCommission', 'InterestRate', 'CanceledBuy', 'CanceledSell', 'Dividend', 'Tax']):
            raise ValueError("must be one of enum values ('DealBuy', 'DealSell', 'Balance', 'Credit', 'Charge', 'Correction', 'Bonus', 'Commission', 'DailyCommission', 'MonthlyCommission', 'DailyAgentCommission', 'MonthlyAgentCommission', 'InterestRate', 'CanceledBuy', 'CanceledSell', 'Dividend', 'Tax')")
        return value

    @field_validator('order_type')
    def order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Buy', 'Sell', 'BuyLimit', 'SellLimit', 'BuyStop', 'SellStop']):
            raise ValueError("must be one of enum values ('Buy', 'Sell', 'BuyLimit', 'SellLimit', 'BuyStop', 'SellStop')")
        return value

    @field_validator('placed_type')
    def placed_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Manually', 'Mobile', 'Web', 'ByExpert', 'OnSL', 'OnTP', 'OnStopOut', 'OnRollover', 'OnVmargin', 'OnSplit']):
            raise ValueError("must be one of enum values ('Manually', 'Mobile', 'Web', 'ByExpert', 'OnSL', 'OnTP', 'OnStopOut', 'OnRollover', 'OnVmargin', 'OnSplit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PositionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "broker_time_close",
            "broker_time_open",
            "close_price",
            "close_time",
            "comment",
            "commission",
            "deal_type",
            "id",
            "magic_number",
            "open_price",
            "open_time",
            "order_type",
            "placed_type",
            "profit",
            "request_id",
            "state",
            "stop_loss",
            "swap",
            "symbol",
            "take_profit",
            "volume",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PositionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brokerTimeClose": obj.get("brokerTimeClose"),
            "brokerTimeOpen": obj.get("brokerTimeOpen"),
            "closePrice": obj.get("closePrice"),
            "closeTime": obj.get("closeTime"),
            "comment": obj.get("comment"),
            "commission": obj.get("commission"),
            "dealType": obj.get("dealType"),
            "id": obj.get("id"),
            "magicNumber": obj.get("magicNumber"),
            "openPrice": obj.get("openPrice"),
            "openTime": obj.get("openTime"),
            "orderType": obj.get("orderType"),
            "placedType": obj.get("placedType"),
            "profit": obj.get("profit"),
            "requestId": obj.get("requestId"),
            "state": obj.get("state"),
            "stopLoss": obj.get("stopLoss"),
            "swap": obj.get("swap"),
            "symbol": obj.get("symbol"),
            "takeProfit": obj.get("takeProfit"),
            "volume": obj.get("volume")
        })
        return _obj


