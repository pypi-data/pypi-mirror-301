# coding: utf-8

"""
    MetaCopier API

    Explore the power of the MetaCopier API! Our RESTful API offers scalable and secure access to accounts, projects, and more. Get started quickly with authentication, explore endpoints, and access code samples in various languages.<br/><br/>All dates are in ISO 8601<br/><br/>This API is not designed for real-time communication purposes. For instance, continuously polling account information such as open positions every second is not recommended.<br/><br/>Our frontend uses this API, so you can look at the requests on our frontend for examples.

    The version of the OpenAPI document: 0.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PositionRequestDTO(BaseModel):
    """
    PositionRequestDTO
    """ # noqa: E501
    comment: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=20)]] = Field(default=None, description="An 'API|YOUR_REQUEST_ID|' is prepended to your comment for tracking purpose")
    magic_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=19)]] = Field(default=None, description="At the moment, only numbers as string are supported", alias="magicNumber")
    open_price: Union[StrictFloat, StrictInt] = Field(description="Used for pending orders (buy limit, stop limit, ...). For buy or sell you can enter 0.", alias="openPrice")
    order_type: StrictStr = Field(alias="orderType")
    request_id: Annotated[int, Field(le=999, strict=True)] = Field(description="A client request ID to avoid the request being executed multiple times due to network or client errors. The IDs start at 0 and increment up to 999, then begin again at 0.", alias="requestId")
    stop_loss: Union[StrictFloat, StrictInt] = Field(description="A value of 0 means no stop loss", alias="stopLoss")
    symbol: Annotated[str, Field(min_length=0, strict=True, max_length=20)]
    take_profit: Union[StrictFloat, StrictInt] = Field(description="A value of 0 means no take profit", alias="takeProfit")
    volume: Union[StrictFloat, StrictInt] = Field(description="In lots. The volume will be automatically adjusted according to the symbol data.")
    __properties: ClassVar[List[str]] = ["comment", "magicNumber", "openPrice", "orderType", "requestId", "stopLoss", "symbol", "takeProfit", "volume"]

    @field_validator('order_type')
    def order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Buy', 'Sell', 'BuyLimit', 'SellLimit', 'BuyStop', 'SellStop']):
            raise ValueError("must be one of enum values ('Buy', 'Sell', 'BuyLimit', 'SellLimit', 'BuyStop', 'SellStop')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PositionRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PositionRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "magicNumber": obj.get("magicNumber"),
            "openPrice": obj.get("openPrice") if obj.get("openPrice") is not None else 0,
            "orderType": obj.get("orderType"),
            "requestId": obj.get("requestId"),
            "stopLoss": obj.get("stopLoss") if obj.get("stopLoss") is not None else 0,
            "symbol": obj.get("symbol"),
            "takeProfit": obj.get("takeProfit") if obj.get("takeProfit") is not None else 0,
            "volume": obj.get("volume")
        })
        return _obj


