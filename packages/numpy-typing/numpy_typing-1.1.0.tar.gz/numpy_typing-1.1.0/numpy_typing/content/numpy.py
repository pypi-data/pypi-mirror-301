"""Numpy overload with type hinting"""

from . import typing as np
from typing import overload, TypeVar, Any


T = TypeVar('T')
T1 = TypeVar('T1')
T2 = TypeVar('T2')
T3 = TypeVar('T3')
T4 = TypeVar('T4')


# |====================================================================================================================
# | Numpy functions
# |====================================================================================================================


def concatenate(arrays: "list[T]|tuple[T,...]",
                axis: int = None,
                out: T = None, *,
                dtype:Any = None,
                casting:str = None) -> T: ...


def sin(a: T, *args, **kwargs) -> T: ...
def cos(a: T, *args, **kwargs) -> T: ...
def tan(a: T, *args, **kwargs) -> T: ...
def arcsin(a: T, *args, **kwargs) -> T: ...
def asin(a: T, *args, **kwargs) -> T: ...
def arccos(a: T, *args, **kwargs) -> T: ...
def acos(a: T, *args, **kwargs) -> T: ...
def arctan(a: T, *args, **kwargs) -> T: ...
def atan(a: T, *args, **kwargs) -> T: ...
def hypot(a: T, b:  T, *args, **kwargs) -> T: ...
def arctan2(a: T, b: T, *args, **kwargs) -> T: ...
def atan2(a: T, b: T, *args, **kwargs) -> T: ...
def degrees(a: T, *args, **kwargs) -> T: ...
def radians(a: T, *args, **kwargs) -> T: ...
def unwrap(p: T, *args, **kwargs) -> T: ...
def deg2rad(a: T, *args, **kwargs) -> T: ...
def rad2deg(a: T, *args, **kwargs) -> T: ...

def sinh(a: T, *args, **kwargs) -> T: ...
def cosh(a: T, *args, **kwargs) -> T: ...
def tanh(a: T, *args, **kwargs) -> T: ...
def arcsinh(a: T, *args, **kwargs) -> T: ...
def asinh(a: T, *args, **kwargs) -> T: ...
def arccosh(a: T, *args, **kwargs) -> T: ...
def acosh(a: T, *args, **kwargs) -> T: ...
def arctanh(a: T, *args, **kwargs) -> T: ...
def atanh(a: T, *args, **kwargs) -> T: ...

def round(a: T, decimals: int = 0, *args, **kwargs) -> T: ...
def around(a: T, decimals: int = 0, *args, **kwargs) -> T: ...
def rint(a: T, *args, **kwargs) -> T: ...
def fix(a: T, *args, **kwargs) -> T: ...
def floor(a: T, *args, **kwargs) -> T: ...
def ceil(a: T, *args, **kwargs) -> T: ...
def trunc(a: T, *args, **kwargs) -> T: ...

def prod(a: T, *args, **kwargs) -> T: ...
@overload
def prod(a: np.array_1d[T, T1], axis: int = None, *args, **kwargs) -> T: ...
@overload
def prod(a: np.array_2d[T, T1, T2], axis:int = None, *args, **kwargs) -> np.array_1d[T, T2]: ...
@overload
def prod(a: np.array_3d[T, T1, T2, T3], axis:int = None, *args, **kwargs) -> np.array_2d[T, T3, T2]: ...
@overload
def prod(a: np.array_4d[T, T1, T2, T3, T4], axis:int = None, *args, **kwargs) -> np.array_3d[T, T4, T3, T2]: ...

def sum(a: T, *args, **kwargs) -> T: ...
@overload
def sum(a: np.array_1d[T, T1], axis: int = None, *args, **kwargs) -> T: ...
@overload
def sum(a: np.array_2d[T, T1, T2], axis:int = None, *args, **kwargs) -> np.array_1d[T, T2]: ...
@overload
def sum(a: np.array_3d[T, T1, T2, T3], axis:int = None, *args, **kwargs) -> np.array_2d[T, T3, T2]: ...
@overload
def sum(a: np.array_4d[T, T1, T2, T3, T4], axis:int = None, *args, **kwargs) -> np.array_3d[T, T4, T3, T2]: ...


def diff(a: T, *args, **kwargs) -> T: ...
@overload
def diff(a: np.array_1d[T, T1], axis: int = None, *args, **kwargs) -> T: ...
@overload
def diff(a: np.array_2d[T, T1, T2], axis:int = None, *args, **kwargs) -> np.array_1d[T, T2]: ...
@overload
def diff(a: np.array_3d[T, T1, T2, T3], axis:int = None, *args, **kwargs) -> np.array_2d[T, T3, T2]: ...
@overload
def diff(a: np.array_4d[T, T1, T2, T3, T4], axis:int = None, *args, **kwargs) -> np.array_3d[T, T4, T3, T2]: ...


def exp(a: T, *args, **kwargs) -> T: ...
def expm1(a: T, *args, **kwargs) -> T: ...
def exp2(a: T, *args, **kwargs) -> T: ...
def log(a: T, *args, **kwargs) -> T: ...
def log10(a: T, *args, **kwargs) -> T: ...
def log2(a: T, *args, **kwargs) -> T: ...
def log1p(a: T, *args, **kwargs) -> T: ...
def logaddexp(a: T, b: T, *args, **kwargs) -> T: ...
def logaddexp2(a: T, b: T, *args, **kwargs) -> T: ...

def lcm(a: T, b: T, *args, **kwargs) -> T: ...
def gcd(a: T, b: T, *args, **kwargs) -> T: ...

def maximum(a: T, b: T, *args, **kwargs) -> T: ...
def minimum(a: T, b: T, *args, **kwargs) -> T: ...

def max(a: T, *args, **kwargs) -> T: ...
@overload
def max(a: np.array_1d[T, T1], axis: int = None, *args, **kwargs) -> T: ...
@overload
def max(a: np.array_2d[T, T1, T2], axis: int = None, *args, **kwargs) -> np.array_1d[T, T2]: ...
@overload
def max(a: np.array_3d[T, T1, T2, T3], axis: int = None, *args, **kwargs) -> np.array_2d[T, T3, T2]: ...
@overload
def max(a: np.array_4d[T, T1, T2, T3, T4], axis: int = None, *args, **kwargs) -> np.array_3d[T, T4, T3, T2]: ...

def min(a: T, *args, **kwargs) -> T: ...
@overload
def min(a: np.array_1d[T, T1], axis: int = None, *args, **kwargs) -> T: ...
@overload
def min(a: np.array_2d[T, T1, T2], axis: int = None, *args, **kwargs) -> np.array_1d[T, T2]: ...
@overload
def min(a: np.array_3d[T, T1, T2, T3], axis: int = None, *args, **kwargs) -> np.array_2d[T, T3, T2]: ...
@overload
def min(a: np.array_4d[T, T1, T2, T3, T4], axis: int = None, *args, **kwargs) -> np.array_3d[T, T4, T3, T2]: ...


def convolve(a: T, v: T, mode: str = 'full', *args, **kwargs) -> T: ...
def clip(a: T, a_min: T, a_max: T, *args, **kwargs) -> T: ...
def sqrt(a: T, *args, **kwargs) -> T: ...
def square(a: T, *args, **kwargs) -> T: ...
def absolute(a: T, *args, **kwargs) -> T: ...
def fabs(a: T, *args, **kwargs) -> T: ...
def abs(a: T) -> T: ...
def sign(a: T, *args, **kwargs) -> T: ...
def heaviside(x1: T, x2: T, *args, **kwargs) -> T: ...
def nan_to_num(a: T, *args, **kwargs) -> T: ...
def real_if_close(a: T, *args, **kwargs) -> T: ...
def interp(a: T, xp: T, fp: T, *args, **kwargs) -> T: ...
def bitwise_count(a: T, *args, **kwargs) -> T: ...





from numpy import *

max = amax
min = amin
add = add
abs = absolute




