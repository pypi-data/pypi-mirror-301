[build-system]
requires = ["setuptools_scm<8.2", "setuptools>=72.1,<74", "wheel"]
# build-backend = "setuptools.build_meta"

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
force-exclude = '''
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true

[tool.pytest.ini_options]
junit_family = "xunit1"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError()",
    "raise SPSDKErrorImplemented()",
    "safe_main()",
    "sys.exit(main())",
]

[tool.coverage.run]
relative_files = true

[tool.pydocstyle]
convention = "google"
add_ignore = "D105,D301"
match = '(?!test_|__version__).*\.py'

[tool.setuptools_scm]
version_file = "spsdk/__version__.py"
version_scheme = "spsdk.versioning:run"
git_describe_command = 'git describe --tags --long --match "v[0-9].*"'

[tool.py_headers]
excluded_files = ["docs/conf.py", "spsdk/__version__.py"]

[tool.copyright]
excluded_files = [
    "docs/conf.py",
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    "spsdk/__version__.py",
]


[tool.gitcov]
skip-files = ""
repo-path = "."
module = "spsdk"
coverage-report = "reports/coverage.xml"
coverage-cutoff = 0.8
parent-branch = "origin/master"
include-merges = 0
verbose = 0
debug = 0
full-file-test = 0

[tool.checker_jupiter]
[tool.checker_jupiter.exceptions]
"examples/init_notebook.ipynb" = [2]
"examples/general/sdps.ipynb" = [1]
"examples/imx93/imx93_ahab_uboot.ipynb" = [10]
"examples/imx93/imx93_signed_ahab_uboot.ipynb" = [10]

[tool.checker_dependencies]
root_package = "spsdk"
[tool.checker_dependencies.spdx]

"Apache-2.0" = [
    "Apache 2.0",
    "Apache-2.0 License",
    "Apache Software License 2.0",
    "Apache License, Version 2.0",
    "Apache License 2.0",
    "Apache Software License",
]
"BSD-2-Clause" = ["BSD 2-Clause License"]
"BSD-3-Clause" = [
    "BSD License",
    "BSD 3-Clause",
    "BSD (3 clause)",
    "BSD 3-Clause License",
    "Modified BSD License",
]
"MIT" = ["MIT License", "MIT license"]
"MPL-2.0" = ["MPL 2.0", "Mozilla Public License 2.0 (MPL 2.0)"]
"NLPL" = ["Public domain", "Public Domain"]
"PSF-2.0" = ["PSF", "PSFL", "Python Software Foundation License"]
"LGPL-3.0" = []
"LGPL-2.0" = ["GPL-2.0-or-later"]
"LGPL-2.1" = ["LGPL-2.1-or-later"]
"ISC" = ["ISC license"]

[tool.nxp_codecheck]
# Reports output directory
git_parent_branch = "origin/master"
output_directory = "reports"
default_check_paths = ["spsdk", "tools"]
jupyter_check_paths = ["examples"]

# *********************************** Checker list ***********************************
[[tool.nxp_codecheck.checkers]]
name = "PYTEST"
method = "check_pytest"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
kwargs = { disable_xdist = false }

[[tool.nxp_codecheck.checkers]]
name = "GITCOV"
method = "check_gitcov"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = true
dependencies = ["PYTEST"]
[[tool.nxp_codecheck.checkers]]
name = "PYLINT"
method = "check_pylint"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
[[tool.nxp_codecheck.checkers]]
name = "MYPY"
method = "check_mypy"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
[[tool.nxp_codecheck.checkers]]
name = "DEPENDENCIES"
method = "check_dependencies"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
fixer = "fix_dependencies"
[[tool.nxp_codecheck.checkers]]
name = "PYDOCSTYLE"
method = "check_pydocstyle"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
[[tool.nxp_codecheck.checkers]]
name = "RADON_C"
method = "check_radon"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = true
kwargs = { min_rank = "C" }
[[tool.nxp_codecheck.checkers]]
name = "RADON_D"
method = "check_radon"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
kwargs = { min_rank = "D" }
[[tool.nxp_codecheck.checkers]]
name = "BLACK"
method = "check_black"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = []
fixer = "fix_black"
[[tool.nxp_codecheck.checkers]]
name = "ISORT"
method = "check_isort"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = []
fixer = "fix_isort"
[[tool.nxp_codecheck.checkers]]
name = "COPYRIGHT"
method = "check_copyright_year"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = []
fixer = "fix_copyright_year"
[[tool.nxp_codecheck.checkers]]
name = "PY_HEADERS"
method = "check_py_file_headers"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = []
fixer = "fix_py_file_headers"
[[tool.nxp_codecheck.checkers]]
name = "CYCLIC"
method = "check_cyclic_imports"
check_paths = ["spsdk"]
info_only = false
dependencies = []
[[tool.nxp_codecheck.checkers]]
name = "BANDIT"
info_only = true
[[tool.nxp_codecheck.checkers]]
name = "CSPELL"
method = "check_cspell"
check_paths = ["**/*.{txt,py,md,yaml,rst,json}"]
info_only = true
# ************************** Jupyter notebooks checks *********************************
[[tool.nxp_codecheck.checkers]]
name = "BLACK_NB"
method = "check_black_nb"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = ["BLACK", "MYPY", "ISORT"]
inherit_failure = false
fixer = "fix_black_nb"
jyputer_notebook_checker = true
[[tool.nxp_codecheck.checkers]]
name = "ISORT_NB"
method = "check_isort_nb"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = ["BLACK_NB"]
inherit_failure = false
fixer = "fix_isort_nb"
jyputer_notebook_checker = true
[[tool.nxp_codecheck.checkers]]
name = "JUPYTER"
method = "check_jupyter_outputs"
# check_paths = [] # The default check paths could be overrides by local settings
info_only = false
dependencies = ["BLACK_NB", "ISORT_NB"]
inherit_failure = false
jyputer_notebook_checker = true

[tool.release-tools]

[tool.release-tools.docs]
install_hook = ['uv pip install ".[all]" -r docs/requirements.txt']
docs_directory = "docs"
# Disable JIRA upload due to artifacts size
disable_jira_upload = true

[tool.release-tools.clr]
install_hook = ['uv pip install ".[all]"']
check_directories = ["spsdk", "tests", "tools", "examples"]
excluded_files = ["spsdk/__version__.py"]

[tool.release-tools.scr]
scr_file = "SW_Content_Register_SPSDK.txt"

[tool.release-tools.testpypi]
test_cmd = "spsdk --version"

[tool.release-tools.test_artifacts_collector.jenkins_jobs]
spsdk_full_test_scope_macos = { artifact_regex = ".*results.xml"}
spsdk_full_test_scope_ubuntu = { artifact_regex = ".*results.xml"}
spsdk_full_test_scope_win10 = { artifact_regex = ".*results.xml"}
spsdk_full_test_scope_win11 = { artifact_regex = ".*results.xml"}

[tool.release-tools.blackduck.env]
PROTEX_PROJECT_ID = "c_spsdk_automation_19733"
PROTEX_TEMPLATE = "t_reportwithobligations_7215"

[tool.check-wheel-contents]
ignore = "W002" # Wheel contains duplicate files
