[tool.poetry]
name = "juice-core-uplink-api-client"
version = "0.2.8"
description = "A client library for accessing Juice Core Uplink API"
authors = ["Luca Penasa <luca.penasa@inaf.it>"]
license = "MIT"
readme = "README.md"

documentation = "https://JANUS-JUICE.github.io/juice-core-uplink-api-client"
homepage = "https://JANUS-JUICE.github.io/juice-core-uplink-api-client"
repository = "https://github.com/JANUS-JUICE/juice-core-uplink-api-client"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

packages = [
    { include = "juice_core", from = "src" },
    { include = "juice_core_uplink_api_client", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.10, <4.0"
pydantic = "^2.9.2"
httpx = "^0.27.2"
importlib-metadata = "^8.5.0"
pandas = "^2.2.3"
attrs = "^24.2.0"
merge-args = "^0.1.5"
loguru = "^0.7.2"

[tool.poetry.group.dev.dependencies]
mkdocstrings = { version = ">=0.23", extras = ["python"] }
mkdocs-material = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
pytest-sugar = "^1.0.0"
python-kacl = "*"
ruff = ">=0.2.0"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
style = "semver"

[tool.ruff]
target-version = "py310" # The lowest supported version

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "ANN",    # Type hints related, let mypy handle these.
    "ERA001", # allow commented-out code
    "D",      # Docstrings related, way too strict to our taste
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101", # "Use of `assert` detected"
    "ARG",  # "Unused function argument". Fixtures are often unused.
    "S105", # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.pytest.ini_options]
addopts = """\
    --cov juice_core \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 80
exclude_lines = ['if TYPE_CHECKING:', 'pragma: no cover']

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true                  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = true

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
# [[tool.mypy.overrides]]
# module = [
#  "my_unpyted_dependency1.*",
#  "my_unpyted_dependency2.*"
# ]
# ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false
