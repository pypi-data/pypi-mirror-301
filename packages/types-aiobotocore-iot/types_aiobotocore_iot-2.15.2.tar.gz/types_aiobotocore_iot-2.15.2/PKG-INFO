Metadata-Version: 2.1
Name: types-aiobotocore-iot
Version: 2.15.2
Summary: Type annotations for aiobotocore.IoT 2.15.2 service generated with mypy-boto3-builder 8.1.2
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iot/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore iot type-annotations botocore mypy typeshed autocomplete
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Stubs Only
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typing-extensions>=4.1.0; python_version < "3.12"

<a id="types-aiobotocore-iot"></a>

# types-aiobotocore-iot

[![PyPI - types-aiobotocore-iot](https://img.shields.io/pypi/v/types-aiobotocore-iot.svg?color=blue)](https://pypi.org/project/types-aiobotocore-iot)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-iot.svg?color=blue)](https://pypi.org/project/types-aiobotocore-iot)
[![Docs](https://img.shields.io/readthedocs/types-aiobotocore.svg?color=blue)](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iot/)
[![PyPI - Downloads](https://static.pepy.tech/badge/types-aiobotocore-iot)](https://pepy.tech/project/types-aiobotocore-iot)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.IoT 2.15.2](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iot.html#IoT)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 8.1.2](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-iot docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iot/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-iot](#types-aiobotocore-iot)
  - [How to install](#how-to-install)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Type definitions](#type-definitions)
  - [How it works](#how-it-works)
  - [What's new](#what's-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
  - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `IoT` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[iot]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[iot]'


# standalone installation
python -m pip install types-aiobotocore-iot
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-iot
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[iot]` in your environment:

```bash
python -m pip install 'types-aiobotocore[iot]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[iot]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[iot]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[iot]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[iot]` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[iot]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[iot]` in your environment:

```bash
python -m pip install 'types-aiobotocore[iot]'
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[iot]` in your environment:

```bash
python -m pip install 'types-aiobotocore[iot]'
```

Optionally, you can install `types-aiobotocore` to `typings` directory.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`IoTClient` provides annotations for `session.create_client("iot")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_iot import IoTClient

session = get_session()
async with session.create_client("iot") as client:
    client: IoTClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_iot.paginator` module contains type annotations for all
paginators.

```python
from aiobotocore.session import get_session

from types_aiobotocore_iot import IoTClient
from types_aiobotocore_iot.paginator import (
    GetBehaviorModelTrainingSummariesPaginator,
    ListActiveViolationsPaginator,
    ListAttachedPoliciesPaginator,
    ListAuditFindingsPaginator,
    ListAuditMitigationActionsExecutionsPaginator,
    ListAuditMitigationActionsTasksPaginator,
    ListAuditSuppressionsPaginator,
    ListAuditTasksPaginator,
    ListAuthorizersPaginator,
    ListBillingGroupsPaginator,
    ListCACertificatesPaginator,
    ListCertificatesPaginator,
    ListCertificatesByCAPaginator,
    ListCustomMetricsPaginator,
    ListDetectMitigationActionsExecutionsPaginator,
    ListDetectMitigationActionsTasksPaginator,
    ListDimensionsPaginator,
    ListDomainConfigurationsPaginator,
    ListFleetMetricsPaginator,
    ListIndicesPaginator,
    ListJobExecutionsForJobPaginator,
    ListJobExecutionsForThingPaginator,
    ListJobTemplatesPaginator,
    ListJobsPaginator,
    ListManagedJobTemplatesPaginator,
    ListMetricValuesPaginator,
    ListMitigationActionsPaginator,
    ListOTAUpdatesPaginator,
    ListOutgoingCertificatesPaginator,
    ListPackageVersionsPaginator,
    ListPackagesPaginator,
    ListPoliciesPaginator,
    ListPolicyPrincipalsPaginator,
    ListPrincipalPoliciesPaginator,
    ListPrincipalThingsPaginator,
    ListProvisioningTemplateVersionsPaginator,
    ListProvisioningTemplatesPaginator,
    ListRelatedResourcesForAuditFindingPaginator,
    ListRoleAliasesPaginator,
    ListSbomValidationResultsPaginator,
    ListScheduledAuditsPaginator,
    ListSecurityProfilesPaginator,
    ListSecurityProfilesForTargetPaginator,
    ListStreamsPaginator,
    ListTagsForResourcePaginator,
    ListTargetsForPolicyPaginator,
    ListTargetsForSecurityProfilePaginator,
    ListThingGroupsPaginator,
    ListThingGroupsForThingPaginator,
    ListThingPrincipalsPaginator,
    ListThingRegistrationTaskReportsPaginator,
    ListThingRegistrationTasksPaginator,
    ListThingTypesPaginator,
    ListThingsPaginator,
    ListThingsInBillingGroupPaginator,
    ListThingsInThingGroupPaginator,
    ListTopicRuleDestinationsPaginator,
    ListTopicRulesPaginator,
    ListV2LoggingLevelsPaginator,
    ListViolationEventsPaginator,
)

session = get_session()
async with session.create_client("iot") as client:
    client: IoTClient

    # Explicit type annotations are optional here
    # Types should be correctly discovered by mypy and IDEs
    get_behavior_model_training_summaries_paginator: GetBehaviorModelTrainingSummariesPaginator = (
        client.get_paginator("get_behavior_model_training_summaries")
    )
    list_active_violations_paginator: ListActiveViolationsPaginator = client.get_paginator(
        "list_active_violations"
    )
    list_attached_policies_paginator: ListAttachedPoliciesPaginator = client.get_paginator(
        "list_attached_policies"
    )
    list_audit_findings_paginator: ListAuditFindingsPaginator = client.get_paginator(
        "list_audit_findings"
    )
    list_audit_mitigation_actions_executions_paginator: ListAuditMitigationActionsExecutionsPaginator = client.get_paginator(
        "list_audit_mitigation_actions_executions"
    )
    list_audit_mitigation_actions_tasks_paginator: ListAuditMitigationActionsTasksPaginator = (
        client.get_paginator("list_audit_mitigation_actions_tasks")
    )
    list_audit_suppressions_paginator: ListAuditSuppressionsPaginator = client.get_paginator(
        "list_audit_suppressions"
    )
    list_audit_tasks_paginator: ListAuditTasksPaginator = client.get_paginator("list_audit_tasks")
    list_authorizers_paginator: ListAuthorizersPaginator = client.get_paginator("list_authorizers")
    list_billing_groups_paginator: ListBillingGroupsPaginator = client.get_paginator(
        "list_billing_groups"
    )
    list_ca_certificates_paginator: ListCACertificatesPaginator = client.get_paginator(
        "list_ca_certificates"
    )
    list_certificates_paginator: ListCertificatesPaginator = client.get_paginator(
        "list_certificates"
    )
    list_certificates_by_ca_paginator: ListCertificatesByCAPaginator = client.get_paginator(
        "list_certificates_by_ca"
    )
    list_custom_metrics_paginator: ListCustomMetricsPaginator = client.get_paginator(
        "list_custom_metrics"
    )
    list_detect_mitigation_actions_executions_paginator: ListDetectMitigationActionsExecutionsPaginator = client.get_paginator(
        "list_detect_mitigation_actions_executions"
    )
    list_detect_mitigation_actions_tasks_paginator: ListDetectMitigationActionsTasksPaginator = (
        client.get_paginator("list_detect_mitigation_actions_tasks")
    )
    list_dimensions_paginator: ListDimensionsPaginator = client.get_paginator("list_dimensions")
    list_domain_configurations_paginator: ListDomainConfigurationsPaginator = client.get_paginator(
        "list_domain_configurations"
    )
    list_fleet_metrics_paginator: ListFleetMetricsPaginator = client.get_paginator(
        "list_fleet_metrics"
    )
    list_indices_paginator: ListIndicesPaginator = client.get_paginator("list_indices")
    list_job_executions_for_job_paginator: ListJobExecutionsForJobPaginator = client.get_paginator(
        "list_job_executions_for_job"
    )
    list_job_executions_for_thing_paginator: ListJobExecutionsForThingPaginator = (
        client.get_paginator("list_job_executions_for_thing")
    )
    list_job_templates_paginator: ListJobTemplatesPaginator = client.get_paginator(
        "list_job_templates"
    )
    list_jobs_paginator: ListJobsPaginator = client.get_paginator("list_jobs")
    list_managed_job_templates_paginator: ListManagedJobTemplatesPaginator = client.get_paginator(
        "list_managed_job_templates"
    )
    list_metric_values_paginator: ListMetricValuesPaginator = client.get_paginator(
        "list_metric_values"
    )
    list_mitigation_actions_paginator: ListMitigationActionsPaginator = client.get_paginator(
        "list_mitigation_actions"
    )
    list_ota_updates_paginator: ListOTAUpdatesPaginator = client.get_paginator("list_ota_updates")
    list_outgoing_certificates_paginator: ListOutgoingCertificatesPaginator = client.get_paginator(
        "list_outgoing_certificates"
    )
    list_package_versions_paginator: ListPackageVersionsPaginator = client.get_paginator(
        "list_package_versions"
    )
    list_packages_paginator: ListPackagesPaginator = client.get_paginator("list_packages")
    list_policies_paginator: ListPoliciesPaginator = client.get_paginator("list_policies")
    list_policy_principals_paginator: ListPolicyPrincipalsPaginator = client.get_paginator(
        "list_policy_principals"
    )
    list_principal_policies_paginator: ListPrincipalPoliciesPaginator = client.get_paginator(
        "list_principal_policies"
    )
    list_principal_things_paginator: ListPrincipalThingsPaginator = client.get_paginator(
        "list_principal_things"
    )
    list_provisioning_template_versions_paginator: ListProvisioningTemplateVersionsPaginator = (
        client.get_paginator("list_provisioning_template_versions")
    )
    list_provisioning_templates_paginator: ListProvisioningTemplatesPaginator = (
        client.get_paginator("list_provisioning_templates")
    )
    list_related_resources_for_audit_finding_paginator: ListRelatedResourcesForAuditFindingPaginator = client.get_paginator(
        "list_related_resources_for_audit_finding"
    )
    list_role_aliases_paginator: ListRoleAliasesPaginator = client.get_paginator(
        "list_role_aliases"
    )
    list_sbom_validation_results_paginator: ListSbomValidationResultsPaginator = (
        client.get_paginator("list_sbom_validation_results")
    )
    list_scheduled_audits_paginator: ListScheduledAuditsPaginator = client.get_paginator(
        "list_scheduled_audits"
    )
    list_security_profiles_paginator: ListSecurityProfilesPaginator = client.get_paginator(
        "list_security_profiles"
    )
    list_security_profiles_for_target_paginator: ListSecurityProfilesForTargetPaginator = (
        client.get_paginator("list_security_profiles_for_target")
    )
    list_streams_paginator: ListStreamsPaginator = client.get_paginator("list_streams")
    list_tags_for_resource_paginator: ListTagsForResourcePaginator = client.get_paginator(
        "list_tags_for_resource"
    )
    list_targets_for_policy_paginator: ListTargetsForPolicyPaginator = client.get_paginator(
        "list_targets_for_policy"
    )
    list_targets_for_security_profile_paginator: ListTargetsForSecurityProfilePaginator = (
        client.get_paginator("list_targets_for_security_profile")
    )
    list_thing_groups_paginator: ListThingGroupsPaginator = client.get_paginator(
        "list_thing_groups"
    )
    list_thing_groups_for_thing_paginator: ListThingGroupsForThingPaginator = client.get_paginator(
        "list_thing_groups_for_thing"
    )
    list_thing_principals_paginator: ListThingPrincipalsPaginator = client.get_paginator(
        "list_thing_principals"
    )
    list_thing_registration_task_reports_paginator: ListThingRegistrationTaskReportsPaginator = (
        client.get_paginator("list_thing_registration_task_reports")
    )
    list_thing_registration_tasks_paginator: ListThingRegistrationTasksPaginator = (
        client.get_paginator("list_thing_registration_tasks")
    )
    list_thing_types_paginator: ListThingTypesPaginator = client.get_paginator("list_thing_types")
    list_things_paginator: ListThingsPaginator = client.get_paginator("list_things")
    list_things_in_billing_group_paginator: ListThingsInBillingGroupPaginator = (
        client.get_paginator("list_things_in_billing_group")
    )
    list_things_in_thing_group_paginator: ListThingsInThingGroupPaginator = client.get_paginator(
        "list_things_in_thing_group"
    )
    list_topic_rule_destinations_paginator: ListTopicRuleDestinationsPaginator = (
        client.get_paginator("list_topic_rule_destinations")
    )
    list_topic_rules_paginator: ListTopicRulesPaginator = client.get_paginator("list_topic_rules")
    list_v2_logging_levels_paginator: ListV2LoggingLevelsPaginator = client.get_paginator(
        "list_v2_logging_levels"
    )
    list_violation_events_paginator: ListViolationEventsPaginator = client.get_paginator(
        "list_violation_events"
    )
```

<a id="literals"></a>

### Literals

`types_aiobotocore_iot.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

Full list of `IoT` Literals can be found in
[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iot/literals/).

```python
from types_aiobotocore_iot.literals import AbortActionType


def check_value(value: AbortActionType) -> bool: ...
```

<a id="type-definitions"></a>

### Type definitions

`types_aiobotocore_iot.type_defs` module contains structures and shapes
assembled to typed dictionaries and unions for additional type checking.

Full list of `IoT` TypeDefs can be found in
[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iot/type_defs/).

```python
from types_aiobotocore_iot.type_defs import AbortCriteriaTypeDef


def get_value() -> AbortCriteriaTypeDef:
    return {...}
```

<a id="how-it-works"></a>

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from `botocore` schemas.
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [ruff](https://docs.astral.sh/ruff/) for readability.

<a id="what's-new"></a>

## What's new

<a id="implemented-features"></a>

### Implemented features

- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`
  libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.resource` calls
- Auto discovery of types for `session.client` and `session.resource` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

<a id="latest-changes"></a>

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

<a id="versioning"></a>

## Versioning

`types-aiobotocore-iot` version is the same as related `aiobotocore` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="thank-you"></a>

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

<a id="documentation"></a>

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iot/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.
