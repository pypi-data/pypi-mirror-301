# generated by datamodel-codegen:
#   filename:  media_insights_dcr.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue13(BaseModel):
    type: Type


class Type13(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue14(BaseModel):
    type: Type13


class Type14(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue15(BaseModel):
    type: Type14
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue13, RequirementFlagValue14, RequirementFlagValue15]
    ]
):
    root: Union[RequirementFlagValue13, RequirementFlagValue14, RequirementFlagValue15]


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class RequirementOp4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has: RequirementFlag


class MediaInsightsComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeV1(MediaInsightsComputeV0):
    pass


class MediaInsightsComputeV2(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    dataPartnerEmails: Optional[Sequence[str]] = None
    driverEnclaveSpecification: EnclaveSpecificationV0
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[conint(ge=0)] = 10
    rateLimitPublishDataWindowSeconds: Optional[conint(ge=0)] = 604800


class MediaInsightsComputeV3(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV4(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV5(MediaInsightsComputeV2):
    pass


class MediaInsightsComputeV6(MediaInsightsComputeV2):
    pass


class MediaInsightsCompute1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: MediaInsightsComputeV0


class MediaInsightsCompute2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: MediaInsightsComputeV1


class MediaInsightsCompute3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: MediaInsightsComputeV2


class MediaInsightsCompute4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: MediaInsightsComputeV3


class MediaInsightsCompute5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: MediaInsightsComputeV4


class MediaInsightsCompute6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: MediaInsightsComputeV5


class MediaInsightsCompute7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: MediaInsightsComputeV6


class MediaInsightsCompute(
    RootModel[
        Union[
            MediaInsightsCompute1,
            MediaInsightsCompute2,
            MediaInsightsCompute3,
            MediaInsightsCompute4,
            MediaInsightsCompute5,
            MediaInsightsCompute6,
            MediaInsightsCompute7,
        ]
    ]
):
    root: Union[
        MediaInsightsCompute1,
        MediaInsightsCompute2,
        MediaInsightsCompute3,
        MediaInsightsCompute4,
        MediaInsightsCompute5,
        MediaInsightsCompute6,
        MediaInsightsCompute7,
    ]


class MediaInsightsComputeOrUnknown(RootModel[Optional[MediaInsightsCompute]]):
    root: Optional[MediaInsightsCompute]


class MediaInsightsDcr1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: MediaInsightsDcrInner


class MediaInsightsDcr(RootModel[MediaInsightsDcr1]):
    root: MediaInsightsDcr1 = Field(..., title='MediaInsightsDcr')


class ConsumerRequirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Optional[RequirementOp] = None


class MediaInsightsDcrInner(BaseModel):
    compute: MediaInsightsComputeOrUnknown
    consumes: ConsumerRequirements
    features: Sequence[str]


class RequirementOp1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    or_: Sequence[RequirementOp] = Field(..., alias='or')


class RequirementOp2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    and_: Sequence[RequirementOp] = Field(..., alias='and')


class RequirementOp3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusiveOr: Sequence[RequirementOp]


class RequirementOp(
    RootModel[Union[RequirementOp1, RequirementOp2, RequirementOp3, RequirementOp4]]
):
    root: Union[RequirementOp1, RequirementOp2, RequirementOp3, RequirementOp4] = Field(
        ...,
        description='An expression that can be used to check whether a data lab (as a "data provider") provides certain datasets or certain data properties. This was introduced because the system used in the LM DCR didn\'t allow the MediaInsights DCR to express that _either_ a segments or an embeddings dataset is required in case it was configured to enable lookalike modelling.',
    )


MediaInsightsDcr1.model_rebuild()
ConsumerRequirements.model_rebuild()
RequirementOp1.model_rebuild()
RequirementOp2.model_rebuild()
RequirementOp3.model_rebuild()
