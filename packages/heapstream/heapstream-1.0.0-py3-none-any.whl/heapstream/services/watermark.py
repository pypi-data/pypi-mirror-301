# This file was generated by liblab | https://liblab.com/

from typing import Any

from ..models import Watermark, WatermarkCreate, WatermarkList
from ..models.utils.cast_models import cast_models
from ..net.transport.serializer import Serializer
from .utils.base_service import BaseService
from .utils.validator import Validator


class WatermarkService(BaseService):

    @cast_models
    def list_watermarks(self, project_id: int) -> WatermarkList:
        """Get a list of all available watermarks.

        :param project_id: The ID of the project.
        :type project_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: WatermarkList
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/watermark",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return WatermarkList._unmap(response)

    @cast_models
    def create_watermark(
        self, request_body: WatermarkCreate, project_id: int
    ) -> Watermark:
        """Upload a new watermark. Once it's been uploaded, it can not be updated.

        :param request_body: The request body.
        :type request_body: WatermarkCreate
        :param project_id: The ID of the project.
        :type project_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Watermark
        """

        Validator(WatermarkCreate).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/watermark",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)
        return Watermark._unmap(response)

    @cast_models
    def get_watermark(self, project_id: int, watermark_id: int) -> Watermark:
        """Return the details of a single watermark object.

        :param project_id: The ID of the project.
        :type project_id: int
        :param watermark_id: id of the watermark.
        :type watermark_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Watermark
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(watermark_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/watermark/{{watermark_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("watermark_id", watermark_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Watermark._unmap(response)

    @cast_models
    def delete_watermark(self, project_id: int, watermark_id: int) -> Any:
        """Delete an existing watermark.

        :param project_id: The ID of the project.
        :type project_id: int
        :param watermark_id: id of the watermark.
        :type watermark_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(watermark_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/watermark/{{watermark_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("watermark_id", watermark_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
