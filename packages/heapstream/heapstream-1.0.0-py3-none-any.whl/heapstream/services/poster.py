# This file was generated by liblab | https://liblab.com/

from typing import Any

from ..models import MultipartFile, Poster, PosterEdit, PosterList
from ..models.utils.cast_models import cast_models
from ..net.transport.serializer import Serializer
from .utils.base_service import BaseService
from .utils.validator import Validator


class PosterService(BaseService):

    @cast_models
    def list_posters(self, project_id: int, video_id: int) -> PosterList:
        """List all posters associated with a video.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: PosterList
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/poster",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return PosterList._unmap(response)

    @cast_models
    def upload_poster(
        self, request_body: MultipartFile, project_id: int, video_id: int
    ) -> Poster:
        """Upload a new poster associated with a video. This will not make the poster the default.
        A video can have a maximum of 20 posters.

        :param request_body: The request body.
        :type request_body: MultipartFile
        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Poster
        """

        Validator(MultipartFile).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/poster",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)
        return Poster._unmap(response)

    @cast_models
    def edit_poster(
        self, request_body: PosterEdit, project_id: int, video_id: int, poster_id: int
    ) -> Poster:
        """Edit settings of a poster.

        :param request_body: The request body.
        :type request_body: PosterEdit
        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        :param poster_id: ID of the poster.
        :type poster_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Poster
        """

        Validator(PosterEdit).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)
        Validator(int).min(1).max(9223372036854776000).validate(poster_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/poster/{{poster_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_path("poster_id", poster_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Poster._unmap(response)

    @cast_models
    def delete_poster(self, project_id: int, video_id: int, poster_id: int) -> Any:
        """Delete a poster associated with a video by its ID.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        :param poster_id: ID of the poster.
        :type poster_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)
        Validator(int).min(1).max(9223372036854776000).validate(poster_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/poster/{{poster_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_path("poster_id", poster_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
