# This file was generated by liblab | https://liblab.com/

from typing import Any

from ..models import Webhook, WebhookCreate, WebhookList
from ..models.utils.cast_models import cast_models
from ..net.transport.serializer import Serializer
from .utils.base_service import BaseService
from .utils.validator import Validator


class WebhookService(BaseService):

    @cast_models
    def list_webhooks(self, project_id: int) -> WebhookList:
        """Get a list of all webhooks for this project.

        :param project_id: The ID of the project.
        :type project_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: WebhookList
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/webhook",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return WebhookList._unmap(response)

    @cast_models
    def create_webhook(self, request_body: WebhookCreate, project_id: int) -> Webhook:
        """Create a new webhook. You can only have 1 webhook per-project.

        :param request_body: The request body.
        :type request_body: WebhookCreate
        :param project_id: The ID of the project.
        :type project_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Webhook
        """

        Validator(WebhookCreate).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/webhook",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Webhook._unmap(response)

    @cast_models
    def delete_webhook(self, project_id: int, webhook_id: int) -> Any:
        """Delete an existing webhook.

        :param project_id: The ID of the project.
        :type project_id: int
        :param webhook_id: ID of the webhook.
        :type webhook_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(webhook_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/webhook/{{webhook_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("webhook_id", webhook_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
