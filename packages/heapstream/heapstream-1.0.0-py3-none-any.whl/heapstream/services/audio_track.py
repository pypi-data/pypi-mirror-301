# This file was generated by liblab | https://liblab.com/

from typing import Any

from ..models import AudioTrack, AudioTrackCreate, AudioTrackEdit, AudioTrackList
from ..models.utils.cast_models import cast_models
from ..net.transport.serializer import Serializer
from .utils.base_service import BaseService
from .utils.validator import Validator


class AudioTrackService(BaseService):

    @cast_models
    def list_audio_tracks(self, project_id: int, video_id: int) -> AudioTrackList:
        """List all audio tracks associated with a given video.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AudioTrackList
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/audio",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return AudioTrackList._unmap(response)

    @cast_models
    def create_audio_track(
        self, request_body: AudioTrackCreate, project_id: int, video_id: int
    ) -> AudioTrack:
        """Upload an alternative audio track for a video.

        :param request_body: The request body.
        :type request_body: AudioTrackCreate
        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AudioTrack
        """

        Validator(AudioTrackCreate).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/audio",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)
        return AudioTrack._unmap(response)

    @cast_models
    def edit_audio_track(
        self,
        request_body: AudioTrackEdit,
        project_id: int,
        video_id: int,
        audio_track_id: int,
    ) -> AudioTrack:
        """Edit settings of audio track.

        :param request_body: The request body.
        :type request_body: AudioTrackEdit
        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        :param audio_track_id: Id of the audio track.
        :type audio_track_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AudioTrack
        """

        Validator(AudioTrackEdit).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)
        Validator(int).min(1).max(9223372036854776000).validate(audio_track_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/audio/{{audio_track_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_path("audio_track_id", audio_track_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return AudioTrack._unmap(response)

    @cast_models
    def delete_audio_track(
        self, project_id: int, video_id: int, audio_track_id: int
    ) -> Any:
        """Delete the audio track of a video by its ID.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        :param audio_track_id: Id of the audio track.
        :type audio_track_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)
        Validator(int).min(1).max(9223372036854776000).validate(audio_track_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/audio/{{audio_track_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_path("audio_track_id", audio_track_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
