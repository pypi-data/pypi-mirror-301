# This file was generated by liblab | https://liblab.com/

from enum import Enum

from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class AudioTrackEditDefault(Enum):
    """An enumeration representing different categories.

    :cvar TRUE: "true"
    :vartype TRUE: str
    """

    TRUE = "true"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, AudioTrackEditDefault._member_map_.values()))


@JsonMap({})
class AudioTrackEdit(BaseModel):
    """AudioTrackEdit

    :param default: If the audio track is the default one pre-selected., defaults to None
    :type default: AudioTrackEditDefault, optional
    :param lang_code: Language of the audio track. Language must be valid BCP 47., defaults to None
    :type lang_code: str, optional
    :param title: Title of the audio track., defaults to None
    :type title: str, optional
    """

    def __init__(
        self,
        default: AudioTrackEditDefault = None,
        lang_code: str = None,
        title: str = None,
    ):
        """AudioTrackEdit

        :param default: If the audio track is the default one pre-selected., defaults to None
        :type default: AudioTrackEditDefault, optional
        :param lang_code: Language of the audio track. Language must be valid BCP 47., defaults to None
        :type lang_code: str, optional
        :param title: Title of the audio track., defaults to None
        :type title: str, optional
        """
        if default is not None:
            self.default = self._enum_matching(
                default, AudioTrackEditDefault.list(), "default"
            )
        if lang_code is not None:
            self.lang_code = self._define_str(
                "lang_code", lang_code, min_length=2, max_length=2
            )
        if title is not None:
            self.title = self._define_str("title", title, max_length=64)
