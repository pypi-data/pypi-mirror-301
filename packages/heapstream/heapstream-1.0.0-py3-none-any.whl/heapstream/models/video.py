# This file was generated by liblab | https://liblab.com/

from __future__ import annotations

from enum import Enum
from typing import List

from .asset import Asset
from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class VideoStatus(Enum):
    """An enumeration representing different categories.

    :cvar WAITINGFORUPLOAD: "waiting_for_upload"
    :vartype WAITINGFORUPLOAD: str
    :cvar READY: "ready"
    :vartype READY: str
    :cvar QUEUED: "queued"
    :vartype QUEUED: str
    :cvar COMPLETED: "completed"
    :vartype COMPLETED: str
    :cvar ERRORED: "errored"
    :vartype ERRORED: str
    """

    WAITINGFORUPLOAD = "waiting_for_upload"
    READY = "ready"
    QUEUED = "queued"
    COMPLETED = "completed"
    ERRORED = "errored"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, VideoStatus._member_map_.values()))


@JsonMap({"id_": "id"})
class Video(BaseModel):
    """Video

    :param asset: asset
    :type asset: Asset
    :param created_on: Timestamp when the object was created.
    :type created_on: str
    :param description: The video description.
    :type description: str
    :param hls_link: Link to the HLS m3u8 playlist.
    :type hls_link: str
    :param id_: ID of the video.
    :type id_: int
    :param iframe_embed: HTML code to embed the video in an iframe.
    :type iframe_embed: str
    :param meta: A dynamic key-value store to reference video data within various systems of record. Maximum size is 1KB in json format.
    :type meta: dict
    :param password: Password is used to view private videos.
    :type password: str
    :param permalink: Link to the canonical URL of the video.
    :type permalink: str
    :param public: Whether the video is public or not. Public videos can be viewed by just having the video url.
    :type public: bool
    :param status: Status of the video.
    :type status: VideoStatus
    :param tags: List of strings to tag a video.
    :type tags: List[str]
    :param title: Title of the video.
    :type title: str
    """

    def __init__(
        self,
        asset: Asset,
        created_on: str,
        description: str,
        hls_link: str,
        id_: int,
        iframe_embed: str,
        meta: dict,
        password: str,
        permalink: str,
        public: bool,
        status: VideoStatus,
        tags: List[str],
        title: str,
    ):
        """Video

        :param asset: asset
        :type asset: Asset
        :param created_on: Timestamp when the object was created.
        :type created_on: str
        :param description: The video description.
        :type description: str
        :param hls_link: Link to the HLS m3u8 playlist.
        :type hls_link: str
        :param id_: ID of the video.
        :type id_: int
        :param iframe_embed: HTML code to embed the video in an iframe.
        :type iframe_embed: str
        :param meta: A dynamic key-value store to reference video data within various systems of record. Maximum size is 1KB in json format.
        :type meta: dict
        :param password: Password is used to view private videos.
        :type password: str
        :param permalink: Link to the canonical URL of the video.
        :type permalink: str
        :param public: Whether the video is public or not. Public videos can be viewed by just having the video url.
        :type public: bool
        :param status: Status of the video.
        :type status: VideoStatus
        :param tags: List of strings to tag a video.
        :type tags: List[str]
        :param title: Title of the video.
        :type title: str
        """
        self.asset = self._define_object(asset, Asset)
        self.created_on = created_on
        self.description = description
        self.hls_link = hls_link
        self.id_ = id_
        self.iframe_embed = iframe_embed
        self.meta = meta
        self.password = password
        self.permalink = permalink
        self.public = public
        self.status = self._enum_matching(status, VideoStatus.list(), "status")
        self.tags = tags
        self.title = title
