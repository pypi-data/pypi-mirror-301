# This file was generated by liblab | https://liblab.com/

from typing import Any

from ..models import (
    ListVideosStatus,
    PresetList,
    Video,
    VideoEdit,
    VideoFetch,
    VideoList,
)
from ..models.utils.cast_models import cast_models
from ..net.transport.serializer import Serializer
from .utils.base_service import BaseService
from .utils.validator import Validator


class VideoService(BaseService):

    @cast_models
    def list_videos(
        self,
        project_id: int,
        limit: int = None,
        page: str = None,
        status: ListVideosStatus = None,
        search: str = None,
    ) -> VideoList:
        """List all videos associated with a project.

        :param project_id: The ID of the project.
        :type project_id: int
        :param limit: How many rows to return in each page., defaults to None
        :type limit: int, optional
        :param page: The page to request., defaults to None
        :type page: str, optional
        :param status: Status of the video., defaults to None
        :type status: ListVideosStatus, optional
        :param search: Search videos in `title`, `description`, `tags`., defaults to None
        :type search: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: VideoList
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).is_optional().min(20).max(1000).validate(limit)
        Validator(str).is_optional().validate(page)
        Validator(ListVideosStatus).is_optional().validate(status)
        Validator(str).is_optional().validate(search)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_query("limit", limit)
            .add_query("page", page)
            .add_query("status", status)
            .add_query("search", search)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return VideoList._unmap(response)

    @cast_models
    def fetch_video(self, request_body: VideoFetch, project_id: int) -> Video:
        """Asynchronously fetch a video from the provided external url.

        :param request_body: The request body.
        :type request_body: VideoFetch
        :param project_id: The ID of the project.
        :type project_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Video
        """

        Validator(VideoFetch).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/fetch",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Video._unmap(response)

    @cast_models
    def get_video(self, project_id: int, video_id: int) -> Video:
        """Return details about a single video.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Video
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Video._unmap(response)

    @cast_models
    def edit_video(
        self, request_body: VideoEdit, project_id: int, video_id: int
    ) -> Video:
        """Edit the settings of a single video.

        :param request_body: The request body.
        :type request_body: VideoEdit
        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Video
        """

        Validator(VideoEdit).validate(request_body)
        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Video._unmap(response)

    @cast_models
    def delete_video(self, project_id: int, video_id: int) -> Any:
        """Delete a video along with all it's assets.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def list_presets(self, project_id: int, video_id: int) -> PresetList:
        """Return all the completed presets for a given video.

        :param project_id: The ID of the project.
        :type project_id: int
        :param video_id: ID of the video.
        :type video_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: PresetList
        """

        Validator(int).min(1).max(9223372036854776000).validate(project_id)
        Validator(int).min(1).max(9223372036854776000).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/preset",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return PresetList._unmap(response)
