# This file was generated by liblab | https://liblab.com/

from enum import Enum

from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class WatermarkPosition(Enum):
    """An enumeration representing different categories.

    :cvar UPPERRIGHT: "upper_right"
    :vartype UPPERRIGHT: str
    :cvar UPPERLEFT: "upper_left"
    :vartype UPPERLEFT: str
    :cvar LOWERRIGHT: "lower_right"
    :vartype LOWERRIGHT: str
    :cvar LOWERLEFT: "lower_left"
    :vartype LOWERLEFT: str
    :cvar CENTER: "center"
    :vartype CENTER: str
    """

    UPPERRIGHT = "upper_right"
    UPPERLEFT = "upper_left"
    LOWERRIGHT = "lower_right"
    LOWERLEFT = "lower_left"
    CENTER = "center"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, WatermarkPosition._member_map_.values()))


@JsonMap({"id_": "id"})
class Watermark(BaseModel):
    """Watermark

    :param id_: id of the watermark.
    :type id_: int
    :param image_link: Link to view the watermark image. URL expires after 24 hours by default.
    :type image_link: str
    :param opacity: The watermark's translucency can be adjusted on a scale from 0.0 to 1.0. A setting of 0.0 renders the watermark entirely transparent, while a setting of 1.0 makes it fully opaque. If the watermark originally possesses a degree of semi-transparency, selecting a value of 1.0 won't result in total opacity.
    :type opacity: float
    :param padding: Empty padding space between the neighboring borders (defined by position) of the video and the watermark. `0.0` means no padding at all, while 1.0 means full padding across the video's width or height.
    :type padding: float
    :param position: Position where the watermark will be placed inside the video. Note that when the watermark is positioned at the center, no `padding` will be used.
    :type position: WatermarkPosition
    :param scale: Scale the watermark to (`scale` * height) of the video, while preserving its display aspect ratio.
    :type scale: float
    :param title: Title of the watermark.
    :type title: str
    """

    def __init__(
        self,
        id_: int,
        image_link: str,
        opacity: float,
        padding: float,
        position: WatermarkPosition,
        scale: float,
        title: str,
    ):
        """Watermark

        :param id_: id of the watermark.
        :type id_: int
        :param image_link: Link to view the watermark image. URL expires after 24 hours by default.
        :type image_link: str
        :param opacity: The watermark's translucency can be adjusted on a scale from 0.0 to 1.0. A setting of 0.0 renders the watermark entirely transparent, while a setting of 1.0 makes it fully opaque. If the watermark originally possesses a degree of semi-transparency, selecting a value of 1.0 won't result in total opacity.
        :type opacity: float
        :param padding: Empty padding space between the neighboring borders (defined by position) of the video and the watermark. `0.0` means no padding at all, while 1.0 means full padding across the video's width or height.
        :type padding: float
        :param position: Position where the watermark will be placed inside the video. Note that when the watermark is positioned at the center, no `padding` will be used.
        :type position: WatermarkPosition
        :param scale: Scale the watermark to (`scale` * height) of the video, while preserving its display aspect ratio.
        :type scale: float
        :param title: Title of the watermark.
        :type title: str
        """
        self.id_ = id_
        self.image_link = image_link
        self.opacity = opacity
        self.padding = padding
        self.position = self._enum_matching(
            position, WatermarkPosition.list(), "position"
        )
        self.scale = scale
        self.title = self._define_str("title", title, max_length=128)
