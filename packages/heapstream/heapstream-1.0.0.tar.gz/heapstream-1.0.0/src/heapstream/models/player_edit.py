# This file was generated by liblab | https://liblab.com/

from enum import Enum

from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class PlayerEditDefault(Enum):
    """An enumeration representing different categories.

    :cvar TRUE: "true"
    :vartype TRUE: str
    """

    TRUE = "true"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PlayerEditDefault._member_map_.values()))


class PlayerEditLogoPosition(Enum):
    """An enumeration representing different categories.

    :cvar TOPLEFT: "top_left"
    :vartype TOPLEFT: str
    :cvar TOPRIGHT: "top_right"
    :vartype TOPRIGHT: str
    """

    TOPLEFT = "top_left"
    TOPRIGHT = "top_right"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PlayerEditLogoPosition._member_map_.values())
        )


class PlayerEditSkin(Enum):
    """An enumeration representing different categories.

    :cvar NUEVO: "nuevo"
    :vartype NUEVO: str
    :cvar JWLIKE: "jwlike"
    :vartype JWLIKE: str
    :cvar PARTY: "party"
    :vartype PARTY: str
    :cvar TRESO: "treso"
    :vartype TRESO: str
    :cvar ROUNDAL: "roundal"
    :vartype ROUNDAL: str
    :cvar SHAKA: "shaka"
    :vartype SHAKA: str
    :cvar PINKO: "pinko"
    :vartype PINKO: str
    :cvar CHROME: "chrome"
    :vartype CHROME: str
    :cvar FLOW: "flow"
    :vartype FLOW: str
    """

    NUEVO = "nuevo"
    JWLIKE = "jwlike"
    PARTY = "party"
    TRESO = "treso"
    ROUNDAL = "roundal"
    SHAKA = "shaka"
    PINKO = "pinko"
    CHROME = "chrome"
    FLOW = "flow"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PlayerEditSkin._member_map_.values()))


@JsonMap({})
class PlayerEdit(BaseModel):
    """PlayerEdit

    :param default: If it's the default player used on embedded videos., defaults to None
    :type default: PlayerEditDefault, optional
    :param description: Description of the player., defaults to None
    :type description: str, optional
    :param logo: Upload the logo that will be used inside the player video. If width>28 or             height>128, it will be resized while maintaining aspect ratio. File must be a valid image. Maximum filesize is 10.0 MB. Set as empty string to delete the file., defaults to None
    :type logo: bytes, optional
    :param logo_control_bar: Upload logo that appears inside the controlbar. It will be scaled down if height > 16px. File must be a valid image. Maximum filesize is 10.0 MB. Set as empty string to delete the file., defaults to None
    :type logo_control_bar: bytes, optional
    :param logo_position: Position of the logo inside the player., defaults to None
    :type logo_position: PlayerEditLogoPosition, optional
    :param quality_menu: Whether to display the video quality menu., defaults to None
    :type quality_menu: bool, optional
    :param rewind_button: Show the rewind button., defaults to None
    :type rewind_button: bool, optional
    :param share_menu: Whether to display the share menu., defaults to None
    :type share_menu: bool, optional
    :param show_minithumbs: Whether to display minithumbs., defaults to None
    :type show_minithumbs: bool, optional
    :param show_title: Show the video title on top., defaults to None
    :type show_title: bool, optional
    :param skin: Skin of player., defaults to None
    :type skin: PlayerEditSkin, optional
    :param speed_menu: Whether to display the speed menu., defaults to None
    :type speed_menu: bool, optional
    :param title: Player title that is displayed in admin., defaults to None
    :type title: str, optional
    :param title_logo: Upload logo that will appear in the title of the video. If width/height is             bigger than 24px, it will be downscaled to (24px x 24px). File must be a valid image. Maximum filesize is 10.0 MB. Set as empty string to delete the file., defaults to None
    :type title_logo: bytes, optional
    :param zoom_menu: Whether to display the zoom menu., defaults to None
    :type zoom_menu: bool, optional
    """

    def __init__(
        self,
        default: PlayerEditDefault = None,
        description: str = None,
        logo: bytes = None,
        logo_control_bar: bytes = None,
        logo_position: PlayerEditLogoPosition = None,
        quality_menu: bool = None,
        rewind_button: bool = None,
        share_menu: bool = None,
        show_minithumbs: bool = None,
        show_title: bool = None,
        skin: PlayerEditSkin = None,
        speed_menu: bool = None,
        title: str = None,
        title_logo: bytes = None,
        zoom_menu: bool = None,
    ):
        """PlayerEdit

        :param default: If it's the default player used on embedded videos., defaults to None
        :type default: PlayerEditDefault, optional
        :param description: Description of the player., defaults to None
        :type description: str, optional
        :param logo: Upload the logo that will be used inside the player video. If width>28 or             height>128, it will be resized while maintaining aspect ratio. File must be a valid image. Maximum filesize is 10.0 MB. Set as empty string to delete the file., defaults to None
        :type logo: bytes, optional
        :param logo_control_bar: Upload logo that appears inside the controlbar. It will be scaled down if height > 16px. File must be a valid image. Maximum filesize is 10.0 MB. Set as empty string to delete the file., defaults to None
        :type logo_control_bar: bytes, optional
        :param logo_position: Position of the logo inside the player., defaults to None
        :type logo_position: PlayerEditLogoPosition, optional
        :param quality_menu: Whether to display the video quality menu., defaults to None
        :type quality_menu: bool, optional
        :param rewind_button: Show the rewind button., defaults to None
        :type rewind_button: bool, optional
        :param share_menu: Whether to display the share menu., defaults to None
        :type share_menu: bool, optional
        :param show_minithumbs: Whether to display minithumbs., defaults to None
        :type show_minithumbs: bool, optional
        :param show_title: Show the video title on top., defaults to None
        :type show_title: bool, optional
        :param skin: Skin of player., defaults to None
        :type skin: PlayerEditSkin, optional
        :param speed_menu: Whether to display the speed menu., defaults to None
        :type speed_menu: bool, optional
        :param title: Player title that is displayed in admin., defaults to None
        :type title: str, optional
        :param title_logo: Upload logo that will appear in the title of the video. If width/height is             bigger than 24px, it will be downscaled to (24px x 24px). File must be a valid image. Maximum filesize is 10.0 MB. Set as empty string to delete the file., defaults to None
        :type title_logo: bytes, optional
        :param zoom_menu: Whether to display the zoom menu., defaults to None
        :type zoom_menu: bool, optional
        """
        if default is not None:
            self.default = self._enum_matching(
                default, PlayerEditDefault.list(), "default"
            )
        if description is not None:
            self.description = self._define_str(
                "description", description, max_length=500
            )
        if logo is not None:
            self.logo = logo
        if logo_control_bar is not None:
            self.logo_control_bar = logo_control_bar
        if logo_position is not None:
            self.logo_position = self._enum_matching(
                logo_position, PlayerEditLogoPosition.list(), "logo_position"
            )
        if quality_menu is not None:
            self.quality_menu = quality_menu
        if rewind_button is not None:
            self.rewind_button = rewind_button
        if share_menu is not None:
            self.share_menu = share_menu
        if show_minithumbs is not None:
            self.show_minithumbs = show_minithumbs
        if show_title is not None:
            self.show_title = show_title
        if skin is not None:
            self.skin = self._enum_matching(skin, PlayerEditSkin.list(), "skin")
        if speed_menu is not None:
            self.speed_menu = speed_menu
        if title is not None:
            self.title = self._define_str("title", title, max_length=50)
        if title_logo is not None:
            self.title_logo = title_logo
        if zoom_menu is not None:
            self.zoom_menu = zoom_menu
