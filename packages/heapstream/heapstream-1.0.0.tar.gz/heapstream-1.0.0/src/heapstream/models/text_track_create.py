# This file was generated by liblab | https://liblab.com/

from enum import Enum

from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class TextTrackCreateType(Enum):
    """An enumeration representing different categories.

    :cvar CAPTION: "caption"
    :vartype CAPTION: str
    :cvar CHAPTER: "chapter"
    :vartype CHAPTER: str
    """

    CAPTION = "caption"
    CHAPTER = "chapter"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TextTrackCreateType._member_map_.values()))


@JsonMap({"type_": "type"})
class TextTrackCreate(BaseModel):
    """TextTrackCreate

    :param file: File to upload. File type must be one of the following: [vtt,srt].
    :type file: bytes
    :param lang_code: Language of the text track. Language must be valid BCP 47., defaults to None
    :type lang_code: str, optional
    :param title: Title of the text track.
    :type title: str
    :param type_: The type of the text track.
    :type type_: TextTrackCreateType
    """

    def __init__(
        self, file: bytes, title: str, type_: TextTrackCreateType, lang_code: str = None
    ):
        """TextTrackCreate

        :param file: File to upload. File type must be one of the following: [vtt,srt].
        :type file: bytes
        :param lang_code: Language of the text track. Language must be valid BCP 47., defaults to None
        :type lang_code: str, optional
        :param title: Title of the text track.
        :type title: str
        :param type_: The type of the text track.
        :type type_: TextTrackCreateType
        """
        self.file = file
        if lang_code is not None:
            self.lang_code = self._define_str(
                "lang_code", lang_code, min_length=2, max_length=2
            )
        self.title = self._define_str("title", title, max_length=64)
        self.type_ = self._enum_matching(type_, TextTrackCreateType.list(), "type_")
