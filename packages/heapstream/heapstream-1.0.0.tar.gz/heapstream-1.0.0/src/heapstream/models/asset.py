# This file was generated by liblab | https://liblab.com/

from __future__ import annotations

from enum import Enum
from typing import List

from .asset_error import AssetError
from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class EncodingTier(Enum):
    """An enumeration representing different categories.

    :cvar FULL: "full"
    :vartype FULL: str
    :cvar BASELINE: "baseline"
    :vartype BASELINE: str
    """

    FULL = "full"
    BASELINE = "baseline"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, EncodingTier._member_map_.values()))


@JsonMap({"id_": "id"})
class Asset(BaseModel):
    """Asset

    :param chosen_poster_id: The chosen poster that is displayed.
    :type chosen_poster_id: int
    :param duration: Duration of video in seconds.
    :type duration: float
    :param encoding_tier: The encoding tier serves as the factor that dictates the pricing and qualities accessible for the asset.
    :type encoding_tier: EncodingTier
    :param errors: List of any errors that happened when processing this asset.
    :type errors: List[AssetError]
    :param height: Height of the uploaded video.
    :type height: int
    :param id_: ID of the Asset.
    :type id_: int
    :param normalize_audio: Whether to normalize the audio tracks of this video., defaults to None
    :type normalize_audio: bool, optional
    :param original_link: Link to download the original video. URL expires after 24 hours by default.
    :type original_link: str
    :param poster_link: Link to the poster image. URL expires after 24 hours by default.
    :type poster_link: str
    :param watermark_id: Watermark used on this asset.
    :type watermark_id: int
    :param width: Width of the uploaded video.
    :type width: int
    """

    def __init__(
        self,
        chosen_poster_id: int,
        duration: float,
        encoding_tier: EncodingTier,
        errors: List[AssetError],
        height: int,
        id_: int,
        original_link: str,
        poster_link: str,
        watermark_id: int,
        width: int,
        normalize_audio: bool = None,
    ):
        """Asset

        :param chosen_poster_id: The chosen poster that is displayed.
        :type chosen_poster_id: int
        :param duration: Duration of video in seconds.
        :type duration: float
        :param encoding_tier: The encoding tier serves as the factor that dictates the pricing and qualities accessible for the asset.
        :type encoding_tier: EncodingTier
        :param errors: List of any errors that happened when processing this asset.
        :type errors: List[AssetError]
        :param height: Height of the uploaded video.
        :type height: int
        :param id_: ID of the Asset.
        :type id_: int
        :param normalize_audio: Whether to normalize the audio tracks of this video., defaults to None
        :type normalize_audio: bool, optional
        :param original_link: Link to download the original video. URL expires after 24 hours by default.
        :type original_link: str
        :param poster_link: Link to the poster image. URL expires after 24 hours by default.
        :type poster_link: str
        :param watermark_id: Watermark used on this asset.
        :type watermark_id: int
        :param width: Width of the uploaded video.
        :type width: int
        """
        self.chosen_poster_id = chosen_poster_id
        self.duration = duration
        self.encoding_tier = self._enum_matching(
            encoding_tier, EncodingTier.list(), "encoding_tier"
        )
        self.errors = self._define_list(errors, AssetError)
        self.height = height
        self.id_ = id_
        if normalize_audio is not None:
            self.normalize_audio = normalize_audio
        self.original_link = original_link
        self.poster_link = poster_link
        self.watermark_id = watermark_id
        self.width = width
