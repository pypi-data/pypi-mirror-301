# This file was generated by liblab | https://liblab.com/

from enum import Enum

from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class StreamType(Enum):
    """An enumeration representing different categories.

    :cvar VIDEO: "video"
    :vartype VIDEO: str
    :cvar AUDIO: "audio"
    :vartype AUDIO: str
    """

    VIDEO = "video"
    AUDIO = "audio"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, StreamType._member_map_.values()))


@JsonMap({"id_": "id"})
class Preset(BaseModel):
    """Preset

    :param audio_track_id: ID of the audio track the preset is connected to.
    :type audio_track_id: int
    :param bandwidth: HLS bandwidth of the video., defaults to None
    :type bandwidth: int, optional
    :param fps: FPS of the video.
    :type fps: float
    :param height: Height of the video.
    :type height: int
    :param id_: Id of the preset.
    :type id_: int
    :param m3u8_link: Link to the m3u8 playlist. URL expires after 24 hours by default.
    :type m3u8_link: str
    :param stream_type: Type of the stream.
    :type stream_type: StreamType
    :param width: Width of the video.
    :type width: int
    """

    def __init__(
        self,
        audio_track_id: int,
        fps: float,
        height: int,
        id_: int,
        m3u8_link: str,
        stream_type: StreamType,
        width: int,
        bandwidth: int = None,
    ):
        """Preset

        :param audio_track_id: ID of the audio track the preset is connected to.
        :type audio_track_id: int
        :param bandwidth: HLS bandwidth of the video., defaults to None
        :type bandwidth: int, optional
        :param fps: FPS of the video.
        :type fps: float
        :param height: Height of the video.
        :type height: int
        :param id_: Id of the preset.
        :type id_: int
        :param m3u8_link: Link to the m3u8 playlist. URL expires after 24 hours by default.
        :type m3u8_link: str
        :param stream_type: Type of the stream.
        :type stream_type: StreamType
        :param width: Width of the video.
        :type width: int
        """
        self.audio_track_id = audio_track_id
        if bandwidth is not None:
            self.bandwidth = bandwidth
        self.fps = fps
        self.height = height
        self.id_ = id_
        self.m3u8_link = m3u8_link
        self.stream_type = self._enum_matching(
            stream_type, StreamType.list(), "stream_type"
        )
        self.width = width
