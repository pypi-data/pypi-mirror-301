# This file was generated by liblab | https://liblab.com/

from enum import Enum

from .utils.base_model import BaseModel
from .utils.json_map import JsonMap


class PlayerLogoPosition(Enum):
    """An enumeration representing different categories.

    :cvar TOPLEFT: "top_left"
    :vartype TOPLEFT: str
    :cvar TOPRIGHT: "top_right"
    :vartype TOPRIGHT: str
    """

    TOPLEFT = "top_left"
    TOPRIGHT = "top_right"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PlayerLogoPosition._member_map_.values()))


class PlayerSkin(Enum):
    """An enumeration representing different categories.

    :cvar NUEVO: "nuevo"
    :vartype NUEVO: str
    :cvar JWLIKE: "jwlike"
    :vartype JWLIKE: str
    :cvar PARTY: "party"
    :vartype PARTY: str
    :cvar TRESO: "treso"
    :vartype TRESO: str
    :cvar ROUNDAL: "roundal"
    :vartype ROUNDAL: str
    :cvar SHAKA: "shaka"
    :vartype SHAKA: str
    :cvar PINKO: "pinko"
    :vartype PINKO: str
    :cvar CHROME: "chrome"
    :vartype CHROME: str
    :cvar FLOW: "flow"
    :vartype FLOW: str
    """

    NUEVO = "nuevo"
    JWLIKE = "jwlike"
    PARTY = "party"
    TRESO = "treso"
    ROUNDAL = "roundal"
    SHAKA = "shaka"
    PINKO = "pinko"
    CHROME = "chrome"
    FLOW = "flow"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PlayerSkin._member_map_.values()))


@JsonMap({"id_": "id"})
class Player(BaseModel):
    """Player

    :param created_on: Timestamp when the object was created.
    :type created_on: str
    :param default: If it's the default player used on embedded videos.
    :type default: bool
    :param description: Description of the player.
    :type description: str
    :param id_: Id of the player.
    :type id_: int
    :param logo: Whether the logo inside the player is displayed.
    :type logo: bool
    :param logo_control_bar: Whether the logo in the control bar is displayed.
    :type logo_control_bar: bool
    :param logo_control_bar_link: Link to the control bar logo image., defaults to None
    :type logo_control_bar_link: str, optional
    :param logo_link: Link to the logo image., defaults to None
    :type logo_link: str, optional
    :param logo_position: Position of the logo inside the player.
    :type logo_position: PlayerLogoPosition
    :param preview_url: Link to demo the player configuration.
    :type preview_url: str
    :param quality_menu: Whether to display the video quality menu.
    :type quality_menu: bool
    :param rewind_button: Show the rewind button.
    :type rewind_button: bool
    :param share_menu: Whether to display the share menu.
    :type share_menu: bool
    :param show_minithumbs: Whether to display minithumbs.
    :type show_minithumbs: bool
    :param show_title: Show the video title on top.
    :type show_title: bool
    :param skin: Skin of player.
    :type skin: PlayerSkin
    :param speed_menu: Whether to display the speed menu.
    :type speed_menu: bool
    :param title: Player title that is displayed in admin.
    :type title: str
    :param title_logo: Whether the title icon is displayed.
    :type title_logo: bool
    :param title_logo_link: Link to the title logo image., defaults to None
    :type title_logo_link: str, optional
    :param zoom_menu: Whether to display the zoom menu.
    :type zoom_menu: bool
    """

    def __init__(
        self,
        created_on: str,
        default: bool,
        description: str,
        id_: int,
        logo: bool,
        logo_control_bar: bool,
        logo_position: PlayerLogoPosition,
        preview_url: str,
        quality_menu: bool,
        rewind_button: bool,
        share_menu: bool,
        show_minithumbs: bool,
        show_title: bool,
        skin: PlayerSkin,
        speed_menu: bool,
        title: str,
        title_logo: bool,
        zoom_menu: bool,
        logo_control_bar_link: str = None,
        logo_link: str = None,
        title_logo_link: str = None,
    ):
        """Player

        :param created_on: Timestamp when the object was created.
        :type created_on: str
        :param default: If it's the default player used on embedded videos.
        :type default: bool
        :param description: Description of the player.
        :type description: str
        :param id_: Id of the player.
        :type id_: int
        :param logo: Whether the logo inside the player is displayed.
        :type logo: bool
        :param logo_control_bar: Whether the logo in the control bar is displayed.
        :type logo_control_bar: bool
        :param logo_control_bar_link: Link to the control bar logo image., defaults to None
        :type logo_control_bar_link: str, optional
        :param logo_link: Link to the logo image., defaults to None
        :type logo_link: str, optional
        :param logo_position: Position of the logo inside the player.
        :type logo_position: PlayerLogoPosition
        :param preview_url: Link to demo the player configuration.
        :type preview_url: str
        :param quality_menu: Whether to display the video quality menu.
        :type quality_menu: bool
        :param rewind_button: Show the rewind button.
        :type rewind_button: bool
        :param share_menu: Whether to display the share menu.
        :type share_menu: bool
        :param show_minithumbs: Whether to display minithumbs.
        :type show_minithumbs: bool
        :param show_title: Show the video title on top.
        :type show_title: bool
        :param skin: Skin of player.
        :type skin: PlayerSkin
        :param speed_menu: Whether to display the speed menu.
        :type speed_menu: bool
        :param title: Player title that is displayed in admin.
        :type title: str
        :param title_logo: Whether the title icon is displayed.
        :type title_logo: bool
        :param title_logo_link: Link to the title logo image., defaults to None
        :type title_logo_link: str, optional
        :param zoom_menu: Whether to display the zoom menu.
        :type zoom_menu: bool
        """
        self.created_on = created_on
        self.default = default
        self.description = description
        self.id_ = id_
        self.logo = logo
        self.logo_control_bar = logo_control_bar
        if logo_control_bar_link is not None:
            self.logo_control_bar_link = logo_control_bar_link
        if logo_link is not None:
            self.logo_link = logo_link
        self.logo_position = self._enum_matching(
            logo_position, PlayerLogoPosition.list(), "logo_position"
        )
        self.preview_url = preview_url
        self.quality_menu = quality_menu
        self.rewind_button = rewind_button
        self.share_menu = share_menu
        self.show_minithumbs = show_minithumbs
        self.show_title = show_title
        self.skin = self._enum_matching(skin, PlayerSkin.list(), "skin")
        self.speed_menu = speed_menu
        self.title = title
        self.title_logo = title_logo
        if title_logo_link is not None:
            self.title_logo_link = title_logo_link
        self.zoom_menu = zoom_menu
