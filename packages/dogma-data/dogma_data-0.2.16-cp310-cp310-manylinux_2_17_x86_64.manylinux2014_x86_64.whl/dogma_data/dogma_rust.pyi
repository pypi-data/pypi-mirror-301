import numpy as np
from numpy.typing import NDArray

class FastaMapping:
    def __init__(self, mapping: dict[str, int], default_value: int):
        ...
    def __str__(self) -> str:
        ...
    def __repr__(self) -> str:
        ...

def parse_fasta(path: str, mapping: FastaMapping) -> tuple[NDArray[np.uint8], NDArray[np.int64], NDArray[np.int64]]:
    ...

def concatenate_numpy(arrays: list[NDArray]) -> tuple[NDArray[np.uint8], NDArray[np.int64]]:
    ...

def concatenate_awkward(awkwards: list[tuple[NDArray, NDArray[np.int64]]]):
    ...
    
def awkward_from_list_of_numpy(arrays: list[NDArray]) -> tuple[NDArray[np.uint8], NDArray[np.int64]]:
    ...

def parse_cluster_member_fasta(path: str, mapping: FastaMapping) -> tuple[NDArray[np.uint8], NDArray[np.int64], NDArray[np.uint32], NDArray[np.uint32]]:
    ...

def find_boundaries_u32(arr: NDArray[np.uint32]) -> NDArray[np.int64]:
    ...

def find_chunk_boundaries(sequence_lengths: NDArray[np.int64], chunk_tokens: int) -> NDArray[np.int64]:
    ...
