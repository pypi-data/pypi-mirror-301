# coding: utf-8

"""
    Conekta API

    Conekta sdk

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from conekta.models.company_fiscal_info_response import CompanyFiscalInfoResponse
from conekta.models.company_payout_destination_response import CompanyPayoutDestinationResponse
from typing import Optional, Set
from typing_extensions import Self

class CompanyResponse(BaseModel):
    """
    Company model
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The child company's unique identifier")
    created_at: Optional[StrictInt] = Field(default=None, description="The resource's creation date (unix timestamp)")
    name: Optional[StrictStr] = Field(default=None, description="The child company's name")
    object: Optional[StrictStr] = Field(default=None, description="The resource's type")
    parent_company_id: Optional[StrictStr] = Field(default=None, description="Id of the parent company")
    use_parent_fiscal_data: Optional[StrictBool] = Field(default=None, description="Whether the parent company's fiscal data is to be used for liquidation and tax purposes")
    payout_destination: Optional[CompanyPayoutDestinationResponse] = None
    fiscal_info: Optional[CompanyFiscalInfoResponse] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "name", "object", "parent_company_id", "use_parent_fiscal_data", "payout_destination", "fiscal_info"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['company']):
            raise ValueError("must be one of enum values ('company')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompanyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payout_destination
        if self.payout_destination:
            _dict['payout_destination'] = self.payout_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fiscal_info
        if self.fiscal_info:
            _dict['fiscal_info'] = self.fiscal_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompanyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "name": obj.get("name"),
            "object": obj.get("object"),
            "parent_company_id": obj.get("parent_company_id"),
            "use_parent_fiscal_data": obj.get("use_parent_fiscal_data"),
            "payout_destination": CompanyPayoutDestinationResponse.from_dict(obj["payout_destination"]) if obj.get("payout_destination") is not None else None,
            "fiscal_info": CompanyFiscalInfoResponse.from_dict(obj["fiscal_info"]) if obj.get("fiscal_info") is not None else None
        })
        return _obj


