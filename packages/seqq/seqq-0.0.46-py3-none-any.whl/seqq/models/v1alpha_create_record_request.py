# coding: utf-8

"""
    seqq

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from seqq.models.v1alpha_record import V1alphaRecord
from typing import Optional, Set
from typing_extensions import Self

class V1alphaCreateRecordRequest(BaseModel):
    """
    CreateRecordRequest is the request message for CreateRecord.
    """ # noqa: E501
    collection: StrictStr = Field(description="The `name` of the Collection to create Records in. Format: `collections/{collection_id}`.")
    record_id: StrictStr = Field(description="The ID of the Record to create.  This is appended to the Collection name and `/records/` to create the Record name.  For example, if `collection` is `collections/my-collection`, and `record_id` is `my-prefix/my-record`, the Record name will be `collections/my-collection/records/my-prefix/my-record`.  The `/` delimiter is encouraged to group Records by prefix.", alias="recordId")
    record: V1alphaRecord
    __properties: ClassVar[List[str]] = ["collection", "recordId", "record"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alphaCreateRecordRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of record
        if self.record:
            _dict['record'] = self.record.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alphaCreateRecordRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collection": obj.get("collection"),
            "recordId": obj.get("recordId"),
            "record": V1alphaRecord.from_dict(obj["record"]) if obj.get("record") is not None else None
        })
        return _obj


