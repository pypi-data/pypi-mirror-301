# coding: utf-8

"""
    seqq

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1alphaAlignment(BaseModel):
    """
    Alignment is a single alignment within a Hit.
    """ # noqa: E501
    align_len: Optional[StrictStr] = Field(default=None, description="Alignment length.", alias="alignLen")
    identity: Optional[StrictStr] = Field(default=None, description="Number of matching basepairs.")
    gaps: Optional[StrictStr] = Field(default=None, description="Number of gaps.")
    query_from: Optional[StrictStr] = Field(default=None, description="Start of alignment on subject sequece.", alias="queryFrom")
    query_to: Optional[StrictStr] = Field(default=None, description="End of alignment on query sequence.", alias="queryTo")
    hit_from: Optional[StrictStr] = Field(default=None, description="Start of alignment on subject sequence.", alias="hitFrom")
    hit_to: Optional[StrictStr] = Field(default=None, description="End of alignment on subject sequence.", alias="hitTo")
    e_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expect value.", alias="eValue")
    bit_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Bit score.", alias="bitScore")
    __properties: ClassVar[List[str]] = ["alignLen", "identity", "gaps", "queryFrom", "queryTo", "hitFrom", "hitTo", "eValue", "bitScore"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alphaAlignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "align_len",
            "identity",
            "gaps",
            "query_from",
            "query_to",
            "hit_from",
            "hit_to",
            "e_value",
            "bit_score",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alphaAlignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignLen": obj.get("alignLen"),
            "identity": obj.get("identity"),
            "gaps": obj.get("gaps"),
            "queryFrom": obj.get("queryFrom"),
            "queryTo": obj.get("queryTo"),
            "hitFrom": obj.get("hitFrom"),
            "hitTo": obj.get("hitTo"),
            "eValue": obj.get("eValue"),
            "bitScore": obj.get("bitScore")
        })
        return _obj


