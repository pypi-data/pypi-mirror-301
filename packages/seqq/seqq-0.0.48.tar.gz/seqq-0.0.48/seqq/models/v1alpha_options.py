# coding: utf-8

"""
    seqq

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from seqq.models.options_matrix import OptionsMatrix
from seqq.models.options_strand import OptionsStrand
from seqq.models.options_task import OptionsTask
from typing import Optional, Set
from typing_extensions import Self

class V1alphaOptions(BaseModel):
    """
    V1alphaOptions
    """ # noqa: E501
    task: Optional[OptionsTask] = None
    word_size: Optional[StrictStr] = Field(default=None, alias="wordSize")
    evalue: Optional[Union[StrictFloat, StrictInt]] = None
    gap_open: Optional[StrictStr] = Field(default=None, alias="gapOpen")
    gap_extend: Optional[StrictStr] = Field(default=None, alias="gapExtend")
    reward: Optional[StrictStr] = None
    penalty: Optional[StrictStr] = None
    matrix: Optional[OptionsMatrix] = None
    strand: Optional[OptionsStrand] = None
    perc_identity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="percIdentity")
    ungapped: Optional[StrictBool] = None
    threshold: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["task", "wordSize", "evalue", "gapOpen", "gapExtend", "reward", "penalty", "matrix", "strand", "percIdentity", "ungapped", "threshold"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alphaOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alphaOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task": obj.get("task"),
            "wordSize": obj.get("wordSize"),
            "evalue": obj.get("evalue"),
            "gapOpen": obj.get("gapOpen"),
            "gapExtend": obj.get("gapExtend"),
            "reward": obj.get("reward"),
            "penalty": obj.get("penalty"),
            "matrix": obj.get("matrix"),
            "strand": obj.get("strand"),
            "percIdentity": obj.get("percIdentity"),
            "ungapped": obj.get("ungapped"),
            "threshold": obj.get("threshold")
        })
        return _obj


