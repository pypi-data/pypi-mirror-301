# case name	return code for test succes	exec command	[optional python commands (must evaluate to true to mean succesful test)]

#simple yes test	True	echo yes > tmp_case.txt	"yeZ"==open("tmp_case.txt", "r").read().strip(); None==os.remove("tmp_case.txt")
#simple no test	False	exit(1)
#test_to_fail	True	exit(1)

e_coli	True	influx_s.py cases/e_coli	os.stat("cases/e_coli.err").st_size==0; re.search("it=6\tres=7.843096\tnormstep=3.68858\de-06\tbtk=1", open("cases/e_coli.log", "r").read())
e_coli_i	True	influx_i.py cases/e_coli_i	os.stat("cases/e_coli_i.err").st_size==0; re.search("it=15\tres=20.96358\tnormstep=5.44\d*e-05\tbtk=1", open("cases/e_coli_i.log", "r").read())
e_coli_i_emu	True	influx_i.py --emu cases/e_coli_i_1_	os.stat("cases/e_coli_i_1_.err").st_size==0; re.search("it=15\tres=20.96\d*\tnormstep=5.4\d*e-05\tbtk=1", open("cases/e_coli_i_1_.log", "r").read())
e_coli.noopt	True	influx_s.py --noopt cases/e_coli_1_	os.stat("cases/e_coli_1_.err").st_size==0
e_coli.emu	True	influx_s.py --emu cases/e_coli_2_	os.stat("cases/e_coli_2_.err").st_size==0; re.search("it=6\tres=7.843096\tnormstep=3.68858\de-06\tbtk=1", open("cases/e_coli_2_.log", "r").read())
e_coli.mc4	True	influx_s.py --sens mc=4 --seed 7 --np 4 cases/e_coli_3_	os.stat("cases/e_coli_3_.err").st_size==0; re.search("it=6\tres=7.843096\tnormstep=3.68858\de-06\tbtk=1", open("cases/e_coli_3_.log", "r").read()); None==setvar("text_kvh", open("cases/e_coli_3__res.kvh", "r").read()); ("cluster type\t" in text_kvh and all(float(x) < 1.e-5 for x in re.findall("\t\tnormp\t(.*)", text_kvh)[0].split("\t")))
e_coli.emu.mc4	True	influx_s.py --emu --sens mc=4 --seed 7 --np 4 cases/e_coli_4_	os.stat("cases/e_coli_4_.err").st_size==0; re.search("it=6\tres=7.843096\tnormstep=3.68858\de-06\tbtk=1", open("cases/e_coli_4_.log", "r").read()); None==setvar("text_kvh", open("cases/e_coli_4__res.kvh", "r").read()); ("cluster type\t" in text_kvh and all(float(x) < 1.e-5 for x in re.findall("\t\tnormp\t(.*)", text_kvh)[0].split("\t")))
e_coli_i.mc4	True	influx_i.py --sens mc=4 --seed 777 --np 4 cases/e_coli_i_2_	os.stat("cases/e_coli_i_2_.err").st_size==0; "\t\tfailed to calculate\t0" in open("cases/e_coli_i_2__res.kvh", "r").read()
e_coli_i.mc4.np1	True	influx_i.py --sens mc=4 --seed 7 --np 1 cases/e_coli_i_3_	os.stat("cases/e_coli_i_3_.err").st_size==0; "\t\tfailed to calculate\t0" in open("cases/e_coli_i_3__res.kvh", "r").read()
e_coli_i.emu.mc4	True	influx_i.py --sens mc=4 --emu --seed 7 --np 4 cases/e_coli_i_4_	os.stat("cases/e_coli_i_4_.err").st_size==0; "\t\tfailed to calculate\t0" in open("cases/e_coli_i_4__res.kvh", "r").read()
e_coli_NA	True	influx_s.py cases/e_coli_NA	os.stat("cases/e_coli_NA.err").st_size==0; re.search("it=6\tres=7.843096\tnormstep=3.68858\de-06\tbtk=1",  open("cases/e_coli_NA.log", "r").read())
e_coli_growth	True	influx_s.py cases/e_coli_growth	os.stat("cases/e_coli_growth.err").st_size==0; re.search("it=15\tres=7.959014\tnormstep=7.29232\de-06\tbtk=1",  open("cases/e_coli_growth.log", "r").read())
e_coli_BM_eqs	True	influx_s.py cases/Modele_GC-AAprot_BM_pmi_SSOtest	re.search("it=1\tres=4.67\d+\t", open("cases/Modele_GC-AAprot_BM_pmi_SSOtest.log", "r").read())
utf8_BOM	True	ftbl2netan.py cases/e_coli_growth_utf8 > cases/e_coli_growth_utf8.netan	
constr_ineq_clownr	True	influx_s.py cases/explicit_ineq_constr_flux	None==setvar("texterr", open("cases/explicit_ineq_constr_flux.err", "r").read()); "c.n.r1>=1e-04" in texterr
spe_char	True	influx_s.py cases/spe_char_flux	None==setvar("texterr", open("cases/spe_char_flux.err", "r").read()); "r'(2)" not in texterr
long_reac	True	influx_s.py --fullsys cases/long_reac	None==setvar("textlog", open("cases/long_reac.log", "r").read()); float(re.findall("it=\d+\tres=([^ \t\n\r]+)", textlog)[-1]) <= 1.e-10
e_coli_prl	True	influx_s.py cases/e_coli_glc1-6n	re.search("res=21.85", open("cases/e_coli_glc1-6n.log", "r").read())
e_coli_i_prl	True	influx_i.py cases/e_coli_GX_prl	re.search("res=44.12", open("cases/e_coli_GX_prl.log", "r").read())
xml_ecoli	True	ftbl2metxml.py cases/e_coli
h_sapiens_pf	True	influx_s.py cases/h_sapiens	re.search("\t\tpf:ALA_m\t0\.[0-9]+", open("cases/h_sapiens_res.kvh", "r").read())
dzwf_nbc0	True	influx_s.py cases/Dzwf_1
prl_exp_mc	True	influx_s.py --sens mc=4 cases/e_coli_1-Glc_exact
utf16	True	ftbl2netan.py cases/UTF16.ftbl
utf32	True	ftbl2netan.py cases/UTF32.ftbl
mc_prl_weighted_pools	True	influx_s.py cases/mc_prl_weighted_pools.ftbl	re.search("monte-carlo", open("cases/mc_prl_weighted_pools_res.kvh").read())
sln_use	True	influx_s.py --sln cases/model_Man-Bio12	re.search("\tres=8.61", open("cases/model_Man-Bio12.log", "r").read())
# dim pb reported in mail Baudoin Delépine 2019-02-08
dim_fixed	True	influx_i.py cases/methanol_v1.ftbl	
#  NA in gradient reported in mail Baudoin Delépine 2019-02-15
na_grad	True	influx_i.py cases/methanol_v2.2_bio1	re.findall("\n.*starting cost value\t(.+)\n", open("cases/methanol_v2.2_bio1_res.kvh", "r").read())[0] != "NA"
err.too_many_dep_fluxes	False	influx_s.py cases/branching-2014-09-01	None==setvar("texterr", open("cases/branching-2014-09-01.err", "r").read()); "Flux matrix is not square or is singular: (3eq x 4unk)" in texterr; "Candidate(s) for free or constrained flux(es):\nd.n.v6\nFor this choice, condition number of stoichiometric matrix will be" in texterr
err.too_many_free_fluxes.1	False	influx_s.py cases/branching_MS	None==setvar("texterr", open("cases/branching_MS.err", "r").read()); "Flux matrix is not square or is singular: (3eq x 2unk)" in texterr; "There is (are) probably 1 extra free flux(es) among the following:\nf.n.v1\nf.n.v3\nProposal to declare dependent flux(es) is:\nd.n.v2\nd.n.v4\nc.n.v5\nwhile free and constrained fluxes should be:\nf.n.v1\nf.n.v3\nc.n.v6\nc.x.v1\nc.x.v2\nc.x.v3\nc.x.v4\nc.x.v5\nc.x.v6\nFor this choice, condition number of stoichiometric matrix will be 7.1907483" in texterr
err.too_many_free_fluxes.2	False	influx_s.py cases/err_extra_ff-2014-04-02	None==setvar("texterr", open("cases/err_extra_ff-2014-04-02.err", "r").read()); "Flux matrix is not square or is singular: (68eq x 63unk)" in texterr;
err.no_dep_fluxes	False	influx_s.py cases/no_dep_fluxes	None==setvar("texterr", open("cases/no_dep_fluxes.err", "r").read()); "Exception: A balance on metabolite 'Gnt6P' does not contain any dependent flux." in texterr
err.lack_fluxval	False	influx_s.py cases/err_lack_fluxval	None==setvar("texterr", open("cases/err_lack_fluxval.err", "r").read()); "In the field 'VALUE(F/C)', a float value expected" in texterr
err.depflux_zero-2014-04-02	False	influx_s.py cases/err_depflux_zero-2014-04-02	None==setvar("texterr", open("cases/err_depflux_zero-2014-04-02.err", "r").read()); "lab_resid: Cumomer matrix is singular. Try '--clownr N' or/and '--zc N' options" in texterr
err.lindep_rows-2014-04-02	False	influx_s.py cases/err_lindep_rows-2014-04-02	None==setvar("texterr", open("cases/err_lindep_rows-2014-04-02.err", "r").read()); "Error: Among 72 equations (rows), 4 are redundant and must be eliminated by hand." in texterr
err.jac_rank_deficient	False	influx_s.py cases/err_jac_rank_def	None==setvar("texterr", open("cases/err_jac_rank_def.err", "r").read()); "Provided measurements (labeling and fluxes) are not sufficient to resolve all free fluxes."  in texterr
err.singular_stoech	False	influx_s.py cases/err_singular_stoech	None==setvar("texterr", open("cases/err_singular_stoech.err", "r").read()); "Flux matrix is not square or is singular: (66eq x 66unk)" in texterr
err.dev_zero	False	influx_s.py cases/err_dev_zero	None==setvar("texterr", open("cases/err_dev_zero.err", "r").read()); "DEVIATION must be positive" in texterr
err.rep_let	False	influx_s.py cases/rep_let	None==setvar("texterr", open("cases/rep_let.err", "r").read()); "Character 'a' is present twice" in texterr
err.bad_map	False	influx_s.py cases/bad_map	None==setvar("texterr", open("cases/bad_map.err", "r").read()); "Letter(s) 'b, d' are present on the left but" in texterr
err.tr_miss	False	influx_s.py cases/err_trans_missing	None==setvar("texterr", open("cases/err_trans_missing.err", "r").read()); "Expected label transitions. Got" in texterr
# case when there is only one entry in labeling (dimnames was failing)
input1C	True	influx_i.py cases/input1C_i.ftbl	
# --ffguess when redundant reaction is present
ffguess	True	influx_i.py cases/ffguess_i.ftbl	
# R pkgs update
rdep	True	influx_s.py --install_rdep	
# executable without .py
exe	True	influx_s --version	
exei	True	influx_i --version	
# free flux injection
ff2ftbl	True	ff2ftbl cases/e_coli > cases/e_coli_ff.ftbl	
# reproducible R code generation
Rreprod	True	influx_s --nocalc cases/e_coli && mv -f cases/e_coli.R cases/e_coli.R1 && influx_s --nocalc cases/e_coli && [ "$(tail -n +5 cases/e_coli.R | md5sum)" == "$(tail -n +5 cases/e_coli.R1 | md5sum)" ] && rm -f cases/e_coli.R1
# pso+BFGS+nlsic
pso	True	influx_s.py cases/e_coli_pso.ftbl	
# ffguess redundant equality
ffg	True	influx_s.py --seed 777 cases/ffguess_eq.ftbl	
# weird entry in labcin
weird_i	False	influx_i.py cases/e_coli2_i.ftbl	None==setvar("texterr", open("cases/e_coli2_i.err", "r").read()); "'0,8301287113482'" in texterr
# mumps memory issue
mumps	False	influx_s.py cases/mumps_mem.ftbl	None==setvar("texterr", open("cases/mumps_mem.err", "r").read()); "Cumomer matrix is singular." in texterr
