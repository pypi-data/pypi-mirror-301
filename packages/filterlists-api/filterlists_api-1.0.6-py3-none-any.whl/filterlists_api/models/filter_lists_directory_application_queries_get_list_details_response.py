# coding: utf-8

"""
    FilterLists Directory API

    An ASP.NET Core API serving the core FilterList information.

    The version of the OpenAPI document: v1
    Contact: b72d8917-851f-4864-ad5c-61630408048d@gb4emlsep.anonaddy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from filterlists_api.models.filter_lists_directory_application_queries_get_list_details_view_url_response import FilterListsDirectoryApplicationQueriesGetListDetailsViewUrlResponse
from typing import Optional, Set
from typing_extensions import Self

class FilterListsDirectoryApplicationQueriesGetListDetailsResponse(BaseModel):
    """
    FilterListsDirectoryApplicationQueriesGetListDetailsResponse
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The identifier.")
    name: Optional[StrictStr] = Field(description="The unique name in title case.")
    description: Optional[StrictStr] = Field(default=None, description="The brief description in English (preferably quoted from the project).")
    license_id: Optional[StrictInt] = Field(default=None, description="The identifier of the License under which this FilterList is released.", alias="licenseId")
    syntax_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Syntaxes implemented by this FilterList.", alias="syntaxIds")
    language_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Languages targeted by this FilterList.", alias="languageIds")
    tag_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Tags applied to this FilterList.", alias="tagIds")
    view_urls: Optional[List[FilterListsDirectoryApplicationQueriesGetListDetailsViewUrlResponse]] = Field(default=None, description="The view URLs.", alias="viewUrls")
    home_url: Optional[StrictStr] = Field(default=None, description="The URL of the home page.", alias="homeUrl")
    onion_url: Optional[StrictStr] = Field(default=None, description="The URL of the Tor / Onion page.", alias="onionUrl")
    policy_url: Optional[StrictStr] = Field(default=None, description="The URL of the policy/guidelines for the types of rules this FilterList includes.", alias="policyUrl")
    submission_url: Optional[StrictStr] = Field(default=None, description="The URL of the submission/contact form for adding rules to this FilterList.", alias="submissionUrl")
    issues_url: Optional[StrictStr] = Field(default=None, description="The URL of the GitHub Issues page.", alias="issuesUrl")
    forum_url: Optional[StrictStr] = Field(default=None, description="The URL of the forum page.", alias="forumUrl")
    chat_url: Optional[StrictStr] = Field(default=None, description="The URL of the chat room.", alias="chatUrl")
    email_address: Optional[StrictStr] = Field(default=None, description="The email address at which the project can be contacted.", alias="emailAddress")
    donate_url: Optional[StrictStr] = Field(default=None, description="The URL at which donations to the project can be made.", alias="donateUrl")
    maintainer_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Maintainers of this FilterList.", alias="maintainerIds")
    upstream_filter_list_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the FilterLists from which this FilterList was forked.", alias="upstreamFilterListIds")
    fork_filter_list_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the FilterLists that have been forked from this FilterList.", alias="forkFilterListIds")
    included_in_filter_list_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the FilterLists that include this FilterList.", alias="includedInFilterListIds")
    includes_filter_list_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the FilterLists that this FilterList includes.", alias="includesFilterListIds")
    dependency_filter_list_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the FilterLists that this FilterList depends upon.", alias="dependencyFilterListIds")
    dependent_filter_list_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the FilterLists dependent upon this FilterList.", alias="dependentFilterListIds")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "licenseId", "syntaxIds", "languageIds", "tagIds", "viewUrls", "homeUrl", "onionUrl", "policyUrl", "submissionUrl", "issuesUrl", "forumUrl", "chatUrl", "emailAddress", "donateUrl", "maintainerIds", "upstreamFilterListIds", "forkFilterListIds", "includedInFilterListIds", "includesFilterListIds", "dependencyFilterListIds", "dependentFilterListIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterListsDirectoryApplicationQueriesGetListDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in view_urls (list)
        _items = []
        if self.view_urls:
            for _item_view_urls in self.view_urls:
                if _item_view_urls:
                    _items.append(_item_view_urls.to_dict())
            _dict['viewUrls'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if syntax_ids (nullable) is None
        # and model_fields_set contains the field
        if self.syntax_ids is None and "syntax_ids" in self.model_fields_set:
            _dict['syntaxIds'] = None

        # set to None if language_ids (nullable) is None
        # and model_fields_set contains the field
        if self.language_ids is None and "language_ids" in self.model_fields_set:
            _dict['languageIds'] = None

        # set to None if tag_ids (nullable) is None
        # and model_fields_set contains the field
        if self.tag_ids is None and "tag_ids" in self.model_fields_set:
            _dict['tagIds'] = None

        # set to None if view_urls (nullable) is None
        # and model_fields_set contains the field
        if self.view_urls is None and "view_urls" in self.model_fields_set:
            _dict['viewUrls'] = None

        # set to None if home_url (nullable) is None
        # and model_fields_set contains the field
        if self.home_url is None and "home_url" in self.model_fields_set:
            _dict['homeUrl'] = None

        # set to None if onion_url (nullable) is None
        # and model_fields_set contains the field
        if self.onion_url is None and "onion_url" in self.model_fields_set:
            _dict['onionUrl'] = None

        # set to None if policy_url (nullable) is None
        # and model_fields_set contains the field
        if self.policy_url is None and "policy_url" in self.model_fields_set:
            _dict['policyUrl'] = None

        # set to None if submission_url (nullable) is None
        # and model_fields_set contains the field
        if self.submission_url is None and "submission_url" in self.model_fields_set:
            _dict['submissionUrl'] = None

        # set to None if issues_url (nullable) is None
        # and model_fields_set contains the field
        if self.issues_url is None and "issues_url" in self.model_fields_set:
            _dict['issuesUrl'] = None

        # set to None if forum_url (nullable) is None
        # and model_fields_set contains the field
        if self.forum_url is None and "forum_url" in self.model_fields_set:
            _dict['forumUrl'] = None

        # set to None if chat_url (nullable) is None
        # and model_fields_set contains the field
        if self.chat_url is None and "chat_url" in self.model_fields_set:
            _dict['chatUrl'] = None

        # set to None if email_address (nullable) is None
        # and model_fields_set contains the field
        if self.email_address is None and "email_address" in self.model_fields_set:
            _dict['emailAddress'] = None

        # set to None if donate_url (nullable) is None
        # and model_fields_set contains the field
        if self.donate_url is None and "donate_url" in self.model_fields_set:
            _dict['donateUrl'] = None

        # set to None if maintainer_ids (nullable) is None
        # and model_fields_set contains the field
        if self.maintainer_ids is None and "maintainer_ids" in self.model_fields_set:
            _dict['maintainerIds'] = None

        # set to None if upstream_filter_list_ids (nullable) is None
        # and model_fields_set contains the field
        if self.upstream_filter_list_ids is None and "upstream_filter_list_ids" in self.model_fields_set:
            _dict['upstreamFilterListIds'] = None

        # set to None if fork_filter_list_ids (nullable) is None
        # and model_fields_set contains the field
        if self.fork_filter_list_ids is None and "fork_filter_list_ids" in self.model_fields_set:
            _dict['forkFilterListIds'] = None

        # set to None if included_in_filter_list_ids (nullable) is None
        # and model_fields_set contains the field
        if self.included_in_filter_list_ids is None and "included_in_filter_list_ids" in self.model_fields_set:
            _dict['includedInFilterListIds'] = None

        # set to None if includes_filter_list_ids (nullable) is None
        # and model_fields_set contains the field
        if self.includes_filter_list_ids is None and "includes_filter_list_ids" in self.model_fields_set:
            _dict['includesFilterListIds'] = None

        # set to None if dependency_filter_list_ids (nullable) is None
        # and model_fields_set contains the field
        if self.dependency_filter_list_ids is None and "dependency_filter_list_ids" in self.model_fields_set:
            _dict['dependencyFilterListIds'] = None

        # set to None if dependent_filter_list_ids (nullable) is None
        # and model_fields_set contains the field
        if self.dependent_filter_list_ids is None and "dependent_filter_list_ids" in self.model_fields_set:
            _dict['dependentFilterListIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterListsDirectoryApplicationQueriesGetListDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "licenseId": obj.get("licenseId"),
            "syntaxIds": obj.get("syntaxIds"),
            "languageIds": obj.get("languageIds"),
            "tagIds": obj.get("tagIds"),
            "viewUrls": [FilterListsDirectoryApplicationQueriesGetListDetailsViewUrlResponse.from_dict(_item) for _item in obj["viewUrls"]] if obj.get("viewUrls") is not None else None,
            "homeUrl": obj.get("homeUrl"),
            "onionUrl": obj.get("onionUrl"),
            "policyUrl": obj.get("policyUrl"),
            "submissionUrl": obj.get("submissionUrl"),
            "issuesUrl": obj.get("issuesUrl"),
            "forumUrl": obj.get("forumUrl"),
            "chatUrl": obj.get("chatUrl"),
            "emailAddress": obj.get("emailAddress"),
            "donateUrl": obj.get("donateUrl"),
            "maintainerIds": obj.get("maintainerIds"),
            "upstreamFilterListIds": obj.get("upstreamFilterListIds"),
            "forkFilterListIds": obj.get("forkFilterListIds"),
            "includedInFilterListIds": obj.get("includedInFilterListIds"),
            "includesFilterListIds": obj.get("includesFilterListIds"),
            "dependencyFilterListIds": obj.get("dependencyFilterListIds"),
            "dependentFilterListIds": obj.get("dependentFilterListIds")
        })
        return _obj


