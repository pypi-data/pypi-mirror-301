# coding: utf-8

"""
    FilterLists Directory API

    An ASP.NET Core API serving the core FilterList information.

    The version of the OpenAPI document: v1
    Contact: b72d8917-851f-4864-ad5c-61630408048d@gb4emlsep.anonaddy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FilterListsDirectoryApplicationQueriesGetListsResponse(BaseModel):
    """
    FilterListsDirectoryApplicationQueriesGetListsResponse
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The identifier.")
    name: Optional[StrictStr] = Field(default=None, description="The unique name in title case.")
    description: Optional[StrictStr] = Field(default=None, description="The brief description in English (preferably quoted from the project).")
    license_id: Optional[StrictInt] = Field(default=None, description="The identifier of the License under which this FilterList is released.", alias="licenseId")
    syntax_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Syntaxes implemented by this FilterList.", alias="syntaxIds")
    language_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Languages targeted by this FilterList.", alias="languageIds")
    tag_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Tags applied to this FilterList.", alias="tagIds")
    primary_view_url: Optional[StrictStr] = Field(default=None, description="The primary view URL.", alias="primaryViewUrl")
    maintainer_ids: Optional[List[StrictInt]] = Field(default=None, description="The identifiers of the Maintainers of this FilterList.", alias="maintainerIds")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "licenseId", "syntaxIds", "languageIds", "tagIds", "primaryViewUrl", "maintainerIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterListsDirectoryApplicationQueriesGetListsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if syntax_ids (nullable) is None
        # and model_fields_set contains the field
        if self.syntax_ids is None and "syntax_ids" in self.model_fields_set:
            _dict['syntaxIds'] = None

        # set to None if language_ids (nullable) is None
        # and model_fields_set contains the field
        if self.language_ids is None and "language_ids" in self.model_fields_set:
            _dict['languageIds'] = None

        # set to None if tag_ids (nullable) is None
        # and model_fields_set contains the field
        if self.tag_ids is None and "tag_ids" in self.model_fields_set:
            _dict['tagIds'] = None

        # set to None if primary_view_url (nullable) is None
        # and model_fields_set contains the field
        if self.primary_view_url is None and "primary_view_url" in self.model_fields_set:
            _dict['primaryViewUrl'] = None

        # set to None if maintainer_ids (nullable) is None
        # and model_fields_set contains the field
        if self.maintainer_ids is None and "maintainer_ids" in self.model_fields_set:
            _dict['maintainerIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterListsDirectoryApplicationQueriesGetListsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "licenseId": obj.get("licenseId"),
            "syntaxIds": obj.get("syntaxIds"),
            "languageIds": obj.get("languageIds"),
            "tagIds": obj.get("tagIds"),
            "primaryViewUrl": obj.get("primaryViewUrl"),
            "maintainerIds": obj.get("maintainerIds")
        })
        return _obj


