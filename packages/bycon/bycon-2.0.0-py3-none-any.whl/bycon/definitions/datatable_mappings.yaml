description: >-

  These definitions determine the mappings of individual parameters between

  * data objects (e.g. MongoDB documents)
  * columnar representations (e.g. tab-delimited `.pgxtab` files)
  * `parameter=value` descriptors in `.pgxseg` headers

  The individual parameters are defined separately for each context ("entities").
  Reading the same datatable into a dictionary/object will e.g. lead to the
  `biosample_id` values being mapped to `id` if read in a `biosample` context
  but to `biosample_id` if read under a `genomicVariant` context.

  ## Conventions

  * the default `type` is string (not indicated); options are `integer`,
    `number`, `array` and `boolean`
  * the same is true for `items` in arrays
  * if a `prefix_split` exists values from the array will be assigned to separate
    columns according to the prefix; _i.e._ a prefix of `PMID` under `external_references`
    by convention will lead to the creation of `external_references_id__PMID` and
    `external_references_label__PMID`
  * `indexed` indicates if the according `db_key` should be indexed by the DB
  * `compact` indicates if the parameter should be included in limited data
    representations
  * `computed` indicates that the value of the field will be assigned through
    some update function (e.g. the variant's `id` value from the stringified
    database ObjectId upon insertion ore `age_days` from the `age_iso` value)

  ### `array` fields

  Columns with data of the type `array` are evaluated through the `RefactoredValues`
  class:
  * first the values are comma-split
  * then values are type cast according to their `items.type`, with a special
    treatment for `object`
  * for `type: object`:
      - the individual list values are split again following a `value1::value2`
        ... etc. split 
      - are assigned by **order** to the **ordered** parameters list in
        `items.parameters` (if none given an `["id", "label"]` sequence is assumed)
      - are type cast according to the **ordered** types list in
        `items.types` (if none given ore wrong listy length fallback `string` is
        being used)

  ## ID handling

  The correct provenance handling is important. We use random/generated ID values
  (with optional leading prefixed for readability) to avoid value collisions and
  track `...._legacy_id` valuse for provenance. Here would be an example for a 
  multi-array import from GEO:
  * `GSM360552` & `GSM360675`
    analysis_id: 'pgxcs-kftwo4f0',
    analysis_id: 'pgxcs-kftwp6c9',
    biosample_id: 'pgxbs-kftvk186',
    individual_id: 'pgxind-kftx6109'

definitions:

#------------------------------------------------------------------------------#

  biosample:
    type: object
    required:
      - biosample_id
      - individual_id
    collection: biosamples
    id_parameter: biosample_id
    upstream:
      - individuals
    parameters:
      biosample_id:
        type: string
        db_key: id
        beacon_model_path: biosamples.id
        indexed: True
        compact: True
      individual_id:
        type: string
        db_key: individual_id
        beacon_model_path: biosamples.individualId
        indexed: True
        compact: True
      notes:
        type: string
        db_key: notes
        beacon_model_path: biosamples.notes
      histological_diagnosis_id:
        type: string
        db_key: histological_diagnosis.id
        beacon_model_path: biosamples.histologicalDiagnosis.id
        indexed: True
        compact: True
      histological_diagnosis_label:
        type: string
        db_key: histological_diagnosis.label
        beacon_model_path: biosamples.histologicalDiagnosis.label
        compact: True
      pathological_stage_id:
        type: string
        db_key: pathological_stage.id
        beacon_model_path: biosamples.pathologicalStage.id
        indexed: True
        compact: True
      pathological_stage_label:
        type: string
        db_key: pathological_stage.label
        beacon_model_path: biosamples.pathologicalStage.label
        compact: True
      biosample_status_id:
        type: string
        db_key: biosample_status.id
        beacon_model_path: biosamples.biosampleStatus.id
        indexed: True
        compact: True
      biosample_status_label:
        type: string
        db_key: biosample_status.label
        beacon_model_path: biosamples.biosampleStatus.label
        compact: True
      sample_origin_type_id:
        type: string
        db_key: sample_origin_type.id
        beacon_model_path: biosamples.sampleOriginType.id
        indexed: True
        compact: True
      sample_origin_type_label:
        type: string
        db_key: sample_origin_type.label
        beacon_model_path: biosamples.sampleOriginType.label
        compact: True
      sampled_tissue_id:
        type: string
        db_key: sample_origin_detail.id
        beacon_model_path: biosamples.sampleOriginDetail.id
        indexed: True
        compact: True
      sampled_tissue_label:
        type: string
        db_key: sample_origin_detail.label
        beacon_model_path: biosamples.sampleOriginDetail.label
        compact: True
      tnm:
        type: array
        items:
          type: object
          parameters:
            - id
            - label
          indexed:
            - id
          split_by: '::'
        db_key: pathological_tnm_findings
        beacon_model_path: biosamples.pathologicalTnmFindings.id
        examples:
          - "NCIT:C48721::T1a Stage Finding,NCIT:C48699::M0 Stage Finding"
      tumor_grade_id:
        type: string
        db_key: tumor_grade.id
        beacon_model_path: biosamples.tumorGrade.id
        indexed: True
        compact: True
      tumor_grade_label:
        type: string
        db_key: tumor_grade.label
        beacon_model_path: biosamples.tumorGrade.label
        compact: True
      age_iso:
        type: string
        db_key: collection_moment
        indexed: True
      # sex_id:
      #   type: string
      #   db_key: info.sex.id
      #   indexed: True
      #   compact: True
      # sex_label:
      #   type: string
      #   db_key: info.sex.label
      #   compact: True
      # followup_state_id:
      #   type: string
      #   db_key: followup_state.id
      #   default: 'EFO:0030039'
      #   indexed: True
      #   compact: True
      # followup_state_label:
      #   type: string
      #   db_key: followup_state.label
      #   default: 'no followup status'
      #   compact: True
      # followup_time:
      #   type: string
      #   db_key: followup_time
      #   indexed: True
      #   compact: True
      # recurrence:
      #   db_key: info.recurrence
      #   type: string
      # recurrence_time:
      #   db_key: info.recurrence_time
      #   type: string

      # bycon specials #########################################################

      biosample_label:
        type: string
        db_key: label
        beacon_model_path: False
        compact: True
      icdo_morphology_id:
        type: string
        db_key: icdo_morphology.id
        beacon_model_path: False
        indexed: True
        compact: True
      icdo_morphology_label:
        type: string
        db_key: icdo_morphology.label
        beacon_model_path: False
        compact: True
      icdo_topography_id:
        type: string
        db_key: icdo_topography.id
        beacon_model_path: False
        indexed: True
        compact: True
      icdo_topography_label:
        type: string
        db_key: icdo_topography.label
        beacon_model_path: False
        compact: True
      pubmed_id:
        type: string
        db_key: references.pubmed.id
        indexed: True
        beacon_model_path: False
        compact: True
      pubmed_label:
        type: string
        db_key: references.pubmed.label
        beacon_model_path: False
        compact: True
      cellosaurus_id:
        type: string
        db_key: references.cellosaurus.id
        indexed: True
        beacon_model_path: False
        compact: True
      cellosaurus_label:
        type: string
        db_key: references.cellosaurus.label
        beacon_model_path: False
        compact: True
      cbioportal_id:
        type: string
        db_key: references.cbioportal.id
        indexed: True
        beacon_model_path: False
        compact: True
      cbioportal_label:
        type: string
        db_key: references.cbioportal.label
        beacon_model_path: False
        compact: True
      tcgaproject_id:
        type: string
        db_key: references.tcgaproject.id
        indexed: True
        beacon_model_path: False
        compact: True
      tcgaproject_label:
        type: string
        db_key: references.tcgaproject.label
        beacon_model_path: False
        compact: True
      cohort_ids:
        type: array
        beacon_model_path: False
        db_key: cohort_ids
        indexed: True
        compact: True
        examples:
          - pgx:cohort-2021progenetix
          - pgx:cohort-DIPG
          - pgx:cohort-TCGA
          - pgx:cohort-TCGAcancers
          - pgx:cohort-arraymap
      biosample_name:
        description: >-
          The legacy name for the biosample, which is an identifier
          used during import, e.g. the id used in the donor publication or study.
          It is *not* considered unique in the database but just used during
          import the stage when generating the unique `id` values.
        type: string
        db_key: name
        beacon_model_path: False
        indexed: False
        compact: False
      geoprov_city:
        type: string
        db_key: geo_location.properties.city
        indexed: True
      geoprov_country:
        type: string
        db_key: geo_location.properties.country
        indexed: True
      geoprov_iso_alpha3:
        type: string
        db_key: geo_location.properties.ISO3166alpha3
        indexed: True
      geoprov_long_lat:
        type: array
        items:
          type: number
        db_key: geo_location.geometry.coordinates

      # special export labels
      group_id:
        type: string
        db_key: False
        beacon_model_path: False
        compact: True
      group_label:
        type: string
        db_key: False
        beacon_model_path: False
        compact: True

#------------------------------------------------------------------------------#

  individual:
    type: object
    required:
      - individual_id
    collection: individuals
    id_parameter: individual_id
    upstream: []
    parameters:
      individual_id:
        type: string
        db_key: id
        indexed: True
      sex_id:
        type: string
        db_key: sex.id
        indexed: True
      sex_label:
        type: string
        db_key: sex.label
      age_iso:
        type: string
        db_key: index_disease.onset.age
        indexed: True
      age_days:
        type: number
        db_key: index_disease.onset.age_days
        indexed: True
        computed: True
      data_use_conditions_id:
        type: string
        db_key: data_use_conditions.id
      data_use_conditions_label:
        type: string
        db_key: data_use_conditions.label

      # same as in biosample but different fields; also, compared to Beacon/PXF
      # we use separate objects for "index_disease" (cancer...) and others ("aux...")
      histological_diagnosis_id:
        type: string
        db_key: index_disease.disease_code.id
        indexed: True
      histological_diagnosis_label:
        type: string
        db_key: index_disease.disease_code.label
      index_disease_notes:
        type: string
        db_key: index_disease.notes
      index_disease_followup_time:
        type: string
        db_key: index_disease.followup_time
        indexed: True
      index_disease_followup_state_id:
        type: string
        db_key: index_disease.followup_state.id
        indexed: True
      index_disease_followup_state_label:
        type: string
        db_key: index_disease.followup_state.label
      auxiliary_disease_id:
        type: string
        db_key: auxiliary_disease.disease_code.id
        indexed: True
      auxiliary_disease_label:
        type: string
        db_key: auxiliary_disease.disease_code.label
      auxiliary_disease_notes:
        type: string
        db_key: auxiliary_disease.notes

      # bycon specials
      individual_legacy_id:
        description: >-
          The legacy identifier for the individual, which is an identifier
          used during import, e.g. the id used in the donor publication or study.
          It is *not* considered unique in the database but just used during
          import the stage when generating the unique `id` values.
        type: string
        db_key: info.legacy_id
        beacon_model_path: False
        indexed: False


#--------------------------- analysis & run -----------------------------------#
  
  # analysis & run data are combined in th analysis object / analyses collection

  analysis:
    type: object
    required:
      - analysis_id
      - biosample_id
      - individual_id
    collection: analyses
    id_parameter: analysis_id
    upstream:
      - individuals
      - biosamples
    parameters:
      analysis_id:
        db_key: id
        beacon_model_path: analyses.id
        indexed: True
      biosample_id:
        db_key: biosample_id
        beacon_model_path: analyses.biosample_id
        indexed: True
      individual_id:
        db_key: individual_id
        beacon_model_path: analyses.individual_id
        indexed: True
      platform_id:
        db_key: platform_model.id
        beacon_model_path: runs.platformModel.id
        indexed: True
      platform_label:
        db_key: platform_model.label
        beacon_model_path: runs.platformModel.label
      pipeline_name:
        db_key: pipeline_name
        beacon_model_path: analyses.pipelineName
        indexed: True
      pipeline_ref:
        db_key: pipeline_ref
        beacon_model_path: analyses.pipelineRef
 
 # In Beacon but not used by us
 #      library_source_id:
 #        db_key: library_source.id
 #        beacon_model_path: runs.librarySource.id
 #        default: "GENEPIO:0001966"
 #      library_source_label:
 #        db_key: library_source.label
 #        beacon_model_path: runs.librarySource.label
 #        default: "genomic source"

      # bycon &  data management specials
      analysis_operation_id:
        db_key: analysis_info.operation.id
        indexed: True
        examples:
          - EDAM:operation_3961
          - EDAM:operation_3227
      analysis_operation_label:
        db_key: analysis_info.operation.label
        indexed: True
        examples:
          - Copy number variation detection
          - Variant Calling
      experiment_id:
        db_key: analysis_info.experiment_id
        indexed: True
        examples:
          - "geo:GSM288124"
      series_id:
        db_key: analysis_info.series_id
        indexed: True
      experiment_title:
        description: >-
          The legacy title or name for the experiment, which is an identifier
          used during import, e.g. the id used in the donor publication or study.
          This is complementary to  the `experiment_id` such as `geo:GSM288124`.
        type: string
        db_key: analysis_info.experiment_title
        beacon_model_path: False
        examples:
          - MDT-MB-100_Nsp
          - NT088_N
          - T48_Xba_051011
      data_provenance:
        db_key: info.data_provenance
      geoprov_city:
        type: string
        db_key: geo_location.properties.city
        indexed: True
      geoprov_country:
        type: string
        db_key: geo_location.properties.country
        indexed: True
      geoprov_iso_alpha3:
        type: string
        db_key: geo_location.properties.ISO3166alpha3
        indexed: True
      geoprov_long_lat:
        type: array
        items:
        type: number
        db_key: geo_location.geometry.coordinates


#------------------------------------------------------------------------------#

  genomicVariant:
    type: object
    required:
      - analysis_id
      - biosample_id
      - individual_id
    collection: variants
    id_parameter: variant_id
    upstream:
      - analyses
      - individuals
      - biosamples
    parameters:
      variant_id:
        db_key: id
        indexed: True
        computed: True
      variant_internal_id:
        type: string
        db_key: variant_internal_id
        indexed: True
        computed: True
      analysis_id:
        type: string
        db_key: analysis_id
        indexed: True
      biosample_id:
        type: string
        db_key: biosample_id
        indexed: True
      individual_id:
        type: string
        db_key: individual_id
        indexed: True
      sequence_id:
        type: string
        db_key: location.sequence_id
        indexed: True
      reference_name:
        type: string
        db_key: location.chromosome
        indexed: True
      start:
        type: integer
        db_key: location.start
        indexed: True
      end:
        type: integer
        db_key: location.end
        indexed: True
      adjoined_sequences:
        type: array
        items:
          type: object
          parameters:
            - sequence_id
            - chromosome
            - start
            - end
          types:
            - string
            - string
            - integer
            - integer
          indexed:
            - sequence_id
            - start
            - end
          split_by: '::'
        db_key: adjoined_sequences
        indexed: True
      variant_state_id:
        type: string
        db_key: variant_state.id
        indexed: True      # might not be needed if first in a compound index
      variant_state_label:
        type: string
        db_key: variant_state.label
      reference_sequence:
        type: string
        db_key: reference_sequence
        indexed: True
      sequence:
        type: string
        db_key: sequence
        indexed: True
      annotation_derived:
        type: boolean
        db_key: info.annotation_derived
        default: False
        indexed: True
      aminoacid_changes:
        type: array
        items:
          type: string
        db_key: molecular_attributes.aminoacid_changes
        indexed: True
      genomic_hgvs_id:
        type: string
        db_key: identifiers.genomicHGVS_id
        indexed: True
      var_length:
        type: integer
        db_key: info.var_length
        indexed: true
        computed: True
      variant_fusion_id:
        type: string
        db_key: fusion_id
        indexed: true
      updated:
        indexed: True
        computed: True

      # special pgxseg columns
      log2:
        db_key: info.cnv_value
        type: number
